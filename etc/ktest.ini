[DEFAULT]
default_work_dir = <HOME>/tmp/ktest/<WDIR_TAG><TIME>_<SUITE>
#default_work_dir = <HOME>/tmp/ktest/current

email.enable  = false
[test_suite]
desc = 'Default test suite'
blacklist = []

email.toList  = ['ray@kodiakdata.com']
email.from    = 'ray@kodkadata.com'
email.info    = [
                  ('Abbreviations', (
                                     'LTNC : Latency',
                                     'CTNR : Container',
                                     'OSIO : Outstanding I/Os',
                                    )
                  ),
                ]

rpm.url= ssh://root:kodiak@kodiak-cube2-utest//root/rpmbuild/RPMS/x86_64/KodiakDataEngine_latest.rpm
# The image url should be set automaticaaly via kd.tcases.helper.tch_build.TchBuild test case.
# rpm.url     = ssh://root:kodiak@kodiak-cube2-utest//root/rpmbuild/RPMS/x86_64/KodiakContainer-15.0-1.x86_64.rpm

#git.repo   = git@github.com:kodiakdata/KodiakContainer.git
#git.branch = master
#git.tag    = KodiakContainer_15_0_3
#dockCfg.url   = ssh://root:kodiak@kodiak-cube2-utest/gitwork/KodiakContainer_DockConfig.xml
#ctnr.specs   = [ (1, [20, 40, 80, 160] ) ]
#ctnr.urls   =  [
#                 'ssh://root:kodiak@kodiak-cube2-utest/gitwork/KodiakContainer_StageContainer_vdisk.xml',
#               ]

# BEGIN of test_set,
#  buildAndInstall, restart, restartAndReset, dockResBindingCfg, perf, perf_brief
# {{{
test_set.sandbox = ( 'Sandbox TestSet', [kd.tcases.sandbox.All] )
test_set.buildAndInstall = (
    'Build and Installation',
    [ kd.tcases.helper.tch_dhost.TchDhost('stop'),
      kd.tcases.helper.tch_build.TchBuild,
      kd.tcases.helper.tch_install.TchInstall('Install Kodiak software'),
    ] )

test_set.restart = (
    'Restart',
    [ kd.tcases.helper.tch_start.TchStart( ['gdb'], None ),
      kd.tcases.helper.tch_dhost.TchDhost('stop'),
      kd.tcases.helper.tch_dhost.TchDhost('start'),
    ] )

test_set.restartAndReset = (
    'Restart and reset configuration',
    [ kd.tcases.helper.tch_dhost.TchDhost('stop'),
      kd.tcases.helper.tch_dhost.TchDhost('reset_all'),
      kd.tcases.helper.tch_dhost.TchDhost('start'),
    ] )
test_set.dockResBindingCfg = (
    'Dock resource, host_binding, and config',
    [ kd.tcases.dock.tc_dock_res.TcDockRes,
      kd.tcases.dock.tc_dock_binding.TcDockBinding,
      kd.tcases.dock.tc_dock_cfg.TcDockCfg,
      #kd.tcases.dock.tc_dock_port.TcDockPort,
    ] )
test_set.perf = (
    'Measure Latency and performance',
    [ kd.tcases.nomad.tc_nomad_ltnc.TcNomadLtnc,
      kd.tcases.io.tc_io_tile.TcIoTile,
      kd.tcases.io.tc_io_iometer.TcIoIometer,
    ] )

test_set.perf_brief = (
    'Measure Latency and performance Briefly',
    [ kd.tcases.tc_set.tcs_simple.TcsSimple('dockResBindingCfg'),
      kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_1', [40] * 8]),
# Test the latency based on the 4K, 64K and 1M IO only
      kd.tcases.nomad.tc_nomad_ltnc.TcNomadLtnc('Measure the IO latency via dd',
                    [4 * 1024, 64*1024, 1024 * 1024], 10 * 1024 * 1024),
      kd.tcases.io.tc_io_tile.TcIoTile,
# Test the iometer on 100% read and 100% write only
      kd.tcases.io.tc_io_iometer.TcIoIometer('Iometer Random Write',
                    (  0, 100), [0,5, 0], [  4 * 1024,  64*1024, 1024 * 1024]),
      kd.tcases.io.tc_io_iometer.TcIoIometer('Iometer Random Read',
                    (100, 100), [0,5, 0], [  4 * 1024,  64*1024, 1024 * 1024]),
      kd.tcases.io.tc_io_iometer.TcIoIometer('Iometer Random 80r/20w',
                    ( 80, 100), [0,5, 0], [  4 * 1024,  64*1024, 1024 * 1024]),
      kd.tcases.io.tc_io_iometer.TcIoIometer('Iometer Random 50r/50w',
                    ( 50, 100), [0,5, 0], [  4 * 1024,  64*1024, 1024 * 1024]),
      kd.tcases.io.tc_io_iometer.TcIoIometer('Iometer Sequential Write',
                    (  0,   0), [0,5, 0], [128 * 1024, 512*1024, 1024 * 1024]),
      kd.tcases.io.tc_io_iometer.TcIoIometer('Iometer Sequential Read',
                    (100,   0), [0,5, 0], [128 * 1024, 512*1024, 1024 * 1024]),
    ] )
# }}}
#  tkcd test sets, tkcd_writes
# {{{
test_set.tkcd_4M_writes = (
            'TKCD seguentail writes',
            [ kd.tcases.tkcd.tct_io.TctIo(None, ['write-pattern', 1, 1024*1024, 0, None, None, 4]),
            ] )
test_set.tkcd_16M_writes = (
            'TKCD seguentail writes',
            [ kd.tcases.tkcd.tct_io.TctIo(None, ['write-pattern', 1, 1024*1024, 0, None, None, 16]),
            ] )
# }}}
# End of test_set


[test_suite_setup_default]
include_test_bench = eval(platform.node())

[test_bench::kodiak-2u1-1__local_1__remote_0]
dock.name     = myDock
# {{{
bench         = {   'desc': ('apphost vdisk performance test at 1 apphost, tile-set at local',
                             'one 1000G vdisk',
                             'Traffic Generator: FIO, engine=libaio, osio=8',
                            ),
                    'appnodes': [
                        { 'url'  : 'ssh://root:kodiak@host1a:9291', 'ip'   : '10.17.1.153', },
                    ],
                }
# }}}

[test_bench::kodiak-2u1-1__local_2__remote_0]
dock.name     = myDock
# {{{
bench         = {   'desc': ('apphost vdisk performance test at 2 apphost, tile-set at local',
                             'one 1000G vdisk',
                             'Traffic Generator: FIO, engine=libaio, osio=8',
                            ),
                    'appnodes': [
                        { 'url'  : 'ssh://root:kodiak@host1a:9291', 'ip'   : '10.17.1.153', },
                        { 'url'  : 'ssh://root:kodiak@host1b:9292', 'ip'   : '10.17.1.152', },
                    ],
                }
# }}}

[test_bench::kodiak-2u1-1__local_4__remote_0]
dock.name     = myDock
# {{{
bench         = {   'desc': ('apphost vdisk performance test at 4 apphost, tile-set at local',
                             'one 1000G vdisk',
                             'Traffic Generator: FIO, engine=libaio, osio=8',
                            ),
                    'appnodes': [
                        { 'url'  : 'ssh://root:kodiak@host1a:9291', 'ip'   : '10.17.1.153', },
                        { 'url'  : 'ssh://root:kodiak@host1b:9292', 'ip'   : '10.17.1.152', },
                        { 'url'  : 'ssh://root:kodiak@host1c:9293', 'ip'   : '10.17.1.151', },
                        { 'url'  : 'ssh://root:kodiak@host1d:9294', 'ip'   : '10.17.1.150', },
                    ],
                }
# }}}

[test_bench::kodiak-2u1-1__local_0__remote_1]
dock.name     = myDock
# {{{
bench         = {   'desc': ('apphost vdisk performance test at 1 appgost, tile-set at remote',
                             'one 1000G vdisk',
                             'Traffic Generator: FIO, engine=libaio, osio=8',
                            ),
                    'appnodes': [
                        { 'url'  : 'ssh://root:kodiak@host2a:9295', 'ip'   : '10.17.1.149', },
                    ],
                }
# }}}

[test_bench::kodiak-2u1-1__local_0__remote_2]
dock.name     = myDock
# {{{
bench         = {   'desc': ('apphost vdisk performance test at 2 appgost, tile-set at remote',
                             'one 1000G vdisk',
                             'Traffic Generator: FIO, engine=libaio, osio=8',
                            ),
                    'appnodes': [
                        { 'url'  : 'ssh://root:kodiak@host2a:9295', 'ip'   : '10.17.1.149', },
                        { 'url'  : 'ssh://root:kodiak@host2b:9296', 'ip'   : '10.17.1.148', },
                    ],
                }
# }}}

[test_bench::kodiak-2u1-1__local_1__remote_1]
dock.name     = myDock
# {{{
bench         = {   'desc': ('apphost vdisk performance test at 1/1 appgost, tile-set at local/remote',
                             'one 1000G vdisk',
                             'Traffic Generator: FIO, engine=libaio, osio=8',
                            ),
                    'appnodes': [
                        { 'url'  : 'ssh://root:kodiak@host1a:9291', 'ip'   : '10.17.1.153', },
                        { 'url'  : 'ssh://root:kodiak@host2a:9295', 'ip'   : '10.17.1.149', },
                    ],
                }
# }}}

[test_bench::kodiak-2u1-1__local_2__remote_2]
dock.name     = myDock
# {{{
bench         = {   'desc': ('apphost vdisk performance test at 2/2 appgost, tile-set at local/remote',
                             'one 1000G vdisk',
                             'Traffic Generator: FIO, engine=libaio, osio=8',
                            ),
                    'appnodes': [
                        { 'url'  : 'ssh://root:kodiak@host1a:9291', 'ip'   : '10.17.1.153', },
                        { 'url'  : 'ssh://root:kodiak@host1b:9292', 'ip'   : '10.17.1.152', },
                        { 'url'  : 'ssh://root:kodiak@host2a:9295', 'ip'   : '10.17.1.149', },
                        { 'url'  : 'ssh://root:kodiak@host2b:9296', 'ip'   : '10.17.1.148', },
                    ],
                }
# }}}

[test_bench::kodiak-2u1-1__local_4__remote_2]
dock.name     = myDock
# {{{
bench         = {   'desc': ('apphost vdisk performance test at 4/2 appgost, tile-set at local/remote',
                             'one 1000G vdisk',
                             'Traffic Generator: FIO, engine=libaio, osio=8',
                            ),
                    'appnodes': [
                        { 'url'  : 'ssh://root:kodiak@host1a:9291', 'ip'   : '10.17.1.153', },
                        { 'url'  : 'ssh://root:kodiak@host1b:9292', 'ip'   : '10.17.1.152', },
                        { 'url'  : 'ssh://root:kodiak@host1c:9293', 'ip'   : '10.17.1.151', },
                        { 'url'  : 'ssh://root:kodiak@host1d:9294', 'ip'   : '10.17.1.150', },
                        { 'url'  : 'ssh://root:kodiak@host2a:9295', 'ip'   : '10.17.1.149', },
                        { 'url'  : 'ssh://root:kodiak@host2b:9296', 'ip'   : '10.17.1.148', },
                    ],
                }
# }}}

[test_bench::kodiak-nvme4]
build.force   = true
dock.name     = myDock
#npm.opt       = KDTK_OPT="--cpu_cnt 2"
#git.co_skip   = True

# {{{
bench         = {   'desc': ('nvme14: 64 Xeon 2.10GHz, 512G Mem',
                             '7 * 1.8 T Intal nvme',
                             '1 DockNode 1 AppNode',
                             'Traffic Generator: FIO, engine=libaio, osio=8',
                            ),
                    'resource' : {
                        'tk-res': [None, None, 2, None],
                    },
                    'docknodes': [
                        {
                            'url'  : 'ssh://root:kodiak@kodiak-nvme4:2005/',
                            'ip'   : '10.12.0.4',
                            'nodes': ['all']
                            #'nodes': [ 'all', None ]
                        },
                    ],
                    'appnodes': [
                        {
                            'url'  : 'ssh://root:kodiak@kodiak-nvme4:2005/',
                            'ip'   : '10.12.0.4',
                        },
                    ],
                    'builder' : {
                        'url'  : 'ssh://root:kodiak@kodiak-cube2-utest/gitwork/KodiakContainer',
                        'ip'  : '192.168.1.78',
                    },
                }
# }}}

[test_bench::as1]
build.force   = true
dock.name     = myDock
#npm.opt       = KDTK_OPT="--cpu_cnt 2"
#git.co_skip   = True

# {{{
bench         = {   'desc': ('as1-cn1: 72 Xeon 3.0 GHz, 384 G Mem',
                             '8 * 1.0 T Intel P4500 nvme',
                             '1 DockNode 1 AppNode',
                             'Traffic Generator: FIO, engine=libaio, osio=8',
                            ),
                    'resource' : {
                        'tk-res': [None, None, 2, None],
                    },
                    'docknodes': [
                        {
                            'url'  : 'ssh://root:kodiak@as1-cn1/',
                            'ip'   : '192.168.1.127',
                            'nodes': ['all']
                            #'nodes': [ 'all', None ]
                        },
                    ],
                    'appnodes': [
                        {
                            'url'  : 'ssh://root:kodiak@as1-cn1/',
                            'ip'   : '192.168.1.127',
                        },
                    ],
                    'builder' : {
                        'url'  : 'ssh://root:kodiak@kodiak-cube2-utest/gitwork/KodiakContainer',
                        'ip'  : '192.168.1.78',
                    },
                }
# }}}

[test_bench::kodiak-r910-2]
build.force   = true
dock.name     = myDock
# {{{
bench         = {   'desc': ('kodiak-r910-2: 48 Xeon 2.00GHz, 256G Mem',
                             '2 * 500G WD nvme',
                             '1 DockNode 1 AppNode',
                             'Traffic Generator: FIO, engine=libaio, osio=8',
                            ),
                    'resource' : {
                        'tk-res': [None, None, 2, None],
                    },
                    'docknodes': [
                        {
                            'url'  : 'ssh://root:kodiak@kodiak-r910-2/',
                            'ip'   : '192.168.1.124',
                            'nodes': ['all']
                            #'nodes': [ 'all', None ]
                        },
                    ],
                    'appnodes': [
                        {
                            'url'  : 'ssh://root:kodiak@kodiak-r910-2/',
                            'ip'   : '192.168.1.124',
                        },
                    ],
                    'builder' : {
                        'url'  : 'ssh://root:kodiak@kodiak-cube2-utest/gitwork/KodiakContainer',
                        'ip'  : '192.168.1.78',
                    },
                }
# }}}

[test_bench::aparna]
dock.name     = myDock
#git.co_skip   = True
# {{{
bench         = {   'desc': ('Aparna',
                             'Traffic Generator: FIO, engine=libaio, osio=8',
                            ),
                    'resource' : {
                        'tk-res': [None, None, 2, None],
                    },
                    'docknodes': [
                        {
                            'url'  : 'ssh://root:kodiak@kodiak-2/',
                            'ip'   : '192.168.50.212',
                            'nodes': ['all']
                            #'nodes': [ 'all', None ]
                        },
                    ],
                    'appnodes': [
                        {
                            'url'  : 'ssh://root:kodiak@kodiak-2/',
                            'ip'   : '192.168.50.212',
                        },
                    ],
                    'builder' : {
                        'url'  : 'ssh://root:kodiak@kodiak-cube2-utest/gitwork/KodiakContainer',
                        'ip'  : '192.168.1.78',
                    },
                }
# }}}

[test_bench::generic-hdp-ambari]
build.force   = true
dock.name     = myDock
#npm.opt       = KDTK_OPT="--cpu_cnt 2"
#git.co_skip   = True

# {{{
bench         = {   'desc': ('Samsung nvme',
                             '1 DockNode 1 AppNode',
                             'Traffic Generator: FIO, engine=libaio, osio=8',
                            ),
                    'resource' : {
                        'tk-res': [None, None, 2, None],
                    },
                    'docknodes': [
                        {
                            'url'  : 'ssh://root:kodiak@generic-hdp-ambari:2222/',
                            'ip'   : '10.16.2.66',
                            'nodes': ['all']
                        },
                    ],
                    'appnodes': [
                        {
                            'url'  : 'ssh://root:kodiak@generic-hdp-ambari:2222/',
                            'ip'   : '10.16.2.66',
                        },
                    ],
                    'builder' : {
                        'url'  : 'ssh://root:kodiak@kodiak-cube2-utest/gitwork/KodiakContainer',
                        'ip'  : '192.168.1.78',
                    },
                }
# }}}
[test_bench::kodiak-nvme2]
dock.name     = myDock
#git.co_skip   = True
# {{{
bench         = {   'desc': ('Kodiak nvme11, nvme12, nvme13',
                             '3 DockHost 1 AppNode',
                             'Traffic Generator: FIO, engine=libaio, osio=8',
                            ),
                    'resource' : {
                        'tk-res': [None, None, 2, None],
                    },
                    'docknodes': [
                        {   'url'  : 'ssh://root:go$kodiak!@kodiak-nvme21:2021/',
                            'ip'   : '10.12.0.21',
                            'nodes': ['all']
                        },
#                        {   'url'  : 'ssh://root:go$kodiak!@kodiak-nvme22:2022/',
#                            'ip'   : '10.12.0.22',
#                            'nodes': [None]
#                        },
#                        {   'url'  : 'ssh://root:go$kodiak!@kodiak-nvme23:2023/',
#                            'ip'   : '10.12.0.23',
#                            'nodes': [None]
#                        },
                    ],
                    'appnodes': [
                        {
                            'url'  : 'ssh://root:go$kodiak!@kodiak-nvme21:2021/',
                            'ip'   : '10.12.0.21',
                        },
                    ],
                }
# }}}

[test_bench::kodiak-dev3]
build.force   = true
dock.name     = myDock
#npm.opt       = KDTK_OPT="--cpu_cnt 2"
#git.co_skip   = True

# {{{
bench         = {   'desc': ('dev3: 48 Xeon, 256G Mem, 8 * 1T SSD + HBA',
                             '1 DockNodes'
                            ),
                    'resource' : {
                        'tk-res': [None, None, 2, None],
                    },
                    'docknodes': [
                        {
                            'url'  : 'ssh://root:kodiak@kodiak-dev3/',
                            'ip'   : '10.10.0.70',
                            'nodes': [ 'all' ]
                        },
                    ],
                    'appnodes': [
                        {
                            'url' : 'ssh://root:kodiak@kodiak-dev3/',
                            'ip'  : '10.10.0.70',
                        },
                    ],
                    'builder' : {
                        'url'  : 'ssh://root:kodiak@kodiak-cube2-utest/gitwork/KodiakContainer',
                        'ip'  : '192.168.1.78',
                    },
                }
# }}}

[test_bench::kodiak-dev3.hdd]
build.force   = true
dock.name     = myDock
#git.co_skip   = True

# {{{
bench         = {   'desc': ('dev3: 48 Xeon, 256G Mem, 8 * 750G WD HD + HBA',
                             '2 DockNodes'
                            ),
                    'docknodes': [
                        {
                            'url'  : 'ssh://root:kodiak@kodiak-dev3/',
                            'mac'  : '0c:c4:7a:6e:a1:b8',
                            'ip'   : '10.10.0.70',
                            'nodes': ( [5000, None], [15000, 'all'] )
                        },
                    ],
                    'appnodes': [
                        {
                            'url' : 'ssh://root:kodiak@kodiak-dev3/',
                            'ip'  : '10.10.0.70',
                        },
                    ],
                    'windows': {
                        'url' : 'ssh://Administrator:4kodiak!@kd-dev3-w2008/',
                        'ip'  : '192.168.1.79',
                    },
                    'builder' : {
                        'url'  : 'ssh://root:kodiak@kodiak-cube2-utest/gitwork/KodiakContainer',
                        'ip'  : '192.168.1.78',
                    },
                }
# }}}

[test_bench::rayvm]
build.force   = false
dock.name     = myDock
rpm.url       = ssh://root:password@rayvm//root/rpmbuild/RPMS/x86_64/KodiakContainer-15.1-2.x86_64.rpm
npm.opt       = KDTK_OPT="--debug_level 7 --device_over_size 10240 --tkcd_cluster"
#npm.opt       = KDTK_OPT="--debug_level 7 --device_over_size 10240 --tkcd_cluster" KDTKCD_OPT="-s 100"
# TKCD module only testing
workdir       = /root/gitwork/KodiakContainer
io.iometer_skip = True
io.fio_skip   = True
blacklist     = [ kd.tcases.helper.tch_build.TchBuild(),
                  kd.tcases.io.tc_io_iometer.TcIoIometer('Iometer Random Write'),
                  kd.tcases.helper.tch_install.TchInstall('Install Kodiak software'),                ]
# {{{
bench         = {
                    'desc' : ('Ray VM: 2 Intel i5 1.9GHz CPU, 2G- Mem, 5 * 4G ssd',
                              '1 Docknodes'
                             ),
                    'resource' : {
                        'tk-res': [16, 64, 1, None, 4],
                    },
                    'docknodes' : [
                        {
                            'url'  : 'ssh://root:password@rayvm/',
                            'ip'   : '192.168.56.129',
                            'nodes': [ 'all' ]
                            #'nodes': [ 'all', None ]
                            #'nodes': [ 'all', None, None ]
                            #'nodes': [ 'all', 'all', 'all' ] Not supported anymore
                        }
                    ],
                    'appnodes' : [
                        {
                            'url'  : 'ssh://root:password@rayvm/',
                            'ip'   : '192.168.56.129',
                        },
                    ],
                    'builder' : {
                        'url'  : 'ssh://root:password@192.168.56.129/gitwork/KodiakContainer/',
                        'ip'   : '192.168.56.129',
                    },
                }
# }}}

[test_bench::kodiak-cube2]
build.force   = true
dock.name     = myDock
#git.co_skip   = True

# {{{
bench         = {   'desc': ('cube2 server: 24 Xeon 2.67GHz CPU, 47+ G Mem, 4 * Samsung 250G ssd',
                             '4 DockNodes at 2 VM, each VM has 4 Core, 8G Mem, and 8 62.5 G ssd',
                             '1 AppHost at 1 VM, VM has 4 Core, 8G Mem',
                            ),
                    'docknodes' : [
                        {
                            'url'  : 'ssh://root:kodiak@kodiak-cube2/',
                            'ip'   : '192.168.1.10',
                            'nodes': [ [15000, 'all'] ]
                        },
                    ],
                    'appnodes': [
                        {
                            'url' : 'ssh://root:kodiak@kodiak-cube2/',
                            'ip'  : '192.168.1.10',
                        },
                    ],
                    'windows': {
                        'url' : 'ssh://Administrator:4kodiak!@kd-cube2-w2008/',
                        'ip'  : '192.168.1.19',
                    },
                    'builder': {
                        'url'  : 'ssh://root:kodiak@kodiak-cube2-utest/gitwork/KodiakContainer',
                        'ip'  : '192.168.1.18',
                    },
                }
# }}}

[test_bench::kodiak-cube2-utest-raw]
build.force   = true
dock.name     = myDock
npm.opt       = KDTK_OPT="--device_over_size 10240"

# {{{
bench         = {   'desc': ('cube2 server: 24 Xeon 2.67GHz CPU, 47+ G Mem, 4 * Samsung 250G ssd',
                             '4 DockNodes at 2 VM, each VM has 4 Core, 8G Mem, and 8 62.5 G ssd',
                             '1 AppHost at 1 VM, VM has 4 Core, 8G Mem',
                            ),
                    'docknodes' : [
                        {
                            'url'  : 'ssh://root:kodiak@kodiak-cube2/',
                            'ip'   : '192.168.1.10',
                            'nodes': [ [15000, 'all'] ]
                        },
                    ],
                    'appnodes': [
                        {
                            'url' : 'ssh://root:kodiak@kodiak-cube2/',
                            'ip'  : '192.168.1.10',
                        },
                    ],
                    'windows': {
                        'url' : 'ssh://Administrator:4kodiak!@kd-cube2-w2008/',
                        'ip'  : '192.168.1.19',
                    },
                    'builder': {
                        'url'  : 'ssh://root:kodiak@kodiak-cube2-utest/gitwork/KodiakContainer',
                        'ip'  : '192.168.1.18',
                    },
                }
# }}}

[test_bench::kodiak-cube2-vms]
build.force   = false
dock.name     = myDock
#npm.opt       = KDTK_OPT="--device_over_size 10240"

# {{{
bench         = {   'desc': ('cube2 server: 24 Xeon 2.67GHz CPU, 47+ G Mem, 5 * Samsung 1T ssd',
                             '3 DockNodes at 3 VM, each VM has 4 Core, 8G Mem, and 10 128 G ssd',
                             '1 AppHost at 1 VM, VM has 4 Core, 8G Mem',
                            ),
                    'resource' : {
                        'tk-res': [None, None, 1, '2-3'],
                    },
                    'docknodes' : [
                        {
                            'url'  : 'ssh://root:kodiak@kodiak-cube2-vm1/',
                            'ip'   : '192.168.1.11',
                            'nodes': ( ['all'] )
                        },
                        {
                            'url'  : 'ssh://root:kodiak@kodiak-cube2-vm2/',
                            'ip'   : '192.168.1.12',
                            'nodes': ( ['all'] )
                        },
                        {
                            'url'  : 'ssh://root:kodiak@kodiak-cube2-vm3/',
                            'ip'   : '192.168.1.13',
                            'nodes': ( ['all'] )
                        },
                    ],
                    'appnodes': [
                        {
                            'url' : 'ssh://root:kodiak@kodiak-cube2-vm1/',
                            'ip'  : '192.168.1.11',
                        },
                        {
                            'url' : 'ssh://root:kodiak@kodiak-cube2-vm2/',
                            'ip'  : '192.168.1.12',
                        },
                        {
                            'url' : 'ssh://root:kodiak@kodiak-cube2-vm3/',
                            'ip'  : '192.168.1.13',
                        },
                    ],
                    'windows': {
                        'url' : 'ssh://Administrator:4kodiak!@kd-cube2-w2008/',
                        'ip'  : '192.168.1.19',
                    },
                    'builder': {
                        'url'  : 'ssh://root:kodiak@kodiak-cube2-utest/gitwork/KodiakContainer',
                        'ip'  : '192.168.1.18',
                    },
                }
# }}}

[test_bench::kodiak-cube2-vm1]
build.force   = true
dock.name     = dock_cube2_vm1

# {{{
bench         = {   'desc': ('cube2 server: 24 Xeon 2.67GHz CPU, 47+ G Mem, 5 * Samsung 1T ssd',
                             '3 DockNodes at 3 VM, each VM has 4 Core, 8G Mem, and 10 128 G ssd',
                             '1 AppHost at 1 VM, VM has 4 Core, 8G Mem',
                            ),
                    'docknodes' : [
                        {
                            'url'  : 'ssh://root:kodiak@kodiak-cube2-vm1/',
                            'ip'   : '192.168.1.11',
                            'nodes': ( ['all'] )
                        },
                    ],
                    'appnodes': [
                        {
                            'url' : 'ssh://root:kodiak@kodiak-cube2-vm1/',
                            'ip'  : '192.168.1.11',
                        },
                    ],
                    'windows': {
                        'url' : 'ssh://Administrator:4kodiak!@kd-cube2-w2008/',
                        'ip'  : '192.168.1.19',
                    },
                    'builder': {
                        'url'  : 'ssh://root:kodiak@kodiak-cube2-utest/gitwork/KodiakContainer',
                        'ip'  : '192.168.1.18',
                    },
                }
# }}}

[test_bench::kodiak-cube2-vm2]
build.force   = true
dock.name     = dock_cube2_vm2

# {{{
bench         = {   'desc': ('cube2 vm: 4 Xeon 2.67GHz CPU, 8 G Mem, 10 * Samsung 32G ssd partition',
                             '1 DockNodes and 1 AppHost',
                            ),
                    'docknodes' : [
                        {
                            'url'  : 'ssh://root:kodiak@kodiak-cube2-vm2/',
                            'ip'   : '192.168.1.12',
                            'nodes': ( ['all'] )
                        },
                    ],
                    'appnodes': [
                        {
                            'url' : 'ssh://root:kodiak@kodiak-cube2-vm2/',
                            'ip'  : '192.168.1.12',
                        },
                    ],
                    'windows': {
                        'url' : 'ssh://Administrator:4kodiak!@kd-cube2-w2008/',
                        'ip'  : '192.168.1.19',
                    },
                    'builder': {
                        'url'  : 'ssh://root:kodiak@kodiak-cube2-utest/gitwork/KodiakContainer',
                        'ip'  : '192.168.1.18',
                    },
                }
# }}}

[test_bench::kodiak-cube2-vm3]
build.force   = true
dock.name     = dock_cube2_vm3

# {{{
bench         = {   'desc': ('cube2 vm: 4 Xeon 2.67GHz CPU, 8 G Mem, 10 * Samsung 32G ssd partition',
                             '1 DockNodes and 1 AppHost',
                            ),
                    'docknodes' : [
                        {
                            'url'  : 'ssh://root:kodiak@kodiak-cube2-vm3/',
                            'ip'   : '192.168.1.13',
                            'nodes': ( ['all'] )
                        },
                    ],
                    'appnodes': [
                        {
                            'url' : 'ssh://root:kodiak@kodiak-cube2-vm3/',
                            'ip'  : '192.168.1.13',
                        },
                    ],
                    'windows': {
                        'url' : 'ssh://Administrator:4kodiak!@kd-cube2-w2008/',
                        'ip'  : '192.168.1.19',
                    },
                    'builder': {
                        'url'  : 'ssh://root:kodiak@kodiak-cube2-utest/gitwork/KodiakContainer',
                        'ip'  : '192.168.1.18',
                    },
                }
# }}}

[test_bench::kodiak-cube2-utest]
#include_test_bench = kodiak-cube2-vm2
include_test_bench = kodiak-cube2-vm1
#git.co_skip   = True
blacklist     = [ kd.tcases.io.tc_io_iometer.TcIoIometer('Iometer Random Write'), ]

[test_bench::kodiak-cube2-vm4]
build.force   = false
dock.name     = myDock
npm.opt       = KDTK_OPT="--debug_level 7 --device_over_size 10240"
io.iometer_skip = True
#io.fio_skip   = True
blacklist     = [ kd.tcases.helper.tch_build.TchBuild(),
                  kd.tcases.io.tc_io_iometer.TcIoIometer('Iometer Random Write'),
                  kd.tcases.helper.tch_install.TchInstall('Install Kodiak software'),
                ]
# {{{
bench         = {
                    'desc' : ('cube2-vm4: 4 Intel Westmere E56xx 2659.998 CPU, 8G Mem, 2 * 31.1G ssd',
                              '1 Docknodes'
                             ),
                    'resource' : {
                        'tk-res': [None, None, None, None],
                    },
                    'docknodes' : [
                        {
                            'url'  : 'ssh://root:kodiak@kodiak-cube2-vm4/',
                            'ip'   : '192.168.1.14',
                            'nodes': [ 'all' ]
                        }
                    ],
                    'appnodes' : [
                        {
                            'url'  : 'ssh://root:kodiak@kodiak-cube2-vm4/',
                            'ip'   : '192.168.1.14',
                        },
                    ],
                    'builder' : {
                        'url'  : 'ssh://root:kodiak@kodiak-cube2-vm4/gitwork/KodiakContainer/',
                        'ip'   : '192.168.1.14',
                    },
                }
# }}}

[test_bench::cluster]
test_suite = setup_default
bench.tkcd.ignore_conn_err = True
node_cnts = 3
bench.docknodes.nodes = [ 'all' ] + [ None for x in range( %(node_cnts)s - 1) ]

[test_bench::cluster_3]
include_test_bench: cluster
node_cnts = 3
bench.docknodes.nodes = [ 'all' ] + [ None for x in range( %(node_cnts)s - 1) ]

[test_bench::cluster_4]
include_test_bench: cluster
node_cnts = 4
bench.docknodes.nodes = [ 'all' ] + [ None for x in range( %(node_cnts)s - 1) ]

[test_bench::cluster_5]
include_test_bench: cluster
node_cnts = 5
bench.docknodes.nodes = [ 'all' ] + [ None for x in range( %(node_cnts)s - 1) ]

[test_bench::cluster_8]
include_test_bench: cluster
node_cnts = 8
bench.docknodes.nodes = [ 'all' ] + [ None for x in range( %(node_cnts)s - 1) ]

[test_bench::cluster_16]
include_test_bench: cluster
node_cnts = 16
bench.docknodes.nodes = [ 'all' ] + [ None for x in range( %(node_cnts)s - 1) ]

# step test suite:
#   step_start, step_stop, step_restart, step_reset, step_reset_all, step_init, step_insmod, step_dock, build_and_install
# {{{
[test_suite_step_start]
test_suite = setup_default
desc       = 'Start Kodiak apps'
whitelist  = [ kd.tcases.helper.tch_dhost.TchDhost('start') ]

[test_suite_step_stop]
test_suite = setup_default
desc       = 'Stop Kodiak apps'
whitelist  = [ kd.tcases.helper.tch_dhost.TchDhost('stop') ]

[test_suite_step_restart]
test_suite = setup_default
desc       = 'Start Kodiak apps'
whitelist  = [ kd.tcases.helper.tch_dhost.TchDhost('restart') ]

[test_suite_step_reset]
test_suite = setup_default
desc       = 'Reset runtime data'
whitelist  = [ kd.tcases.helper.tch_dhost.TchDhost('reset') ]

[test_suite_step_reset_all]
test_suite = setup_default
desc       = 'Reset runtime/config-time data'
whitelist  = [ kd.tcases.helper.tch_dhost.TchDhost('reset_all') ]

[test_suite_step_init]
test_suite = setup_default
desc       = 'Init Kodiak apps'
whitelist  = [ kd.tcases.helper.tch_dhost.TchDhost('init') ]

[test_suite_step_insmod]
test_suite = setup_default
desc       = 'insert kodiak kernel module'
whitelist  = [ kd.tcases.helper.tch_dhost.TchDhost('insmod') ]

[test_suite_step_dock]
test_suite = setup_default
desc       = 'Apply Dock Config'
whitelist  = [ kd.tcases.tc_set.tcs_simple.TcsSimple('dockResBindingCfg') ]

[test_suite_step_dock_cfg]
test_suite = setup_default
desc       = 'Apply Dock Config'
whitelist  = [ kd.tcases.dock.tc_dock_cfg.TcDockCfg ]

[test_suite_step_ctnr]
test_suite = setup_default
desc       = 'Dock a container'
whitelist  = [ kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_1', [4] * 1]) ]

[test_suite_step_vdisk_io]
test_suite = setup_default
desc       = 'Simple IO for all vdisk'
whitelist  = [ kd.tcases.io.tc_io_tile.TcIoTile() ]
# }}}

# simple test suite:
#   start, stop, restart, build_and_install, build, install, umount, mount
[test_suite_start]
test_suite= step_start
[test_suite_stop]
test_suite= step_stop
[test_suite_restart]
test_suite= step_restart

[test_suite_build_and_install]
desc          = 'Build and Install'
test_suite    = setup_default
whitelist     = [ kd.tcases.tc_set.tcs_simple.TcsSimple('buildAndInstall') ]

[test_suite_build]
desc          = 'Build'
test_suite    = setup_default
# git.co_skip   = True
whitelist     = [ kd.tcases.helper.tch_build.TchBuild, ]

[test_suite_make_tkcd]
desc          = 'remake tkcd'
test_suite    = setup_default
whitelist     = [ kd.tcases.helper.tch_make.TchMake('kdtkcd') ]

[test_suite_install]
desc          = 'install'
test_suite    = setup_default
whitelist     = [ kd.tcases.helper.tch_dhost.TchDhost('stop'),
                  kd.tcases.helper.tch_install.TchInstall('Install Kodiak software'),
                ]

[test_suite_umount]
desc          = 'umount all data disk'
test_suite    = setup_default
whitelist     = [ kd.tcases.helper.tch_dhost.TchDhost('umount') ]

[test_suite_mount]
desc          = 'mount all data disk'
test_suite    = setup_default
whitelist     = [ kd.tcases.helper.tch_dhost.TchDhost('mount') ]
# }}}


# BEGIN of rdisk test-suite,
#   rdisk_format, rdisk_mount, rdisk_umount
#   rdisk_0, rdisk_del, rdisk_rescan, rdisk_n
# {{{
[test_suite_rdisk_0]
desc          = 'Delete all pDISKs'
test_suite    = setup_default
whitelist  = [ kd.tcases.helper.tch_dhost.TchDhost('rdisk-del'), ]

[test_suite_rdisk_del]
desc          = 'Delete a pDISK'
test_suite    = setup_default
whitelist  = [ kd.tcases.helper.tch_dhost.TchDhost('rdisk-del', 1), ]

[test_suite_rdisk_rescan]
desc          = 'Bring back all pDisks'
test_suite    = setup_default
whitelist  = [ kd.tcases.helper.tch_dhost.TchDhost('rdisk-rescan'), ]

[test_suite_rdisk_1]
desc          = 'Allow upto 1 pDisks'
test_suite    = setup_default
whitelist  = [ kd.tcases.helper.tch_dhost.TchDhost('rdisk-max', 1), ]

[test_suite_rdisk_2]
desc          = 'Allow upto 2 pDisks'
test_suite    = setup_default
whitelist  = [ kd.tcases.helper.tch_dhost.TchDhost('rdisk-max', 2), ]

[test_suite_rdisk_5]
desc          = 'Allow upto 5 pDisks'
test_suite    = setup_default
whitelist  = [ kd.tcases.helper.tch_dhost.TchDhost('rdisk-max', 5), ]

[test_suite_rdisk_6]
desc          = 'Allow upto 6 pDisks'
test_suite    = setup_default
whitelist  = [ kd.tcases.helper.tch_dhost.TchDhost('rdisk-max', 6), ]

[test_suite_rdisk_8]
desc          = 'Allow upto 8 pDisks'
test_suite    = setup_default
whitelist  = [ kd.tcases.helper.tch_dhost.TchDhost('rdisk-max', 8), ]

[test_suite_rdisk_9]
desc          = 'Allow upto 9 pDisks'
test_suite    = setup_default
whitelist  = [ kd.tcases.helper.tch_dhost.TchDhost('rdisk-max', 9), ]

[test_suite_rdisk_format]
desc          = 'rdisk format xfs'
test_suite    = setup_default
whitelist  = [ kd.tcases.helper.tch_dhost.TchDhost('rdisk-format-xfs', '-b size=4k -s size=4k'), ]

[test_suite_rdisk_mount]
desc          = 'rdisk mount xfs'
test_suite    = setup_default
whitelist  = [ kd.tcases.helper.tch_dhost.TchDhost('rdisk-mount-xfs'), ]

[test_suite_rdisk_umount]
desc          = 'rdisk mount xfs'
test_suite    = setup_default
whitelist  = [ kd.tcases.helper.tch_dhost.TchDhost('umount'),]
# }}}

# BEGIN of vdisk test-suite,
#   vdisk_format, vdisk_mount, vdisk_umount
# {{{
[test_suite_vdisk_format]
desc          = 'rdisk format xfs'
test_suite    = setup_default
whitelist  = [ kd.tcases.helper.tch_dhost.TchDhost('vdisk-format-xfs', '-b size=4k -s size=4k'), ]

[test_suite_vdisk_mount]
desc          = 'rdisk mount xfs'
test_suite    = setup_default
whitelist  = [ kd.tcases.helper.tch_dhost.TchDhost('vdisk-mount-xfs'), ]

[test_suite_vdisk_umount]
desc          = 'rdisk mount xfs'
test_suite    = setup_default
whitelist  = [ kd.tcases.helper.tch_dhost.TchDhost('vdisk-umount'),]
# }}}


[test_suite_iometer]
# {{{
test_suite    = setup_default
desc          = 'IOMETER Test case'
git.commit    = 38506ef44bd8b6a13941ad8a96b0a3a7a6f4fe44
whitelist     = [ kd.tcases.io.tc_io_iometer.TcIoIometer, ]
# }}}

[test_suite_small]
desc          = 'Test suite based on the small vdisks'
test_suite    = setup_default
dock_ctnr_sleep = 20
rdisk_cnt       = 28
# {{{
whitelist  = [
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-max', %(rdisk_cnt)s),
              #kd.tcases.helper.tch_dhost.TchDhost('rdisk-rescan'),
              #kd.tcases.tc_set.tcs_simple.TcsSimple('buildAndInstall'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('restartAndReset'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('dockResBindingCfg'),
              #kd.tcases.helper.tch_pause.TchPause('yes_to_continue', "After start kodiak-data-engine ..."),
# test dock
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_1', [3] * 4]),
              kd.tcases.helper.tch_util.TchUtil('sleep', %(dock_ctnr_sleep)s),
              kd.tcases.io.tc_io_tile.TcIoTile( (3*4) ),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_2', [4] * 4, '4+1_32k']),
              kd.tcases.helper.tch_util.TchUtil('sleep', %(dock_ctnr_sleep)s),
              kd.tcases.io.tc_io_tile.TcIoTile( (4*4*5/4) + (3*4) ),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_3', [8] * 4, '8+1_8k']),
              kd.tcases.helper.tch_util.TchUtil('sleep', %(dock_ctnr_sleep)s),
              kd.tcases.io.tc_io_tile.TcIoTile( (8*4*9/8) + (4*4*5/4) + (3*4) ),
              kd.tcases.io.tc_fio.TcFio( runSpec='randrw:70', runTime=[0,1,0], txSzs=[128*1024,1024*1024]),
# test undock and re-dock again
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_1']),
              kd.tcases.helper.tch_util.TchUtil('sleep', %(dock_ctnr_sleep)s),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_2']),
              kd.tcases.helper.tch_util.TchUtil('sleep', %(dock_ctnr_sleep)s),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_3']),
              kd.tcases.helper.tch_util.TchUtil('sleep', %(dock_ctnr_sleep)s),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_1', [3] * 4]),
              kd.tcases.helper.tch_util.TchUtil('sleep', %(dock_ctnr_sleep)s),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_2', [4] * 4, '4+1_32k']),
              kd.tcases.helper.tch_util.TchUtil('sleep', %(dock_ctnr_sleep)s),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_3', [8] * 4, '8+1_8k']),
              kd.tcases.helper.tch_util.TchUtil('sleep', %(dock_ctnr_sleep)s),
              kd.tcases.io.tc_io_tile.TcIoTile( (8*4*9/8) + (4*4*5/4) + (3*4) ),
              kd.tcases.io.tc_fio.TcFio( runSpec='randrw:70', runTime=[0,1,0], txSzs=[128*1024,1024*1024]),
# test restart and dock more container
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),
              kd.tcases.tc_set.tcs_simple.TcsSimple('restart'),
              #kd.tcases.helper.tch_pause.TchPause('yes_to_continue', "After restart kodiak-data-engine ..."),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),
              kd.tcases.io.tc_io_tile.TcIoTile( (8*4*9/8) + (4*4*5/4) + (3*4) ),
              #
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_4', [16] * 4, '8+1_8k']),
              kd.tcases.helper.tch_util.TchUtil('sleep', %(dock_ctnr_sleep)s),
              kd.tcases.io.tc_io_tile.TcIoTile( (16*4*9/8) + (8*4*9/8) + (4*4*5/4) + (3*4) ),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_5', [8] * 4, '4+1_32k']),
              kd.tcases.helper.tch_util.TchUtil('sleep', %(dock_ctnr_sleep)s),
              kd.tcases.io.tc_io_tile.TcIoTile( (8*4*5/4) + (16*4*9/8) + (8*4*9/8) + (4*4*5/4) + (3*4) ),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_6', [6] * 4]),
              kd.tcases.helper.tch_util.TchUtil('sleep', %(dock_ctnr_sleep)s),
              kd.tcases.io.tc_io_tile.TcIoTile( (6*4) + (8*4*5/4) + (16*4*9/8) + (8*4*9/8) + (4*4*5/4) + (3*4) ),
             ]
# }}}

[test_suite_small_1x1]
desc          = 'Test suite based on the small vdisks'
include_test_bench = cluster)
whitelist  = [
# {{{
              #kd.tcases.helper.tch_dhost.TchDhost('rdisk-rescan'),
              #kd.tcases.tc_set.tcs_simple.TcsSimple('buildAndInstall'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('restartAndReset'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('dockResBindingCfg'),
              kd.tcases.helper.tch_util.TchUtil('sleep', 5),
              #kd.tcases.helper.tch_pause.TchPause('yes_to_continue', "After start kodiak-data-engine ..."),
# test dock
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_1', [3] * 4, 'P__1x1']),
              kd.tcases.io.tc_io_tile.TcIoTile(),
              kd.tcases.io.tc_fio.TcFio( runSpec='randrw:70', runTime=[0,1,0], txSzs=[128*1024,1024*1024]),
# }}}
             ]
[test_suite_small_sync]
desc          = 'Small vdisks + one rdisk has io error'
test_suite    = setup_default
dock_ctnr_sleep = 20
rdisk_cnt       = 28
whitelist  = [
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-max', %(rdisk_cnt)s),
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-rescan'),
              #kd.tcases.tc_set.tcs_simple.TcsSimple('buildAndInstall'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('restartAndReset'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('dockResBindingCfg'),
# test dock
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_1', [3] * 4]),
              kd.tcases.helper.tch_util.TchUtil('sleep', %(dock_ctnr_sleep)s),
              kd.tcases.io.tc_io_tile.TcIoTile( (3*4) ),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_2', [4] * 4, '4+1_32k']),
              kd.tcases.helper.tch_util.TchUtil('sleep', %(dock_ctnr_sleep)s),
              kd.tcases.io.tc_io_tile.TcIoTile( (4*4*5/4) + (3*4) ),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_3', [8] * 4, '8+1_8k']),
              kd.tcases.helper.tch_util.TchUtil('sleep', %(dock_ctnr_sleep)s),
              kd.tcases.io.tc_io_tile.TcIoTile( (8*4*9/8) + (4*4*5/4) + (3*4) ),
# test restart and dock more container
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),
              kd.tcases.tc_set.tcs_simple.TcsSimple('restart'),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),
             ]

[test_suite_small_err_io]
desc          = 'Small vdisks + one rdisk has io error'
test_suite    = setup_default
dock_ctnr_sleep = 20
rdisk_cnt       = 5
whitelist  = [
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-max', %(rdisk_cnt)s),
              kd.tcases.tc_set.tcs_simple.TcsSimple('buildAndInstall'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('restartAndReset'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('dockResBindingCfg'),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_1', [4] * 1, '4+1_32k']),
              kd.tcases.helper.tch_util.TchUtil('sleep', %(dock_ctnr_sleep)s),
              kd.tcases.io.tc_io_tile.TcIoTile( (4*1*5/4) ),
              #kd.tcases.io.tc_fio.TcFio(desc='', runSpec='write', runTime=[0,0,10], txSzs=[128*1024],ioengine='libaio'),
              kd.tcases.tkcd.tct_device.TctDevice('err-io', 2),
              kd.tcases.io.tc_io_tile.TcIoTile( (4*1*5/4) ),
             ]


[test_suite_small_rebuild]
desc          = 'Small vdisks + one rdisk has io error'
test_suite    = setup_default
dock_ctnr_sleep = 20
rdisk_cnt       = 28
vdisk_sz        = 20
vdisk_cnt       =  8
# {{{
whitelist  = [
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-max', %(rdisk_cnt)s),
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-rescan'),
              #kd.tcases.tc_set.tcs_simple.TcsSimple('buildAndInstall'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('restartAndReset'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('dockResBindingCfg'),
# test dock
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_2', [%(vdisk_sz)s] * %(vdisk_cnt)s, '4+1_32k']),
              kd.tcases.helper.tch_util.TchUtil('sleep', %(dock_ctnr_sleep)s),
              #kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_1',    [%(vdisk_sz)s] * %(vdisk_cnt)s]),
              #kd.tcases.helper.tch_util.TchUtil('sleep', %(dock_ctnr_sleep)s),
              kd.tcases.io.tc_io_tile.TcIoTile( ),

# read/write/readwrite:70/randread/randwrite/randrw:70
              kd.tcases.io.tc_fio.TcFio( runSpec='write',      txSzs=[ 64*1024],    verify='crc32c'),
              kd.tcases.io.tc_fio.TcFio( runSpec='randwrite',  txSzs=['64k-1024k'], verify='crc32c', runTime=[0,5,0]),
              kd.tcases.io.tc_fio.TcFio( runSpec='verify',     txSzs=[ 64*1024],    verify='crc32c'),
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-del', 2),
              kd.tcases.io.tc_fio.TcFio( runSpec='verify',     txSzs=[1024*1024],   verify='crc32c'),
             ]
# }}}

[test_suite_small_rebuild_debug]
desc          = 'Small vdisks + one rdisk has io error'
test_suite    = setup_default
dock_ctnr_sleep = 20
rdisk_cnt       =  8
vdisk_sz        = 12
vdisk_cnt       =  4
# {{{
whitelist  = [
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-max', %(rdisk_cnt)s),
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-rescan'),
              #kd.tcases.tc_set.tcs_simple.TcsSimple('buildAndInstall'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('restartAndReset'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('dockResBindingCfg'),
# test dock
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_2', [%(vdisk_sz)s] * %(vdisk_cnt)s, '4+1_32k']),
              kd.tcases.helper.tch_util.TchUtil('sleep', %(dock_ctnr_sleep)s),
              kd.tcases.io.tc_io_tile.TcIoTile( ),

# read/write/readwrite:70/randread/randwrite/randrw:70
              # kd.tcases.io.tc_fio.TcFio( runSpec='write',      txSzs=[ 64*1024],    verify='crc32c', osio=4),
              # kd.tcases.helper.tch_util.TchUtil('sleep', 1),
              # kd.tcases.io.tc_fio.TcFio( runSpec='randwrite',  txSzs=['64k-1024k'], verify='crc32c', runTime=[0,5,0]),
              # kd.tcases.helper.tch_util.TchUtil('sleep', 1),
              # kd.tcases.io.tc_fio.TcFio( runSpec='verify',     txSzs=[ 64*1024],  verify='crc32c'),
              # kd.tcases.helper.tch_util.TchUtil('sleep', 1),
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-del', 2),
              kd.tcases.io.tc_fio.TcFio( runSpec='read',     txSzs=[1024*1024]),
              # kd.tcases.io.tc_fio.TcFio( runSpec='verify',     txSzs=[1024*1024],   verify='crc32c'),
             ]
# }}}

[test_suite_xfs]
desc          = 'Understand the XFS filesystem'
test_suite    = setup_default
npm.opt       = KDTK_OPT="--device_over_size 1024"
whitelist  = [
              kd.tcases.helper.tch_dhost.TchDhost('umount'),
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-max', 2),
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-format-xfs', '-b size=4k -s size=4k'),
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-mount-xfs'),
             ]

[test_suite_current]
desc          = 'Verify the new test cases'
test_suite    = setup_default
npm.opt       = KDTK_OPT="--device_over_size 1024"
whitelist  = [

              #kd.tcases.io.tc_fio.TcFio(vdisk=True, xfs=False, runSpec=(100,0), runTime=[0,0,1], txSzs=[  4*1024,  16*1024], osio=2, diskCnt=1),
              #kd.tcases.io.tc_fio.TcFio( runSpec='randrw:70', runTime=[0,0,10], txSzs=['64k-1024k'], bw='1024k'),
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-rand-del'),
              #kd.tcases.helper.tch_dhost.TchDhost('vdisk-format-xfs', '-b size=64k -s size=4k'),
              #kd.tcases.helper.tch_dhost.TchDhost('vdisk-format-xfs', '-b size=4k -s size=4k'),
              #kd.tcases.helper.tch_dhost.TchDhost('vdisk-mount-xfs'),
              #kd.tfwk.for('BEGIN', 'for_BEGIN_ii=0', 'for_BEGIN_ii<10', 'for_BEGIN_ii += 1'), 
              #kd.tcases.helper.tch_util.TchUtil('shell', ['echo',  'Hello for_BEGIN_ii']),
              #kd.tfwk.for('END'), 
             ]

[test_suite_debug]
desc          = 'Debug queue full'
test_suite    = setup_default
whitelist  = [
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-rescan'),
              #kd.tcases.tc_set.tcs_simple.TcsSimple('buildAndInstall'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('restartAndReset'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('dockResBindingCfg'),
# test dock
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_1', [3] * 4]),
              kd.tcases.io.tc_io_tile.TcIoTile( (3*4) ),
              kd.tcases.helper.tch_pause.TchPause('enter_and_continue', 'ctrl-c to exit'),

              #kd.tcases.helper.tch_dhost.TchDhost('rdisk-max', 1),
              kd.tcases.tc_set.tcs_simple.TcsSimple('restartAndReset'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('dockResBindingCfg'),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_1', [47] * 4 ]),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_2', [19] * 2 ]),
              kd.tcases.io.tc_io_tile.TcIoTile(),
              kd.tcases.helper.tch_pause.TchPause('enter_and_continue', 'ctrl-c to exit'),
              kd.tcases.helper.tch_util.TchUtil('sleep', 20),
              
              kd.tcases.helper.tch_dhost.TchDhost('stop'),
              kd.tcases.helper.tch_dhost.TchDhost('umount'),
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-max', 0),
              kd.tcases.helper.tch_pause.TchPause('enter_and_continue', 'check mount point'),
              kd.tcases.helper.tch_dhost.TchDhost('start'),
              kd.tcases.helper.tch_pause.TchPause('enter_and_continue', 'check rebuild state'),
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-rescan'),
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-max', 1),
              kd.tcases.helper.tch_pause.TchPause('enter_and_continue', 'Wait for reformat'),
# can error
              kd.tcases.io.tc_io_tile.TcIoTile(),
              kd.tcases.helper.tch_pause.TchPause('enter_and_continue', 'Wait for IO error'),
# delete panel
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_1']),
              kd.tcases.helper.tch_pause.TchPause('enter_and_continue', 'panel del pending'),
# new panel
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_2', [1]]),
              kd.tcases.helper.tch_pause.TchPause('enter_and_continue', 'wait for vdisk show up'),
              kd.tcases.io.tc_io_tile.TcIoTile(),

              #kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_1', [1], 'P_4x1_32k__1x2']),
              #kd.tcases.helper.tch_util.TchUtil('sleep', 20),
              #kd.tcases.io.tc_io_tile.TcIoTile(),
              #kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_1']),
              #kd.tcases.tc_set.tcs_simple.TcsSimple('restart'),
              #kd.tcases.io.tc_io_tile.TcIoTile( (3*4) ),
             ]

[test_suite_debug2]
desc          = 'Debug queue full'
test_suite    = setup_default
whitelist  = [
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_1']),
              kd.tcases.helper.tch_pause.TchPause('enter_and_continue', 'panel del pending'),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_2', [1]]),
              kd.tcases.helper.tch_pause.TchPause('enter_and_continue', 'wait for vdisk show up'),
              kd.tcases.io.tc_io_tile.TcIoTile(),
# try one more
              #kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_2']),
              #kd.tcases.helper.tch_pause.TchPause('enter_and_continue', 'panel del pending'),
              #kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_3', [1]]),
              #kd.tcases.helper.tch_pause.TchPause('enter_and_continue', 'wait for vdisk show up'),
              #kd.tcases.io.tc_io_tile.TcIoTile(),
             ]

[test_suite_debug_tkcd_cluster]
desc          = 'Debug P__1x2'
include_test_bench = cluster
whitelist  = [
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-rescan'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('restartAndReset'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('dockResBindingCfg'),
              kd.tcases.helper.tch_util.TchUtil('sleep', 20),

              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_4x1_32k__1x2', [1], 'P__1x2']),
              kd.tcases.io.tc_io_tile.TcIoTile(),
              #kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_4x1_32k', [1], 'P_4x1_32k']),
              #kd.tcases.io.tc_io_tile.TcIoTile(),
              #kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_1']),
              #kd.tcases.tc_set.tcs_simple.TcsSimple('restart'),
              #kd.tcases.io.tc_io_tile.TcIoTile( (3*4) ),
             ]

[test_suite_debug_tkcd_cluster_start_2node]
# block the port
desc          = 'Debug P__1x2, starting 2 node only'
include_test_bench = cluster
bench.docknodes = [{ 'url'  : 'ssh://root:password@rayvm/',
                     'ip'   : '192.168.56.129',
                     'nodes': [ 'all', None ]
                  }]
whitelist  = [
              kd.tcases.helper.tch_dhost.TchDhost('start'),
             ]

[test_suite_debug_tkcd_cluster2]
desc          = 'Debug P_4x1_32k__1x1'
test_suite    = setup_default
bench         = {
                    'desc' : ('Rayvm, 1 dockhost, 2 docknode, 10 raw disks'),
                    'resource' : { 'tk-res': [16, 64, 1, None], },
                    'docknodes' : [
                        { 'url'  : 'ssh://root:password@rayvm/',
                          'ip'   : '192.168.56.129',
                          'nodes': [ 'all', None ]
                        }
                    ],
                    'appnodes' : [
                        { 'url'  : 'ssh://root:password@rayvm/',
                          'ip'   : '192.168.56.129',
                        },
                    ],
                }
whitelist  = [
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-rescan'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('restartAndReset'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('dockResBindingCfg'),
              kd.tcases.helper.tch_util.TchUtil('sleep', 20),

              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_4x1_32k__1x2', [1], 'P_4x1_32k__1x1']),
              kd.tcases.io.tc_io_tile.TcIoTile(),
              #kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_4x1_32k', [1], 'P_4x1_32k']),
              #kd.tcases.io.tc_io_tile.TcIoTile(),
              #kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_1']),
              #kd.tcases.tc_set.tcs_simple.TcsSimple('restart'),
              #kd.tcases.io.tc_io_tile.TcIoTile( (3*4) ),
             ]

[test_suite_debug_tileSync]
desc          = 'debug: tkcd crash during tile sync operation [cube2 only]'
# {{{
dock.name     = myDock
git.co_skip   = True
bench         = {   'desc': ('cube2 server: 24 Xeon 2.67GHz CPU, 47+ G Mem, 5 * Samsung 1T ssd',
                             '3 DockNodes at 3 VM, each VM has 4 Core, 8G Mem, and 10 128 G ssd',
                             '1 AppHost at 1 VM, VM has 4 Core, 8G Mem',
                            ),
                    'resource' : {
                        'tk-res': [None, None, 1, '2-3'],
                    },
                    'docknodes' : [
                        {
                            'url'  : 'ssh://root:kodiak@kodiak-cube2-vm1/',
                            'ip'   : '192.168.1.11',
                            'nodes': ( ['all'] )
                        },
                        {
                            'url'  : 'ssh://root:kodiak@kodiak-cube2-vm2/',
                            'ip'   : '192.168.1.12',
                            'nodes': ( [None] )
                        },
                        {
                            'url'  : 'ssh://root:kodiak@kodiak-cube2-vm3/',
                            'ip'   : '192.168.1.13',
                            'nodes': ( [None] )
                        },
                    ],
                    'appnodes': [
                        {
                            'url' : 'ssh://root:kodiak@kodiak-cube2-vm1/',
                            'ip'  : '192.168.1.11',
                        },
                        {
                            'url' : 'ssh://root:kodiak@kodiak-cube2-vm2/',
                            'ip'  : '192.168.1.12',
                        },
                        {
                            'url' : 'ssh://root:kodiak@kodiak-cube2-vm3/',
                            'ip'  : '192.168.1.13',
                        },
                    ],
                    'windows': {
                        'url' : 'ssh://Administrator:4kodiak!@kd-cube2-w2008/',
                        'ip'  : '192.168.1.19',
                    },
                    'builder': {
                        'url'  : 'ssh://root:kodiak@kodiak-cube2-utest/gitwork/KodiakContainer',
                        'ip'  : '192.168.1.18',
                    },
                }
whitelist     = [
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-max', 1),
              #kd.tcases.tc_set.tcs_simple.TcsSimple('buildAndInstall'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('restartAndReset'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('dockResBindingCfg'),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_1', [1] * 1], [0]),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_2', [2] * 1], [1]),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_3', [3] * 1], [2]),
              kd.tcases.io.tc_io_tile.TcIoTile( 6 ),
              kd.tcases.helper.tch_dhost.TchDhost('stop', [1]),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_2']),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_2', [2] * 1], [1]),
              #kd.tcases.helper.tch_pause.TchPause('enter_and_continue', 'attach gdb before starting kodiak engine at vm2'),
              kd.tcases.helper.tch_dhost.TchDhost('start',[1]),
             ]
# }}}

[test_suite_debug_bind]
desc          = 'Debug issues'
test_suite    = setup_default
npm.opt       = KDTK_OPT="--device_over_size 1024"
whitelist     = [ kd.tcases.tkcd.tct_tile.TctTile([ [1, 1] ] ), ]

[test_suite_debug_4_1_32k_io]
desc          = 'Debug issues'
test_suite    = setup_default
whitelist  = [
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-rescan'),
              #kd.tcases.tc_set.tcs_simple.TcsSimple('buildAndInstall'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('restartAndReset'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('dockResBindingCfg'),
# test dock
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_2', [20] * 8, '4+1_32k']),
              kd.tcases.io.tc_io_tile.TcIoTile( ),

# read/write/readwrite:70/randread/randwrite/randrw:70
              kd.tcases.io.tc_fio.TcFio( runSpec='write',                        txSzs=[512*1024]),
              kd.tcases.io.tc_fio.TcFio( runSpec='verify',                       txSzs=[512*1024]),
              kd.tcases.io.tc_fio.TcFio( runSpec='randwrite',  runTime=[0,10,0], txSzs=['64k-1024k']),
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-del', 2),
              #kd.tcases.helper.tch_util.TchUtil('sleep', 60),
              kd.tcases.io.tc_fio.TcFio( runSpec='verify',                       txSzs=[1024*1024]),
             ]

[test_suite_debug_4_1_32k_disk_op]
desc          = 'Debug issues'
test_suite    = setup_default
whitelist  = [
              kd.tcases.helper.tch_util.TchUtil('sleep', 10*60),
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-del', 2),
              #kd.tcases.helper.tch_util.TchUtil('sleep', 25*60),
              #kd.tcases.helper.tch_dhost.TchDhost('rdisk-rescan'),
              #kd.tcases.helper.tch_util.TchUtil('sleep', 25*60),
              #kd.tcases.helper.tch_dhost.TchDhost('rdisk-del', 3),
              #kd.tcases.helper.tch_util.TchUtil('sleep', 25*60),
              #kd.tcases.helper.tch_dhost.TchDhost('rdisk-rescan'),
             ]

[test_suite_debug_del_ctnr]
desc          = 'Debug delete container'
test_suite    = setup_default
whitelist  = [ kd.tcases.tc_set.tcs_del_ctnr.TcsDelCtnr(), ]

[test_suite_debug_packer_redock]
desc          = 'Debug issues'
test_suite    = setup_default
#bench.resource.tk-res = [16, 64, 1, None, 2]
whitelist  = [
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_unpack_4x1_32k_2']),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_unpack_4x1_32k_2', [4], 'P_4x1_32k']),
             ]

[test_suite_debug_packer_verify]
desc          = 'Debug issues'
test_suite    = setup_default
#bench.resource.tk-res = [16, 64, 1, None, 2]
bench.tkcd.checkData = False
whitelist  = [
              #kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_unpack']),
              #kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_unpack', [1]]),
              #kd.tcases.io.tc_io_tile.TcIoTile(),
              #kd.tcases.io.tc_io.TcIo('all-tile-verify'),

              kd.tcases.tkcd.tct_io.TctIo(None, ['read-print-pattern', 1, 8*1024, 0, 1 << 30, 4 << 30, None] ),
              kd.tcases.tkcd.tct_io.TctIo(None, ['read-print-pattern', 1, 8*1024, (1 << 30) - (8*1024), 1 << 30, 4 << 30, None] ),

              kd.tcases.tkcd.tct_io.TctIo(None, ['read-print-pattern', 2, 8*1024, 0, 1 << 30, 4 << 30, None, 'P_4x1_32k'] ),
              kd.tcases.tkcd.tct_io.TctIo(None, ['read-print-pattern', 2, 8*1024, (1 << 30) - (8*1024), 1 << 30, 4 << 30, None, 'P_4x1_32k'] ),

              kd.tcases.tkcd.tct_io.TctIo(None, ['read-print-pattern', 3, 8*1024, 0, 1 << 30, 4 << 30, None] ),
              kd.tcases.tkcd.tct_io.TctIo(None, ['read-print-pattern', 3, 8*1024, (1 << 30) - (8*1024), 1 << 30, 4 << 30, None] ),

              kd.tcases.tkcd.tct_io.TctIo(None, ['read-print-pattern', 4, 8*1024, 0, 1 << 30, 4 << 30, None, 'P_4x1_32k'] ),
              kd.tcases.tkcd.tct_io.TctIo(None, ['read-print-pattern', 4, 8*1024, (1 << 30) - (8*1024), 1 << 30, 4 << 30, None, 'P_4x1_32k'] ),

              kd.tcases.tkcd.tct_io.TctIo(None, ['read-print-pattern', 5, 8*1024, 0, 1 << 30, 4 << 30, None] ),
              kd.tcases.tkcd.tct_io.TctIo(None, ['read-print-pattern', 5, 8*1024, (1 << 30) - (8*1024), 1 << 30, 4 << 30, None] ),

              kd.tcases.tkcd.tct_io.TctIo(None, ['read-print-pattern', 6, 8*1024, 0, 1 << 30, 4 << 30, None, 'P_4x1_32k'] ),
              kd.tcases.tkcd.tct_io.TctIo(None, ['read-print-pattern', 6, 8*1024, (1 << 30) - (8*1024), 1 << 30, 4 << 30, None, 'P_4x1_32k'] ),
             ]

[test_suite_debug_packer]
desc          = 'Debug issues'
test_suite    = setup_default
#bench.resource.tk-res = [16, 64, 1, None, 2]
whitelist  = [
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-max', 5),
              kd.tcases.tc_set.tcs_simple.TcsSimple('restartAndReset'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('dockResBindingCfg'),
              #kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_pack', [1]]),
              #kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_unpack', [1]]),

              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_pack', [4] ]),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_pack_4x1_32k', [4] , 'P_4x1_32k']),
              kd.tcases.io.tc_io_dd.TcIoDd('border-write'),
              #kd.tcases.helper.tch_dhost.TchDhost('vdisk-format-xfs', '-b size=4k -s size=4k'),
              #kd.tcases.io.tc_io_tile.TcIoTile(),
              #kd.tcases.io.tc_fio.TcFio( runSpec='write', txSzs=[512*1024], osio=1, diskSz=4),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_unpack', [4] ]),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_unpack_4x1_32k', [4], 'P_4x1_32k']),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_unpack_2', [4] ]),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_unpack_4x1_32k_2', [4], 'P_4x1_32k']),
              #kd.tcases.io.tc_io_tile.TcIoTile(),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_pkTest', [4] * 3]),

              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_wrongCnt',  [4, 4]]),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_wrongSize', [3]]),
              # kd.tcases.helper.tch_dhost.TchDhost('vdisk-format-xfs', '-b size=4k -s size=4k'),
             ]

[test_suite_debug_packer_vm1_test]
desc          = 'Debug issues'
include_test_bench = kodiak-cube2-vm1
whitelist  = [
              #kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_pack']),
              #kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_unpack']),
              #kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_pack_4x1_32k']),
              #kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_pack', [1]]),
              #kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_unpack', [1]]),
              #kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_pack_4x1_32k', [4] * 3, 'P_4x1_32k']),
              kd.tcases.helper.tch_dhost.TchDhost('vdisk-mount-xfs'),
             ]

[test_suite_debug_packer_vm1]
desc          = 'Debug issues'
include_test_bench = kodiak-cube2-vm1
whitelist  = [
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-max', 5),
              kd.tcases.tc_set.tcs_simple.TcsSimple('restartAndReset'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('dockResBindingCfg'),
              #kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_backup', [1]]),
              #kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_pack_4x1_32k', [4], 'P_4x1_32k']),

              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_pack', [4] * 3]),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_pack_4x1_32k', [4] * 3, 'P_4x1_32k']),
              kd.tcases.helper.tch_dhost.TchDhost('vdisk-format-xfs', '-b size=4k -s size=4k'),
              kd.tcases.helper.tch_dhost.TchDhost('vdisk-mount-xfs'),
              #kd.tcases.io.tc_io_tile.TcIoTile(),
              #kd.tcases.io.tc_fio.TcFio( runSpec='write', txSzs=[512*1024], osio=8),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_wrongCnt',  [4] * 4]),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_wrongSize', [4, 4, 1]]),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_unpack', [4] * 3]),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_unpack_4x1_32k', [4] * 3, 'P_4x1_32k']),
              #kd.tcases.io.tc_io_tile.TcIoTile(),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_pkTest', [4] * 3]),
              #kd.tcases.helper.tch_dhost.TchDhost('vdisk-format-xfs', '-b size=4k -s size=4k'),
              #kd.tcases.helper.tch_dhost.TchDhost('vdisk-mount-xfs'),
             ]

[test_suite_debug_packer_vm2_test]
desc          = 'Debug issues'
include_test_bench = kodiak-cube2-vm2
whitelist  = [
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_unpack']),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_unpack', [4] * 3]),
              #kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_unpack_4x1_32k', [4], 'P_4x1_32k']),
             ]

[test_suite_debug_packer_vm2]
desc          = 'Debug issues'
include_test_bench = kodiak-cube2-vm2
whitelist  = [
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-max', 5),
              kd.tcases.tc_set.tcs_simple.TcsSimple('restartAndReset'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('dockResBindingCfg'),

              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_pack', [4] * 3]),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_pack_4x1_32k', [4] * 3, 'P_4x1_32k']),
              kd.tcases.helper.tch_dhost.TchDhost('vdisk-format-xfs', '-b size=4k -s size=4k'),
              #kd.tcases.io.tc_io_tile.TcIoTile(),
              #kd.tcases.io.tc_fio.TcFio( runSpec='write', txSzs=[512*1024], osio=1, diskSz=4),
              #kd.tcases.helper.tch_dhost.TchDhost('vdisk-format-xfs', '-b size=4k -s size=4k'),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_wrongCnt',  [4] * 4]),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_wrongSize', [4, 4, 1]]),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_unpack', [4] * 3]),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_unpack_4x1_32k', [4] * 3, 'P_4x1_32k']),
              #kd.tcases.io.tc_io_tile.TcIoTile(),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_pkTest', [4] * 3]),
             ]
[test_suite_debug_packer_vm3_mount]
desc          = 'Debug issues'
include_test_bench = kodiak-cube2-vm3
whitelist  = [
              #kd.tcases.helper.tch_dhost.TchDhost('vdisk-mount-xfs'),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_unpack_2', [4]]),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_unpack_4x1_32k_2', [4], 'P_4x1_32k']),
             ]
[test_suite_debug_packer_vm3]
desc          = 'Debug issues'
include_test_bench = kodiak-cube2-vm3
whitelist  = [
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-max', 5),
              kd.tcases.tc_set.tcs_simple.TcsSimple('restartAndReset'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('dockResBindingCfg'),

              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['vm3_Ctnr_pack', [4] * 3]),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['vm3_Ctnr_pack_4x1_32k', [4] * 3, 'P_4x1_32k']),
              #kd.tcases.helper.tch_dhost.TchDhost('vdisk-format-xfs', '-b size=4k -s size=4k'),
              #kd.tcases.io.tc_io_tile.TcIoTile(),
              kd.tcases.io.tc_fio.TcFio( runSpec='write', txSzs=[512*1024], osio=1),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['vm3_Ctnr_wrongCnt',  [4] * 4]),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['vm3_Ctnr_wrongSize', [4, 4, 1]]),

              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['vm3_Ctnr_unpack', [4] * 3]),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['vm3_Ctnr_unpack_4x1_32k', [4] * 3, 'P_4x1_32k']),
              #kd.tcases.io.tc_io_tile.TcIoTile(),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['vm3_Ctnr_pkTest', [4] * 3]),
             ]

[test_suite_debug_protection]
desc          = 'Debug 4+1_32K'
test_suite    = setup_default
io.iometer_skip = True
whitelist  = [
              kd.tcases.helper.tch_dhost.TchDhost('vdisk-umount'),
              #kd.tcases.helper.tch_dhost.TchDhost('rdisk-rescan'),
              #kd.tcases.tc_set.tcs_simple.TcsSimple('buildAndInstall'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('restartAndReset'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('dockResBindingCfg'),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_1', [4] * 2]),
              kd.tcases.io.tc_io_tile.TcIoTile( ),
              #kd.tcases.helper.tch_dhost.TchDhost('vdisk-format-xfs', '-b size=4k -s size=4k'),
              #kd.tcases.helper.tch_dhost.TchDhost('vdisk-mount-xfs'),
              kd.tcases.io.tc_fio.TcFio( runSpec='randwrite', runTime=[0,1,0], txSzs=[16*1024], osio=8),
             ]

[test_suite_rebuild_tiny_2]
desc          = 'Rebuild tiny setup'
test_suite    = setup_default
whitelist  = [
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-max', 6),
              kd.tcases.tc_set.tcs_simple.TcsSimple('restartAndReset'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('dockResBindingCfg'),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_2', [4] * 8, '4+1_32k']),
              kd.tcases.io.tc_io_tile.TcIoTile,
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-max', 5),
              #kd.tcases.helper.tch_pause.TchPause('enter_and_continue', 'wait data rebuild'),
              #kd.tcases.helper.tch_dhost.TchDhost('rdisk-max', 4),

              #kd.tcases.helper.tch_dhost.TchDhost('stop'),
              #kd.tcases.helper.tch_dhost.TchDhost('umount'),
              #kd.tcases.helper.tch_dhost.TchDhost('rdisk-max', 7),
              #kd.tcases.helper.tch_dhost.TchDhost('start'),
             ]
#
[test_suite_secure_erase]
desc          = 'Rescan all pDISKs'
test_suite    = setup_default
whitelist  = [ kd.tcases.helper.tch_dhost.TchDhost('secure-erase'), ]

[test_suite_dev_err_io]
desc          = 'VDisk Performance'
test_suite    = setup_default
whitelist     = [
              kd.tcases.tc_set.tcs_simple.TcsSimple('buildAndInstall'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('restartAndReset'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('dockResBindingCfg'),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_1', [4] * 8]),
              kd.tcases.nomad.tc_nomad_ltnc.TcNomadLtnc,
              kd.tcases.io.tc_io_iometer.TcIoIometer('Initial Sequential Write', (  0,   0), [0, 3, 0], [256 * 1024]),
              kd.tcases.tkcd.tct_device.TctDevice('err-io', 4),
              kd.tcases.io.tc_io_iometer.TcIoIometer('Random 256K Read', (100,100), [0, 0,20], [256 * 1024]),
             ]

[test_suite_dev_err_io2]
desc          = 'VDisk Performance'
test_suite    = setup_default
whitelist     = [
              kd.tcases.tc_set.tcs_simple.TcsSimple('restart'),
              kd.tcases.tkcd.tct_device.TctDevice('err-io', 4),
              kd.tcases.io.tc_io_iometer.TcIoIometer('Random 256K Read', (100,100), [0, 0,50], [256 * 1024]),
             ]

[test_suite_daily]
desc          = 'Verify the basic functionality'
test_suite    = setup_default
whitelist  = [
              kd.tcases.helper.tch_dhost.TchDhost('stop'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('buildAndInstall'),
              kd.tcases.tc_set.tcs_ctnr_max.TcsCtnrMax(),
              #kd.tcases.tc_set.tcs_simple.TcsSimple('restartAndReset'),
              #kd.tcases.tc_set.tcs_simple.TcsSimple('dockResBindingCfg'),
              #kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_1', [40] * 8]),
              #kd.tcases.tc_set.tcs_simple.TcsSimple('perf'),
             ]

[test_suite_daily_brief]
desc          = 'Briefly verify the basic functionality'
test_suite    = setup_default
whitelist  = [
              kd.tcases.tc_set.tcs_simple.TcsSimple('buildAndInstall'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('restartAndReset'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('perf_brief'),
             ]

# Begin of rebuild test suite
#  rebuild, rebuild_small, rebuild_tiny
# {{{
[test_suite_rebuild]
desc          = 'Rebuild on 8 * 400 GB vdisk testbench'
test_suite    = setup_default
whitelist     = [
              kd.tcases.tc_set.tcs_simple.TcsSimple('buildAndInstall'),
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-rescan'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('restartAndReset'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('dockResBindingCfg'),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_1', [400] * 8, '4+1_32k']),
              kd.tcases.io.tc_io_tile.TcIoTile,
              kd.tcases.io.tc_io_iometer.TcIoIometer('Initial Sequential Write', (  0,   0), [5, 0, 0], [256 * 1024]),
              kd.tcases.io.tc_io_iometer.TcIoIometer('Random 256K r50/w50', ( 50,100), [0,10, 0], [256 * 1024]),
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-del', 3),
              kd.tcases.io.tc_io_iometer.TcIoIometer('Random 256K r50/w50', ( 50,100), [0,10, 0], [256 * 1024]),
              kd.tcases.io.tc_io_iometer.TcIoIometer('Random 256K r50/w50', ( 50,100), [0,10, 0], [256 * 1024]),
              kd.tcases.io.tc_io_iometer.TcIoIometer('Random 256K r50/w50', ( 50,100), [2,40, 0], [256 * 1024]),
              kd.tcases.helper.tch_dhost.TchDhost('rebuild-status', None, 'Get Rebuild with IO Result'),
              kd.tcases.io.tc_io_iometer.TcIoIometer('Random 256K r50/w50', ( 50,100), [0,10, 0], [256 * 1024]),
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-del', 4),
              kd.tcases.helper.tch_util.TchUtil('sleep', 3600 * 3),
              kd.tcases.helper.tch_dhost.TchDhost('rebuild-status', None, 'Get Rebuild without IO Result'),
              kd.tcases.io.tc_io_iometer.TcIoIometer('Random 256K r50/w50', ( 50,100), [0,10, 0], [256 * 1024]),
              kd.tcases.tc_set.tcs_simple.TcsSimple('restart'),
              kd.tcases.io.tc_io_iometer.TcIoIometer('Random 256K r50/w50', ( 50,100), [0,10, 0], [256 * 1024]),
             ]

[test_suite_rebuild_small]
desc          = 'Rebuild on 8 * 10 GB vdisk testbench'
test_suite    = setup_default
whitelist     = [
              #kd.tcases.tc_set.tcs_simple.TcsSimple('buildAndInstall'),
              kd.tcases.helper.tch_prompt.TchPrompt('enter_and_continue', \
                        { ':: _phase_ ::': [ { '<< initial setup >>': \
                                        ['rescan data disk',
                                         'reset and restart kodiak engine',
                                         'dock resource, host_binding, and config',
                                         'stage/dock 8 4+1_32k vdisks',
                                         'initial sequential write via dd and iometer', ''] },
                                     { 'remove device with IO and trigger rebuild': [] },
                                     { 'insert the device with IO': [] },
                                     { 'use the new device': [] },
                                   ],
                        }),
              #kd.tcases.helper.tch_dhost.TchDhost('rdisk-rescan'),
              #kd.tcases.tc_set.tcs_simple.TcsSimple('restartAndReset'),
              #kd.tcases.tc_set.tcs_simple.TcsSimple('dockResBindingCfg'),
              #kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_1', [8] * 8, '4+1_32k']),
              #kd.tcases.io.tc_io_tile.TcIoTile,
              #kd.tcases.io.tc_io_iometer.TcIoIometer('Initial Sequential Write', (  0,   0), [0,5,0], [256 * 1024]),
              #kd.tcases.io.tc_io_iometer.TcIoIometer('Random 256K r50/w50', ( 50,100), [0, 0, 20], [256 * 1024]),
              kd.tcases.helper.tch_prompt.TchPrompt('enter_and_continue', \
                        {
                          ':: _phase_ ::': [ { 'initial setup': \
                                        ['rescan data disk',
                                         'reset and restart kodiak engine',
                                         'dock resource, host_binding, and config',
                                         'stage/dock 8 4+1_32k 8G vdisks',
                                         'initial sequential write via dd and iometer', ''] },
                                     { '<< remove device with IO and trigger rebuild >>': \
                                        ['remove data disk 4:0:3:0 to triger data rebuild',
                                         'start io-meter random 256K r50/w50',
                                         'check the rebuild status'] },
                                     { 'insert the device with IO': [] },
                                     { 'use the new device': [] },
                                   ],
                          ':: result ::': \
                                [ 'check the data disk, lsscsi',
                                  'dock config file view-source:http://kodiak-dev3:3000/kodiak/api/dockhost/dockconfig',
                                  'container file view-source:http://kodiak-dev3:15001/kodiak/api/data_container/1',
                                  'tile bind count 8 vdisk * 8 GB * (5/4 ratio) = 80, view-source:http://kodiak-dev3:15001/kodiak/api/resources/tiles', '' ],
                        }),
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-del', 3),
              kd.tcases.io.tc_io_iometer.TcIoIometer('Random 256K r50/w50', ( 50,100), [0, 0, 30], [256 * 1024]),
              kd.tcases.io.tc_io_iometer.TcIoIometer('Random 256K r50/w50', ( 50,100), [0, 1, 30], [256 * 1024]),
              kd.tcases.helper.tch_dhost.TchDhost('rebuild-status', None, 'Get Rebuild with IO Result'),
              kd.tcases.io.tc_io_iometer.TcIoIometer('Random 256K r50/w50', ( 50,100), [0, 0, 30], [256 * 1024]),
              kd.tcases.helper.tch_prompt.TchPrompt('enter_and_continue', \
                        {
                          ':: _phase_ ::': [ { 'initial setup': [] }, \
                                     { 'remove device with IO and trigger rebuild': \
                                        ['remove data disk 4:0:3:0 to triger data rebuild',
                                         'start io-meter random 256K r50/w50',
                                         'check the rebuild status'] },
                                     { '<< insert the device with IO >>': \
                                        ['rescan data disk', 'start io-meter random 256K r50/w50'] },
                                     { 'use the new device': [] },
                                   ],
                          ':: result ::': \
                                [ 'check the data disk, lsscsi',
                                ]
                        }),
              kd.tcases.helper.tch_dhost.TchDhost('umount', '/kodiak/dock/myDock/docknode/1/mnt/3'),
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-rescan'),
              kd.tcases.io.tc_io_iometer.TcIoIometer('Random 256K r50/w50', ( 50,100), [0, 0, 30], [256 * 1024]),
              kd.tcases.helper.tch_prompt.TchPrompt('enter_and_continue', \
                        {
                          ':: _phase_ ::': [ { 'initial setup': [] }, \
                                     { 'remove device with IO and trigger rebuild': [] }, \
                                     { 'insert the device with IO': \
                                        ['rescan data disk', 'start io-meter random 256K r50/w50'] },
                                     { '<< use the new device >>': \
                                       ['stage/dock 4 4+1_32k 24G vdisks'] },
                                   ],
                          ':: result ::': \
                                [ 'check io stat, iostat -x 1',
                                  '']
                        }),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_3', [24] * 4, '4+1_32k']),
              kd.tcases.io.tc_io_tile.TcIoTile,
              kd.tcases.io.tc_io_iometer.TcIoIometer('Random 256K r50/w50', ( 50,100), [0, 0, 30], [256 * 1024]),

              #kd.tcases.helper.tch_dhost.TchDhost('rdisk-del', 4),
              #kd.tcases.helper.tch_util.TchUtil('sleep', 180),
              #kd.tcases.helper.tch_dhost.TchDhost('rebuild-status'),
              #kd.tcases.io.tc_io_iometer.TcIoIometer('Random 256K r50/w50', ( 50,100), [0, 1, 0], [256 * 1024]),
              #kd.tcases.tc_set.tcs_simple.TcsSimple('restart'),
              #kd.tcases.io.tc_io_iometer.TcIoIometer('Random 256K r50/w50', ( 50,100), [0, 1, 0], [256 * 1024]),
             ]

[test_suite_rebuild_tiny]
desc          = 'Rebuild for small VM testbench'
test_suite    = setup_default
whitelist     = [
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-max', 8),
              kd.tcases.tc_set.tcs_simple.TcsSimple('restartAndReset'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('dockResBindingCfg'),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_1', [8] * 4, '4+1_32k']),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_2', [8] * 4]),
              kd.tcases.io.tc_io_tile.TcIoTile,
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-del', 4),
              #kd.tcases.io.tc_io_tile.TcIoTile,
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),
              kd.tcases.helper.tch_dhost.TchDhost('rebuild-status'),
              kd.tcases.helper.tch_pause.TchPause('enter_and_continue', 'first rebuild is done'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('restart'),
              kd.tcases.helper.tch_pause.TchPause('enter_and_continue', 'After restart'),

              kd.tcases.helper.tch_util.TchUtil('shell', ['umount', '/kodiak/dock/myDock/docknode/1/mnt/4']),
              kd.tcases.helper.tch_util.TchUtil('shell', ['rm',  '-rf', '/kodiak/dock/myDock/docknode/1/mnt/4']),
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-rescan'),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_3', [8] * 4, '4+1_32k']),
              kd.tcases.io.tc_io_tile.TcIoTile,
              #kd.tcases.helper.tch_dhost.TchDhost('rdisk-del', 3),
              #kd.tcases.helper.tch_util.TchUtil('sleep', 300),
              #kd.tcases.tc_set.tcs_simple.TcsSimple('restart'),
              #kd.tcases.io.tc_io_tile.TcIoTile,
             ]
# }}}

[test_suite_perf_no_protection]
desc          = 'VDisk Performance'
test_suite    = setup_default
whitelist     = [
              #kd.tcases.tc_set.tcs_simple.TcsSimple('buildAndInstall'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('restartAndReset'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('dockResBindingCfg'),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_1', [40] * 8]),
              kd.tcases.nomad.tc_nomad_ltnc.TcNomadLtnc,
              kd.tcases.io.tc_io_iometer.TcIoIometer('Initial Sequential Write', (  0,   0), [0,30, 0], [256 * 1024]),
              kd.tcases.tc_set.tcs_simple.TcsSimple('perf'),
             ]

[test_suite_perf_mix]
desc          = 'VDisk Performance'
test_suite    = setup_default
whitelist     = [
              #kd.tcases.tc_set.tcs_simple.TcsSimple('buildAndInstall'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('restartAndReset'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('dockResBindingCfg'),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_1', [40] * 4]),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_2', [40] * 4, '4+1_32k']),
              kd.tcases.nomad.tc_nomad_ltnc.TcNomadLtnc,
              kd.tcases.io.tc_io_iometer.TcIoIometer('Initial Sequential Write', (  0,   0), [0,30, 0], [256 * 1024]),
              kd.tcases.tc_set.tcs_simple.TcsSimple('perf'),
             ]

[test_suite_perf]
desc          = 'VDisk Performance'
test_suite    = setup_default
whitelist     = [
              #kd.tcases.tc_set.tcs_simple.TcsSimple('buildAndInstall'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('restartAndReset'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('dockResBindingCfg'),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_1', [40] * 8, '4+1_32k']),
              kd.tcases.nomad.tc_nomad_ltnc.TcNomadLtnc,
              kd.tcases.io.tc_io_iometer.TcIoIometer('Initial Sequential Write', (  0,   0), [0,30, 0], [256 * 1024]),
              kd.tcases.tc_set.tcs_simple.TcsSimple('perf'),
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-del', 4),
              kd.tcases.io.tc_io_iometer.TcIoIometer('Random 256K r50/w50', ( 50,100), [0, 10, 0], [256 * 1024]),
             ]

[test_suite_perf_dev_error]
desc          = 'VDisk Performance'
test_suite    = setup_default
whitelist     = [
              #kd.tcases.tc_set.tcs_simple.TcsSimple('buildAndInstall'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('restartAndReset'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('dockResBindingCfg'),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_1', [40] * 8]),
              kd.tcases.nomad.tc_nomad_ltnc.TcNomadLtnc,
              kd.tcases.io.tc_io_iometer.TcIoIometer('Initial Sequential Write', (  0,   0), [0,30, 0], [256 * 1024]),
              kd.tcases.tkcd.tct_device.TctDevice('err', 1),
              kd.tcases.tc_set.tcs_simple.TcsSimple('perf'),
             ]

[test_suite_perf_rewrite]
desc          = 'VDisk Performance'
test_suite    = setup_default
whitelist     = [
              #kd.tcases.tc_set.tcs_simple.TcsSimple('buildAndInstall'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('restartAndReset'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('dockResBindingCfg'),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_1', [40] * 8]),
              kd.tcases.io.tc_io_iometer.TcIoIometer('1st Iometer Sequential Write', (  0,   0), [0,10, 0], [256 * 1024]),
              kd.tcases.io.tc_io_iometer.TcIoIometer('2nd Iometer Sequential Write', (  0,   0), [0,10, 0], [256 * 1024]),
              kd.tcases.io.tc_io_iometer.TcIoIometer('3rd Iometer Sequential Write', (  0,   0), [0,10, 0], [256 * 1024]),
              kd.tcases.io.tc_io_iometer.TcIoIometer('4th Iometer Sequential Write', (  0,   0), [0,10, 0], [256 * 1024]),
              kd.tcases.io.tc_io_iometer.TcIoIometer('5th Iometer Sequential Write', (  0,   0), [0,10, 0], [256 * 1024]),
              kd.tcases.io.tc_io_iometer.TcIoIometer('6th Iometer Sequential Write', (  0,   0), [0,10, 0], [256 * 1024]),
              kd.tcases.io.tc_io_iometer.TcIoIometer('7th Iometer Sequential Write', (  0,   0), [0,10, 0], [256 * 1024]),
              kd.tcases.io.tc_io_iometer.TcIoIometer('8th Iometer Sequential Write', (  0,   0), [0,10, 0], [256 * 1024]),
              kd.tcases.io.tc_io_iometer.TcIoIometer('9th Iometer Sequential Write', (  0,   0), [0,10, 0], [256 * 1024]),
              kd.tcases.io.tc_io_iometer.TcIoIometer('10th Iometer Sequential Write', (  0,   0), [0,10, 0], [256 * 1024]),
             ]

[test_suite_dev_error_perf2]
desc          = 'VDisk Performance'
test_suite    = setup_default
whitelist     = [
              kd.tcases.nomad.tc_nomad_ltnc.TcNomadLtnc,
             ]

[test_suite_perf_current]
desc          = 'VDisk Performance current'
test_suite    = setup_default
whitelist     = [
              # kd.tcases.tc_set.tcs_simple.TcsSimple('buildAndInstall'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('restartAndReset'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('dockResBindingCfg'),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_1', [1] * 1]),
# Test the latency based on the 4K, 64K and 1M IO only
              kd.tcases.nomad.tc_nomad_ltnc.TcNomadLtnc('Measure the IO latency via dd', [4 * 1024, 64*1024, 1024 * 1024], 10 * 1024 * 1024),
              kd.tcases.tkcd.tct_gdb.TctGdb(),
              kd.tcases.io.tc_io_tile.TcIoTile,
              kd.tcases.tkcd.tct_gdb.TctGdb(),
              #kd.tcases.tkcd.tct_gdb.TctGdb('set kdLogLevel=7'),
              kd.tcases.io.tc_io_iometer.TcIoIometer('Iometer Sequential Write', (  0,   0), [0,0,1], [4 * 1024]),
              kd.tcases.tkcd.tct_gdb.TctGdb(),
             ]

[test_suite_perf_nvme2_prepare]
desc          = 'FIO direct IO, libaio'
include_test_bench = kodiak-nvme2
bench.resource.tk-res = [None, None, None, None, 1]
whitelist  = [ #kd.tcases.helper.tch_dhost.TchDhost('hello'),
               kd.tcases.helper.tch_dhost.TchDhost('stop'),
               kd.tcases.helper.tch_install.TchInstall('Install Kodiak software'),
             ]

[test_suite_perf_nvme2_base]
desc          = 'FIO direct IO, libaio'
include_test_bench = kodiak-nvme2
whitelist  = [#kd.tcases.helper.tch_dhost.TchDhost('stop'),
              #kd.tcases.helper.tch_install.TchInstall('Install Kodiak software'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('restartAndReset'),
              kd.tcases.dock.tc_dock_res.TcDockRes(nvme=True, sshTunnel=True),
              kd.tcases.dock.tc_dock_binding.TcDockBinding(sshTunnel=True),
              kd.tcases.dock.tc_dock_cfg.TcDockCfg(nvme=True, sshTunnel=True),
              kd.tcases.helper.tch_util.TchUtil('sleep', 120),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_1', [120]], sshTunnel=True),
              #kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_1', [120], '4+1_32k'], sshTunnel=True),
              kd.tcases.helper.tch_util.TchUtil('sleep', 120),
              kd.tcases.io.tc_io_tile.TcIoTile( 120, sshTunnel=True ),
              kd.tcases.io.tc_fio.TcFio( runSpec='read', runTime=[0,2,0], txSzs=[1024*1024]),
# write all disks
              kd.tcases.io.tc_fio.TcFio( runSpec='write', txSzs=[1024*1024], diskSz=100),
# Large IO
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),
              kd.tcases.io.tc_fio.TcFio( runSpec='write',    txSzs=[128 * 1024, 1024 * 1024], runTime=[0,2,0], osio=[ x for x in range(16, 257, 16) ]),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),
              kd.tcases.io.tc_fio.TcFio( runSpec='read',     txSzs=[128 * 1024, 1024 * 1024], runTime=[0,2,0], osio=[ x for x in range(16, 257, 16) ]),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),
              kd.tcases.io.tc_fio.TcFio( runSpec='randwrite',txSzs=[128 * 1024, 1024 * 1024], runTime=[0,2,0], osio=[ x for x in range(16, 257, 16) ]),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),
              kd.tcases.io.tc_fio.TcFio( runSpec='randread', txSzs=[128 * 1024, 1024 * 1024], runTime=[0,2,0], osio=[ x for x in range(16, 257, 16) ]),
# small IO
# osio: 96, check modkodiak recv buffer, cat /proc/net/tcp. The value of the rx_queue is very large
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),
              kd.tcases.io.tc_fio.TcFio( runSpec='write',    txSzs=[4096], runTime=[0,2,0], osio=[ x for x in range(32, 1025, 64) ]),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),
              kd.tcases.io.tc_fio.TcFio( runSpec='read',     txSzs=[4096], runTime=[0,2,0], osio=[ x for x in range(32, 1025, 64) ]),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),
              kd.tcases.io.tc_fio.TcFio( runSpec='randwrite',txSzs=[4096], runTime=[0,2,0], osio=[ x for x in range(32, 257, 32) ]),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),
              kd.tcases.io.tc_fio.TcFio( runSpec='randread', txSzs=[4096], runTime=[0,2,0], osio=[ x for x in range(32, 257, 32) ]),
             ]

[test_suite_perf_nvme2_data_connection_1__one_node__SEND_RECV_WQ]
test_suite    = perf_nvme2_base
desc          = 'run %(test_suite)s test suite'
bench.resource.tk-res = [None, None, None, None, 1]

[test_suite_perf_nvme2_data_connection_2__one_node__SSD_TUNING__CFQ]
test_suite    = perf_nvme2_base
desc          = 'run %(test_suite)s test suite'
bench.resource.tk-res = [None, None, None, None, 2]

[test_suite_perf_nvme2_data_connection_2__one_node__SSD_TUNING__NOOP]
test_suite    = perf_nvme2_base
desc          = 'run %(test_suite)s test suite'
bench.resource.tk-res = [None, None, None, None, 2]

[test_suite_perf_nvme2_data_connection_4__one_node__SEND_RECV_WQ]
test_suite    = perf_nvme2_base
desc          = 'run %(test_suite)s test suite'
bench.resource.tk-res = [None, None, None, None, 4]

[test_suite_perf_nvme2_3_nodes_base]
test_suite    = perf_nvme2_base
desc          = 'run %(test_suite)s test suite'
bench.placement   = ['rack', None],
bench.docknodes   = [ { 'url'  : 'ssh://root:go$kodiak!@kodiak-nvme21:2021/',
                        'ip'   : '10.12.0.21',
                        'nodes': ['all'] },
                       {'url'  : 'ssh://root:go$kodiak!@kodiak-nvme22:2022/',
                        'ip'   : '10.12.0.22',
                        'nodes': [None] },
                       {'url'  : 'ssh://root:go$kodiak!@kodiak-nvme23:2023/',
                        'ip'   : '10.12.0.23',
                        'nodes': [None]
                       } ]

[test_suite_perf_nvme2_data_connection_1__3_nodes__4x1_32k]
test_suite    = perf_nvme2_3_nodes_base
desc          = 'run %(test_suite)s test suite'
bench.resource.tk-res = [None, None, None, None, 1]

[test_suite_perf_nvme2_data_connection_2__3_nodes__4x1_32k]
test_suite    = perf_nvme2_3_nodes_base
desc          = 'run %(test_suite)s test suite'
bench.resource.tk-res = [None, None, None, None, 2]

[test_suite_perf_nvme2_data_connection_4__3_nodes__4x1_32k]
test_suite    = perf_nvme2_3_nodes_base
desc          = 'run %(test_suite)s test suite'
bench.resource.tk-res = [None, None, None, None, 4]

[test_suite_perf_nvme_samsung]
desc          = 'FIO direct IO, libaio'
include_test_bench = generic-hdp-ambari
email.toList  = ['ray@kodiakdata.com', 'hao@kodiakdata.com']
whitelist  = [
# write all disks
              kd.tcases.io.tc_fio.TcFio( runSpec=(0,100), runTime=[0,30,0], txSzs=[1024*1024] ),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),
# large IO
              kd.tcases.io.tc_fio.TcFio( runSpec='write', runTime=[0,2,0], txSzs=[1024*1024]),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),
              kd.tcases.io.tc_fio.TcFio( runSpec='read', runTime=[0,2,0], txSzs=[1024*1024]),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),
              kd.tcases.io.tc_fio.TcFio( runSpec=( 70,  0), runTime=[0,2,0], txSzs=[1024*1024]),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),
              kd.tcases.io.tc_fio.TcFio( runSpec='randwrite', runTime=[0,2,0], txSzs=[1024*1024]),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),
              kd.tcases.io.tc_fio.TcFio( runSpec='randread', runTime=[0,2,0], txSzs=[1024*1024]),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),
              kd.tcases.io.tc_fio.TcFio( runSpec='randrw:70', runTime=[0,2,0], txSzs=[1024*1024]),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),
# small IO
              kd.tcases.io.tc_fio.TcFio( runSpec='randwrite', runTime=[0,2,0], txSzs=[  4*1024], osio=32),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),
              kd.tcases.io.tc_fio.TcFio( runSpec='randread', runTime=[0,2,0], txSzs=[  4*1024], osio=128),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),
              kd.tcases.io.tc_fio.TcFio( runSpec='randrw:70', runTime=[0,2,0], txSzs=[  4*1024], osio=128),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),
             ]

[test_suite_perf_nvme_wd_raw]
desc          = 'FIO xfs on nvme, libaio'
include_test_bench = kodiak-r910-2
whitelist  = [
              #kd.tcases.helper.tch_dhost.TchDhost('umount'),
              kd.tcases.io.tc_fio.TcFio.allTestCases( vdisk=False, xfs=False, nvme=True, runTime=[0,1,0], diskCnt=1 ),
              kd.tcases.io.tc_fio.TcFio.allTestCases( vdisk=False, xfs=False, nvme=True, runTime=[0,1,0], diskCnt=2 ),
              kd.tcases.io.tc_fio.TcFio.allTestCases( vdisk=False, xfs=False, nvme=True, runTime=[0,1,0], diskCnt=3 ),
              kd.tcases.io.tc_fio.TcFio.allTestCases( vdisk=False, xfs=False, nvme=True, runTime=[0,1,0], diskCnt=4 ),
              kd.tcases.io.tc_fio.TcFio.allTestCases( vdisk=False, xfs=False, nvme=True, runTime=[0,1,0], diskCnt=5 ),
             ]

[test_suite_perf_nvme_wd_xfs]
desc          = 'FIO xfs on nvme, libaio'
include_test_bench = kodiak-r910-2
whitelist  = [
              kd.tcases.helper.tch_dhost.TchDhost('umount'),
              kd.tcases.helper.tch_dhost.TchDhost('nvme-format-xfs'),
              kd.tcases.helper.tch_dhost.TchDhost('nvme-mount'),
              kd.tcases.io.tc_fio.TcFio(vdisk=False, xfs=True, runSpec='write', txSzs=[128*1024], diskSz=400),
              kd.tcases.io.tc_fio.TcFio.allTestCases( vdisk=False, xfs=True, runTime=[0,1,0], diskSz=400, diskCnt=1 ),
              kd.tcases.io.tc_fio.TcFio.allTestCases( vdisk=False, xfs=True, runTime=[0,1,0], diskSz=400, diskCnt=2 ),
              kd.tcases.io.tc_fio.TcFio.allTestCases( vdisk=False, xfs=True, runTime=[0,1,0], diskSz=400, diskCnt=3 ),
              kd.tcases.io.tc_fio.TcFio.allTestCases( vdisk=False, xfs=True, runTime=[0,1,0], diskSz=400, diskCnt=4 ),
              kd.tcases.io.tc_fio.TcFio.allTestCases( vdisk=False, xfs=True, runTime=[0,1,0], diskSz=400, diskCnt=5 ),
              kd.tcases.helper.tch_dhost.TchDhost('umount'),
             ]

[test_suite_perf_nvme_wd_vdisk]
desc          = 'FIO vdisk on nvme, libaio'
include_test_bench = kodiak-r910-2
whitelist  = [
              kd.tcases.tc_set.tcs_simple.TcsSimple('restartAndReset'),
              kd.tcases.dock.tc_dock_res.TcDockRes(nvme=True),
              kd.tcases.dock.tc_dock_binding.TcDockBinding(),
              kd.tcases.dock.tc_dock_cfg.TcDockCfg(nvme=True),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_1', [100] * 8]),
              kd.tcases.helper.tch_util.TchUtil('sleep', 300),
# write all disks
              kd.tcases.io.tc_fio.TcFio( runSpec='write', txSzs=[1024*1024], diskSz=400),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),

              kd.tcases.io.tc_fio.TcFio.allTestCases( runTime=[0,1,0] ),
             ]


[test_suite_perf_nvme_intel_4_1_32k]
desc          = 'FIO direct IO, libaio'
include_test_bench = kodiak-nvme4
whitelist  = [
              #kd.tcases.tc_set.tcs_simple.TcsSimple('restart'),

              kd.tcases.tc_set.tcs_simple.TcsSimple('restartAndReset'),
              kd.tcases.dock.tc_dock_res.TcDockRes(nvme=True),
              kd.tcases.dock.tc_dock_binding.TcDockBinding(),
              kd.tcases.dock.tc_dock_cfg.TcDockCfg(nvme=True),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_2', [100] * 16, '4+1_32k']),
              kd.tcases.helper.tch_util.TchUtil('sleep', 300),
# write all disks
              kd.tcases.io.tc_fio.TcFio( runSpec='write', txSzs=[1024*1024], diskSz=100),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),
# randread
              kd.tcases.io.tc_fio.TcFio( runSpec='randread', txSzs=['256k-1024k'], runTime=[0,30,0], diskSz=100 ),
             ]

[test_suite_perf_nvme_intel_vdisk]
desc          = 'FIO direct IO, libaio'
include_test_bench = kodiak-nvme4
whitelist  = [
              #kd.tcases.tc_set.tcs_simple.TcsSimple('restart'),

              kd.tcases.tc_set.tcs_simple.TcsSimple('restartAndReset'),
              kd.tcases.dock.tc_dock_res.TcDockRes(nvme=True),
              kd.tcases.dock.tc_dock_binding.TcDockBinding(),
              kd.tcases.dock.tc_dock_cfg.TcDockCfg(nvme=True),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_1', [100] * 16]),
              kd.tcases.helper.tch_util.TchUtil('sleep', 300),
# write all disks
              kd.tcases.io.tc_fio.TcFio( runSpec='write', txSzs=[1024*1024], diskSz=100),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),

              kd.tcases.io.tc_fio.TcFio.allTestCases( runTime=[0,1,0], osio=2 ),
             ]

[test_suite_perf_nvme_intel_20vdisk]
desc          = 'FIO direct IO, libaio'
include_test_bench = kodiak-nvme4
whitelist  = [
              #kd.tcases.tc_set.tcs_simple.TcsSimple('restart'),

              kd.tcases.tc_set.tcs_simple.TcsSimple('restartAndReset'),
              kd.tcases.dock.tc_dock_res.TcDockRes(nvme=True, sshTunnel=True),
              kd.tcases.dock.tc_dock_binding.TcDockBinding(sshTunnel=True),
              kd.tcases.dock.tc_dock_cfg.TcDockCfg(nvme=True, sshTunnel=True),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_1', [50] * 20], sshTunnel=True),
              kd.tcases.helper.tch_util.TchUtil('sleep', 300),
# write all disks
              kd.tcases.io.tc_fio.TcFio( runSpec=(0,100), runTime=[0,30,0], txSzs=[1024*1024] ),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),
# large IO
              kd.tcases.io.tc_fio.TcFio( runSpec='write', runTime=[0,10,0], txSzs=[128*1024,1024*1024], osio=4),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),
              kd.tcases.io.tc_fio.TcFio( runSpec='read', runTime=[0,10,0], txSzs=[128*1024,1024*1024], osio=4),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),
              kd.tcases.io.tc_fio.TcFio( runSpec=( 70,  0), runTime=[0,10,0], txSzs=[128*1024,1024*1024], osio=4),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),
              kd.tcases.io.tc_fio.TcFio( runSpec='randwrite', runTime=[0,10,0], txSzs=[128*1024,1024*1024], osio=4),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),
              kd.tcases.io.tc_fio.TcFio( runSpec='randread', runTime=[0,10,0], txSzs=[128*1024,1024*1024], osio=4),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),
              kd.tcases.io.tc_fio.TcFio( runSpec='randrw:70', runTime=[0,10,0], txSzs=[128*1024,1024*1024], osio=4),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),
# small IO
              kd.tcases.io.tc_fio.TcFio( runSpec='randwrite', runTime=[0,10,0], txSzs=[  4*1024,  16*1024], osio=8),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),
              kd.tcases.io.tc_fio.TcFio( runSpec='randread', runTime=[0,10,0], txSzs=[  4*1024,  16*1024], osio=32),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),
              kd.tcases.io.tc_fio.TcFio( runSpec='randrw:70', runTime=[0,10,0], txSzs=[  4*1024,  16*1024], osio=32),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),
             ]

[test_suite_nvme4_install]
desc          = 'FIO direct IO, libaio'
include_test_bench = kodiak-nvme4
whitelist  = [ kd.tcases.helper.tch_dhost.TchDhost('stop'),
               kd.tcases.helper.tch_install.TchInstall('Install Kodiak software'),
              #kd.tcases.io.tc_fio.TcFio(vdisk=False, xfs=False, nvme=True, runSpec='randread', runTime=[0,1,0], txSzs=[  4*1024,  16*1024], osio=32, diskCnt=1),
             ]

[test_suite_nvme4_test]
desc          = 'Pack and unpacker'
include_test_bench = kodiak-nvme4
whitelist  = [
              kd.tcases.tc_set.tcs_simple.TcsSimple('restartAndReset'),
              #kd.tcases.dock.tc_dock_res.TcDockRes(nvme=True),
              #kd.tcases.dock.tc_dock_binding.TcDockBinding(),
              #kd.tcases.dock.tc_dock_cfg.TcDockCfg(nvme=True),
              #kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_pack', [1024] * 1]),
              #kd.tcases.io.tc_io_tile.TcIoTile(),
              #kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_PackRoot', [4096] * 1]),
              #kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_unpack', [1024] * 1]),
            ]


[test_suite_perf_nvme_intel_ext4_test]
desc          = 'FIO xfs on nvme, libaio'
include_test_bench = kodiak-nvme4
whitelist  = [
              kd.tcases.helper.tch_dhost.TchDhost('umount'),
              kd.tcases.helper.tch_dhost.TchDhost('nvme-format-ext4'),
              kd.tcases.helper.tch_dhost.TchDhost('nvme-mount'),
              kd.tcases.io.tc_fio.TcFio(vdisk=False, xfs=True, runSpec='write', txSzs=[128*1024], diskSz=100, diskCnt=1),

              kd.tcases.io.tc_fio.TcFio(vdisk=False, xfs=True, runSpec='read',txSzs=[ (1 << x) * 1024 for x in range(2, 11) ],runTime=[0,0,30], diskSz=100, diskCnt=1),

              #kd.tcases.io.tc_fio.TcFio(vdisk=False, xfs=True, runSpec='read',  txSzs=[128*1024], runTime=[0,0,30], diskSz=100, diskCnt=1),
              #kd.tcases.io.tc_fio.TcFio(vdisk=False, xfs=True, runSpec='read',  txSzs=[112*1024], runTime=[0,0,30], diskSz=100, diskCnt=1),
              #kd.tcases.io.tc_fio.TcFio(vdisk=False, xfs=True, runSpec='read',  txSzs=[ 96*1024], runTime=[0,0,30], diskSz=100, diskCnt=1),
              #kd.tcases.io.tc_fio.TcFio(vdisk=False, xfs=True, runSpec='read',  txSzs=[ 80*1024], runTime=[0,0,30], diskSz=100, diskCnt=1),
              #kd.tcases.io.tc_fio.TcFio(vdisk=False, xfs=True, runSpec='read',  txSzs=[ 64*1024], runTime=[0,0,30], diskSz=100, diskCnt=1),
             ]

[test_suite_perf_nvme_intel_xfs_test]
desc          = 'FIO xfs on nvme, libaio'
include_test_bench = kodiak-nvme4
whitelist  = [
              kd.tcases.helper.tch_dhost.TchDhost('umount'),
              kd.tcases.helper.tch_dhost.TchDhost('nvme-format-xfs'),
              kd.tcases.helper.tch_dhost.TchDhost('nvme-mount'),
              kd.tcases.io.tc_fio.TcFio(vdisk=False, xfs=True, runSpec='write', txSzs=[128*1024], diskSz=600, diskCnt=1),
              kd.tcases.io.tc_fio.TcFio.allTestCases( vdisk=False, xfs=True, runTime=[0,1,0], diskSz=600, diskCnt=1 ),

              #kd.tcases.io.tc_fio.TcFio(vdisk=False, xfs=True, runSpec='read',txSzs=[ (1 << x) * 1024 for x in range(2, 11) ],runTime=[0,0,30], diskSz=100, diskCnt=1),

              #kd.tcases.io.tc_fio.TcFio(vdisk=False, xfs=True, runSpec='read',  txSzs=[128*1024], runTime=[0,0,30], diskSz=100, diskCnt=1),
              #kd.tcases.io.tc_fio.TcFio(vdisk=False, xfs=True, runSpec='read',  txSzs=[112*1024], runTime=[0,0,30], diskSz=100, diskCnt=1),
              #kd.tcases.io.tc_fio.TcFio(vdisk=False, xfs=True, runSpec='read',  txSzs=[ 96*1024], runTime=[0,0,30], diskSz=100, diskCnt=1),
              #kd.tcases.io.tc_fio.TcFio(vdisk=False, xfs=True, runSpec='read',  txSzs=[ 80*1024], runTime=[0,0,30], diskSz=100, diskCnt=1),
              #kd.tcases.io.tc_fio.TcFio(vdisk=False, xfs=True, runSpec='read',  txSzs=[ 64*1024], runTime=[0,0,30], diskSz=100, diskCnt=1),
             ]

[test_suite_perf_nvme_intel_raw_test]
desc          = 'FIO xfs on nvme, libaio'
include_test_bench = kodiak-nvme4
whitelist  = [
              kd.tcases.helper.tch_dhost.TchDhost('umount'),
              kd.tcases.io.tc_fio.TcFio(vdisk=False, xfs=False, runSpec='read',  nvme=True, txSzs=[ (1 << x) * 1024 for x in range(2, 11) ], runTime=[0,0,30], diskSz=100, diskCnt=1, ioStat=5),
              #kd.tcases.io.tc_fio.TcFio(vdisk=False, xfs=False, runSpec='read',  nvme=True, txSzs=[128*1024], runTime=[0,0,30], diskSz=100, diskCnt=1),
              #kd.tcases.io.tc_fio.TcFio(vdisk=False, xfs=False, runSpec='read',  nvme=True, txSzs=[112*1024], runTime=[0,0,30], diskSz=100, diskCnt=1),
              #kd.tcases.io.tc_fio.TcFio(vdisk=False, xfs=False, runSpec='read',  nvme=True, txSzs=[ 96*1024], runTime=[0,0,30], diskSz=100, diskCnt=1),
              #kd.tcases.io.tc_fio.TcFio(vdisk=False, xfs=False, runSpec='read',  nvme=True, txSzs=[ 80*1024], runTime=[0,0,30], diskSz=100, diskCnt=1),
              #kd.tcases.io.tc_fio.TcFio(vdisk=False, xfs=False, runSpec='read',  nvme=True, txSzs=[ 64*1024], runTime=[0,0,30], diskSz=100, diskCnt=1),
             ]

[test_suite_perf_nvme_intel_xfs]
desc          = 'FIO xfs on nvme, libaio'
include_test_bench = kodiak-nvme4
whitelist  = [
              kd.tcases.helper.tch_dhost.TchDhost('umount'),
              kd.tcases.helper.tch_dhost.TchDhost('nvme-format-xfs'),
              kd.tcases.helper.tch_dhost.TchDhost('nvme-mount'),
              kd.tcases.io.tc_fio.TcFio(vdisk=False, xfs=True, runSpec='write', txSzs=[1024*1024], diskSz=600, diskCnt=5),

              kd.tcases.io.tc_fio.TcFio.allTestCases( vdisk=False, xfs=True, runTime=[0,1,0], diskSz=600, diskCnt=1 ),
              kd.tcases.io.tc_fio.TcFio.allTestCases( vdisk=False, xfs=True, runTime=[0,1,0], diskSz=600, diskCnt=2 ),
              kd.tcases.io.tc_fio.TcFio.allTestCases( vdisk=False, xfs=True, runTime=[0,1,0], diskSz=600, diskCnt=3 ),
              kd.tcases.io.tc_fio.TcFio.allTestCases( vdisk=False, xfs=True, runTime=[0,1,0], diskSz=600, diskCnt=4 ),
              kd.tcases.io.tc_fio.TcFio.allTestCases( vdisk=False, xfs=True, runTime=[0,1,0], diskSz=600, diskCnt=5 ),
             ]

[test_suite_perf_nvme_intel_raw]
desc          = 'FIO direct IO, libaio'
include_test_bench = kodiak-nvme4
# txSzs [  4*1024,  16*1024], , , [128*1024,1024*1024], ,
# osio 32,128,128, 8, 8
whitelist  = [
              kd.tcases.io.tc_io_ltnc.TcIoLtnc(vdisk=False, xfs=False, nvme=True),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),

              kd.tcases.io.tc_fio.TcFio.allTestCases( vdisk=False, xfs=False, nvme=True, runTime=[0,1,0], diskCnt=1 ),
              kd.tcases.io.tc_fio.TcFio.allTestCases( vdisk=False, xfs=False, nvme=True, runTime=[0,1,0], diskCnt=2 ),
              kd.tcases.io.tc_fio.TcFio.allTestCases( vdisk=False, xfs=False, nvme=True, runTime=[0,1,0], diskCnt=3 ),
              kd.tcases.io.tc_fio.TcFio.allTestCases( vdisk=False, xfs=False, nvme=True, runTime=[0,1,0], diskCnt=4 ),
              kd.tcases.io.tc_fio.TcFio.allTestCases( vdisk=False, xfs=False, nvme=True, runTime=[0,1,0], diskCnt=5 ),
              kd.tcases.io.tc_fio.TcFio.allTestCases( vdisk=False, xfs=False, nvme=True, runTime=[0,1,0], diskCnt=6 ),
              kd.tcases.io.tc_fio.TcFio.allTestCases( vdisk=False, xfs=False, nvme=True, runTime=[0,1,0], diskCnt=7 ),
             ]

[test_suite_perf_ssd_intel_install]
desc          = 'Install kodiak engine'
include_test_bench = kodiak-dev3
whitelist  = [ kd.tcases.helper.tch_dhost.TchDhost('stop'),
               kd.tcases.helper.tch_install.TchInstall('Install Kodiak software'),
             ]

[test_suite_perf_ssd_intel_vdisk_ltnc]
desc          = 'FIO direct IO, libaio'
include_test_bench = kodiak-dev3
whitelist  = [
              kd.tcases.tc_set.tcs_simple.TcsSimple('restartAndReset'),
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-max', 5),
              kd.tcases.dock.tc_dock_res.TcDockRes(),
              kd.tcases.dock.tc_dock_binding.TcDockBinding(),
              kd.tcases.dock.tc_dock_cfg.TcDockCfg(),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_1', [300] * 10]),
              kd.tcases.helper.tch_util.TchUtil('sleep', 300),
              kd.tcases.io.tc_io_ltnc.TcIoLtnc(),
             ]

[test_suite_perf_ssd_intel_vdisk]
desc          = 'FIO direct IO, libaio'
include_test_bench = kodiak-dev3
whitelist  = [
              kd.tcases.tc_set.tcs_simple.TcsSimple('restartAndReset'),
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-max', 5),
              kd.tcases.dock.tc_dock_res.TcDockRes(),
              kd.tcases.dock.tc_dock_binding.TcDockBinding(),
              kd.tcases.dock.tc_dock_cfg.TcDockCfg(),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_1', [300] * 10]),
              kd.tcases.helper.tch_util.TchUtil('sleep', 300),

              kd.tcases.io.tc_fio.TcFio( runSpec='write', txSzs=[1024*1024] ),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),

              kd.tcases.io.tc_fio.TcFio.allTestCases( runTime=[0,1,0], diskCnt=1,  osio=8 ),
              kd.tcases.io.tc_fio.TcFio.allTestCases( runTime=[0,1,0], diskCnt=2,  osio=8 ),
              kd.tcases.io.tc_fio.TcFio.allTestCases( runTime=[0,1,0], diskCnt=4,  osio=8 ),
              kd.tcases.io.tc_fio.TcFio.allTestCases( runTime=[0,1,0], diskCnt=6,  osio=8 ),
              kd.tcases.io.tc_fio.TcFio.allTestCases( runTime=[0,1,0], diskCnt=8,  osio=8 ),
              kd.tcases.io.tc_fio.TcFio.allTestCases( runTime=[0,1,0], diskCnt=10, osio=8 ),
             ]

[test_suite_perf_ssd_intel_one_vdisk]
desc          = 'FIO direct IO, libaio'
include_test_bench = kodiak-dev3
whitelist  = [
              kd.tcases.tc_set.tcs_simple.TcsSimple('restartAndReset'),
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-max', 5),
              kd.tcases.dock.tc_dock_res.TcDockRes(),
              kd.tcases.dock.tc_dock_binding.TcDockBinding(),
              kd.tcases.dock.tc_dock_cfg.TcDockCfg(),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_1', [300] * 1]),
              kd.tcases.helper.tch_util.TchUtil('sleep', 300),

              kd.tcases.io.tc_fio.TcFio( runSpec='write', txSzs=[1024*1024] ),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),

              kd.tcases.io.tc_fio.TcFio.allTestCases( runTime=[0,1,0], diskCnt=1,  osio=8 ),
              kd.tcases.io.tc_fio.TcFio.allTestCases( runTime=[0,1,0], diskCnt=1,  osio=16 ),
             ]

[test_suite_perf_ssd_intel_vdisk_4_1_32k_ltnc]
desc          = 'FIO direct IO, libaio'
include_test_bench = kodiak-dev3
whitelist  = [
              kd.tcases.tc_set.tcs_simple.TcsSimple('restartAndReset'),
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-max', 5),
              kd.tcases.dock.tc_dock_res.TcDockRes(),
              kd.tcases.dock.tc_dock_binding.TcDockBinding(),
              kd.tcases.dock.tc_dock_cfg.TcDockCfg(),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_2', [300] * 10, '4+1_32k']),
              kd.tcases.helper.tch_util.TchUtil('sleep', 300),
              kd.tcases.io.tc_io_ltnc.TcIoLtnc(),
              kd.tcases.io.tc_fio.TcFio.allTestCases( runTime=[0,1,0], diskCnt=2,  osio=8 ),
              kd.tcases.io.tc_fio.TcFio.allTestCases( runTime=[0,1,0], diskCnt=4,  osio=8 ),
              kd.tcases.io.tc_fio.TcFio.allTestCases( runTime=[0,1,0], diskCnt=6,  osio=8 ),
              kd.tcases.io.tc_fio.TcFio.allTestCases( runTime=[0,1,0], diskCnt=8,  osio=8 ),
              kd.tcases.io.tc_fio.TcFio.allTestCases( runTime=[0,1,0], diskCnt=10, osio=8 ),
             ]

[test_suite_perf_ssd_intel_vdisk_4_1_32k]
desc          = 'FIO direct IO, libaio'
include_test_bench = kodiak-dev3
whitelist  = [
              kd.tcases.tc_set.tcs_simple.TcsSimple('restartAndReset'),
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-max', 5),
              kd.tcases.dock.tc_dock_res.TcDockRes(),
              kd.tcases.dock.tc_dock_binding.TcDockBinding(),
              kd.tcases.dock.tc_dock_cfg.TcDockCfg(),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_2', [300] * 10, '4+1_32k']),
              kd.tcases.helper.tch_util.TchUtil('sleep', 300),

              kd.tcases.io.tc_fio.TcFio( runSpec='write', txSzs=[1024*1024] ),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),

              kd.tcases.io.tc_fio.TcFio.allTestCases( runTime=[0,1,0], diskCnt=1,  osio=8 ),
              kd.tcases.io.tc_fio.TcFio.allTestCases( runTime=[0,1,0], diskCnt=2,  osio=8 ),
              kd.tcases.io.tc_fio.TcFio.allTestCases( runTime=[0,1,0], diskCnt=4,  osio=8 ),
              kd.tcases.io.tc_fio.TcFio.allTestCases( runTime=[0,1,0], diskCnt=6,  osio=8 ),
              kd.tcases.io.tc_fio.TcFio.allTestCases( runTime=[0,1,0], diskCnt=8,  osio=8 ),
              kd.tcases.io.tc_fio.TcFio.allTestCases( runTime=[0,1,0], diskCnt=10, osio=8 ),
             ]

[test_suite_perf_ssd_intel_test]
desc          = 'FIO xfs on nvme, libaio'
include_test_bench = kodiak-dev3
whitelist  = [
# install
              # kd.tcases.helper.tch_dhost.TchDhost('stop'),
              # kd.tcases.helper.tch_install.TchInstall('Install Kodiak software'),

              kd.tcases.tc_set.tcs_simple.TcsSimple('restartAndReset'),
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-max', 5),
              kd.tcases.dock.tc_dock_res.TcDockRes(),
             ]

[test_suite_perf_ssd_intel_xfs]
desc          = 'FIO xfs on nvme, libaio'
include_test_bench = kodiak-dev3
whitelist  = [
              kd.tcases.helper.tch_dhost.TchDhost('umount'),
              kd.tcases.helper.tch_dhost.TchDhost('format-xfs'),
              kd.tcases.helper.tch_dhost.TchDhost('mount'),
              kd.tcases.io.tc_fio.TcFio(vdisk=False, xfs=True, runSpec='write', txSzs=[1024*1024], diskSz=600, diskCnt=5),

              kd.tcases.io.tc_io_ltnc.TcIoLtnc( vdisk=False, xfs=True ),

              kd.tcases.io.tc_fio.TcFio.allTestCases( vdisk=False, xfs=True, runTime=[0,1,0], diskSz=600, diskCnt=1 ),
              kd.tcases.io.tc_fio.TcFio.allTestCases( vdisk=False, xfs=True, runTime=[0,1,0], diskSz=600, diskCnt=2 ),
              kd.tcases.io.tc_fio.TcFio.allTestCases( vdisk=False, xfs=True, runTime=[0,1,0], diskSz=600, diskCnt=3 ),
              kd.tcases.io.tc_fio.TcFio.allTestCases( vdisk=False, xfs=True, runTime=[0,1,0], diskSz=600, diskCnt=4 ),
              kd.tcases.io.tc_fio.TcFio.allTestCases( vdisk=False, xfs=True, runTime=[0,1,0], diskSz=600, diskCnt=5 ),
             ]

[test_suite_perf_ssd_intel_raw]
desc          = 'FIO direct IO, libaio'
include_test_bench = kodiak-dev3
whitelist  = [
              kd.tcases.helper.tch_dhost.TchDhost('umount'),
              kd.tcases.io.tc_io_ltnc.TcIoLtnc( vdisk=False, xfs=False ),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),

              kd.tcases.io.tc_fio.TcFio.allTestCases( vdisk=False, xfs=False, runTime=[0,1,0], diskCnt=1 ),
              kd.tcases.io.tc_fio.TcFio.allTestCases( vdisk=False, xfs=False, runTime=[0,1,0], diskCnt=2 ),
              kd.tcases.io.tc_fio.TcFio.allTestCases( vdisk=False, xfs=False, runTime=[0,1,0], diskCnt=3 ),
              kd.tcases.io.tc_fio.TcFio.allTestCases( vdisk=False, xfs=False, runTime=[0,1,0], diskCnt=4 ),
              kd.tcases.io.tc_fio.TcFio.allTestCases( vdisk=False, xfs=False, runTime=[0,1,0], diskCnt=5 ),
             ]

[test_suite_perf_ssd_aparna_install]
desc          = 'Install kodiak engine'
include_test_bench = aparna
whitelist  = [ kd.tcases.helper.tch_dhost.TchDhost('stop'),
               kd.tcases.helper.tch_install.TchInstall('Install Kodiak software'),
             ]

[test_suite_perf_ssd_aparna_raw]
desc          = 'FIO direct IO, libaio'
include_test_bench = aparna
#io.fio_skip   = True
whitelist  = [
              #kd.tcases.helper.tch_dhost.TchDhost('umount'),
              #kd.tcases.io.tc_io_ltnc.TcIoLtnc( vdisk=False, xfs=False ),
              #kd.tcases.helper.tch_util.TchUtil('sleep', 60),
              kd.tcases.io.tc_fio.TcFio.allTestCases( vdisk=False, xfs=False, runTime=[0,1,0], diskCnt=1 ),
              #kd.tcases.io.tc_fio.TcFio.allTestCases( vdisk=False, xfs=False, runTime=[0,1,0], diskCnt=2 ),
             ]

[test_suite_perf_ssd_aparna_xfs]
desc          = 'FIO direct IO, libaio'
include_test_bench = aparna
#io.fio_skip   = True
whitelist  = [
              kd.tcases.helper.tch_dhost.TchDhost('umount'),
              kd.tcases.helper.tch_dhost.TchDhost('format-xfs'),
              kd.tcases.helper.tch_dhost.TchDhost('mount'),
              kd.tcases.io.tc_fio.TcFio(vdisk=False, xfs=True, runSpec='write', txSzs=[1024*1024], diskSz=600, diskCnt=1),
              #kd.tcases.io.tc_io_ltnc.TcIoLtnc( vdisk=False, xfs=True ),
              kd.tcases.io.tc_fio.TcFio.allTestCases( vdisk=False, xfs=True, runTime=[0,1,0], diskSz=600, diskCnt=1 ),
             ]

[test_suite_perf_ssd_aparna_vdisk]
desc          = 'FIO direct IO, libaio'
include_test_bench = aparna
whitelist  = [
              kd.tcases.tc_set.tcs_simple.TcsSimple('restartAndReset'),
              kd.tcases.dock.tc_dock_res.TcDockRes(),
              kd.tcases.dock.tc_dock_binding.TcDockBinding(),
              kd.tcases.dock.tc_dock_cfg.TcDockCfg(),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),
              kd.tcases.dock.tc_dock_ctnr.TcDockCtnr(['Ctnr_1', [100] * 8]),
              kd.tcases.helper.tch_util.TchUtil('sleep', 300),

              kd.tcases.io.tc_fio.TcFio( runSpec='write', txSzs=[1024*1024] ),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),
              kd.tcases.io.tc_fio.TcFio.allTestCases( runTime=[0,1,0], diskCnt=8,  osio=8 ),
             ]

[test_suite_perf__620_xfs]
#io.fio_skip   = True
desc               = 'FIO direct IO, libaio'
whitelist  = [
              #kd.tcases.io.tc_fio.TcFio( runSpec='write', runTime=[0,1,0], txSzs=[512*1024, 1024*1024], vdisk=False, axfs=True ),
              kd.tcases.io.tc_fio.TcFio( runSpec='write', txSzs=[1024*1024], vdisk=False, axfs=True ),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),
              kd.tcases.io.tc_fio.TcFio.allTestCases( runTime=[0,2,0], vdisk=False, axfs=True, osio=8 ),
             ]

[test_suite_perf__620_local_1__remote_0__xfs]
desc               = 'FIO direct IO, libaio'
include_test_bench = kodiak-2u1-1__local_1__remote_0
test_suite         = perf__620_xfs

[test_suite_perf__620_local_2__remote_0__xfs]
desc               = 'FIO direct IO, libaio'
include_test_bench = kodiak-2u1-1__local_2__remote_0
test_suite         = perf__620_xfs

[test_suite_perf__620_local_4__remote_0__xfs]
desc               = 'FIO direct IO, libaio'
include_test_bench = kodiak-2u1-1__local_4__remote_0
test_suite         = perf__620_xfs

[test_suite_perf__620_local_0__remote_1__xfs]
desc               = 'FIO direct IO, libaio'
include_test_bench = kodiak-2u1-1__local_0__remote_1
test_suite         = perf__620_xfs

[test_suite_perf__620_local_0__remote_2__xfs]
desc               = 'FIO direct IO, libaio'
include_test_bench = kodiak-2u1-1__local_0__remote_2
test_suite         = perf__620_xfs

[test_suite_perf__620_local_1__remote_1__xfs]
desc               = 'FIO direct IO, libaio'
include_test_bench = kodiak-2u1-1__local_1__remote_1
test_suite         = perf__620_xfs

[test_suite_perf__620_local_2__remote_2__xfs]
desc               = 'FIO direct IO, libaio'
include_test_bench = kodiak-2u1-1__local_2__remote_2
test_suite         = perf__620_xfs

[test_suite_perf__620_local_4__remote_2__xfs]
desc               = 'FIO direct IO, libaio'
include_test_bench = kodiak-2u1-1__local_4__remote_2
test_suite         = perf__620_xfs

[test_suite_perf_nvme4_nvme7_raw]
desc          = 'FIO xfs on nvme, libaio'
include_test_bench = kodiak-nvme4
whitelist  = [
              kd.tcases.helper.tch_dhost.TchDhost('umount'),
              kd.tcases.io.tc_fio.TcFio.allTestCases( vdisk=False, xfs=False, nvme=True, runTime=[0,1,0], diskCnt=1 ),
              #kd.tcases.io.tc_fio.TcFio.allTestCases( vdisk=False, xfs=False, nvme=True, runTime=[0,1,0], diskCnt=2 ),
             ]

[test_suite_perf_nvme4_nvme8_9_raw]
desc          = 'FIO xfs on nvme, libaio'
include_test_bench = kodiak-nvme4
whitelist  = [
              kd.tcases.helper.tch_dhost.TchDhost('umount'),
              kd.tcases.io.tc_fio.TcFio.allTestCases( vdisk=False, xfs=False, nvme=True, runTime=[0,1,0], diskCnt=1 ),
              #kd.tcases.io.tc_fio.TcFio.allTestCases( vdisk=False, xfs=False, nvme=True, runTime=[0,1,0], diskCnt=2 ),
             ]

[test_suite_perf_nvme4_nvme8_9_raw_2]
desc          = 'FIO xfs on nvme, libaio'
include_test_bench = kodiak-nvme4
whitelist  = [
              kd.tcases.helper.tch_dhost.TchDhost('umount'),
              kd.tcases.io.tc_fio.TcFio.allTestCases( vdisk=False, xfs=False, nvme=True, runTime=[0,1,0], diskCnt=1, osio=8 ),
              kd.tcases.io.tc_fio.TcFio.allTestCases( vdisk=False, xfs=False, nvme=True, runTime=[0,1,0], diskCnt=1, osio=16 ),
              kd.tcases.io.tc_fio.TcFio.allTestCases( vdisk=False, xfs=False, nvme=True, runTime=[0,1,0], diskCnt=1, osio=24 ),
              kd.tcases.io.tc_fio.TcFio.allTestCases( vdisk=False, xfs=False, nvme=True, runTime=[0,1,0], diskCnt=1, osio=32 ),
              kd.tcases.io.tc_fio.TcFio.allTestCases( vdisk=False, xfs=False, nvme=True, runTime=[0,1,0], diskCnt=1, osio=40 ),
             ]

[test_suite_perf_as1_P4600]
desc          = 'FIO xfs on nvme, libaio'
include_test_bench = as1
whitelist  = [
              kd.tcases.helper.tch_dhost.TchDhost('umount'),
              kd.tcases.io.tc_fio.TcFio.allTestCases( vdisk=False, xfs=False, nvme=True, runTime=[0,1,0], diskCnt=1 ),
              #kd.tcases.io.tc_fio.TcFio.allTestCases( vdisk=False, xfs=False, nvme=True, runTime=[0,1,0], diskCnt=2 ),
             ]

[test_suite_perf_fio_libaio]
desc          = 'FIO direct IO, libaio'
test_suite    = setup_default
whitelist  = [
              kd.tcases.helper.tch_dhost.TchDhost('umount'),
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-max', 1),
              kd.tcases.io.tc_fio.TcFio(desc='1 Disk  80G 10 min SEQ WR', vdisk=False, xfs=False, runSpec='write', runTime=[0,10,0], txSzs=[128*1024,1024*1024], diskSz=80, ioengine='libaio'),
              kd.tcases.io.tc_fio.TcFio(desc='1 Disk  80G 10 min SEQ RD', vdisk=False, xfs=False, runSpec='read', runTime=[0,10,0], txSzs=[128*1024,1024*1024], diskSz=80, ioengine='libaio'),
              kd.tcases.io.tc_fio.TcFio(desc='1 Disk  80G 10 min RAM WR', vdisk=False, xfs=False, runSpec='randwrite', runTime=[0,10,0], txSzs=[128*1024,1024*1024], diskSz=80, ioengine='libaio'),
              kd.tcases.io.tc_fio.TcFio(desc='1 Disk  80G 10 min RAM RD', vdisk=False, xfs=False, runSpec='randread', runTime=[0,10,0], txSzs=[128*1024,1024*1024], diskSz=80, ioengine='libaio'),
              kd.tcases.helper.tch_util.TchUtil('sleep', 60),
              kd.tcases.io.tc_fio.TcFio(desc='1 Disk 600G 60 min SEQ WR', vdisk=False, xfs=False, runSpec='write', runTime=[1,0,0], txSzs=[128*1024,1024*1024], diskSz=600, ioengine='libaio'),
              kd.tcases.io.tc_fio.TcFio(desc='1 Disk 600G 60 min SEQ RD', vdisk=False, xfs=False, runSpec='read', runTime=[1,0,0], txSzs=[128*1024,1024*1024], diskSz=600, ioengine='libaio'),
              kd.tcases.io.tc_fio.TcFio(desc='1 Disk 600G 60 min RAM WR', vdisk=False, xfs=False, runSpec='randwrite', runTime=[1,0,0], txSzs=[128*1024,1024*1024], diskSz=600, ioengine='libaio'),
              kd.tcases.io.tc_fio.TcFio(desc='1 Disk 600G 60 min RAM RD', vdisk=False, xfs=False, runSpec='randread', runTime=[1,0,0], txSzs=[128*1024,1024*1024], diskSz=600, ioengine='libaio'),
             ]


[test_suite_perf_fio_current]
desc          = 'FIO direct vs page cache IO (not yet)'
test_suite    = setup_default
whitelist  = [
              kd.tcases.helper.tch_dhost.TchDhost('umount'),
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-max', 1),
              kd.tcases.io.tc_fio.TcFio(desc='1 Disk 600GB', vdisk=False, xfs=False, runSpec=(0,0), runTime=[0,1,0], txSzs=[128*1024], diskSz=80, ioengine='libaio'),
             ]



[test_suite_perf_fio_xfs_sync]
desc          = 'FIO buffered IO'
test_suite    = setup_default

whitelist  = [
              kd.tcases.helper.tch_dhost.TchDhost('umount'),
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-max', 1),

              kd.tcases.helper.tch_util.TchUtil('sleep', 600),
              kd.tcases.helper.tch_dhost.TchDhost('umount'),
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-format-xfs'),
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-mount-xfs'),
              kd.tcases.io.tc_fio.TcFio(desc='1 Disk 600GB 30 sec', vdisk=False, xfs=True,  runSpec=(0,0), runTime=[0,0,30], txSzs=[128*1024], diskSz=600', ioengine='sync'),

              kd.tcases.helper.tch_util.TchUtil('sleep', 600),
              kd.tcases.helper.tch_dhost.TchDhost('umount'),
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-format-xfs'),
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-mount-xfs'),
              kd.tcases.io.tc_fio.TcFio(desc='1 Disk 600GB 10 min', vdisk=False, xfs=True,  runSpec=(0,0), runTime=[0,10,0], txSzs=[128*1024], diskSz=600', ioengine='sync'),

              kd.tcases.helper.tch_util.TchUtil('sleep', 600),
              kd.tcases.helper.tch_dhost.TchDhost('umount'),
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-format-xfs'),
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-mount-xfs'),
              kd.tcases.io.tc_fio.TcFio(desc='1 Disk 600GB 50 min', vdisk=False, xfs=True,  runSpec=(0,0), runTime=[0,50,0], txSzs=[128*1024], diskSz=600, ioengine='sync'),

              kd.tcases.helper.tch_util.TchUtil('sleep', 600),
              kd.tcases.helper.tch_dhost.TchDhost('umount'),
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-format-xfs'),
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-mount-xfs'),
              kd.tcases.io.tc_fio.TcFio(desc='1 Disk 600GB 60 min', vdisk=False, xfs=True,  runSpec=(0,0), runTime=[1,0,0], txSzs=[128*1024], diskSz=600, ioengine='sync'),
             ]

[test_suite_perf_fio_sync]
desc          = 'FIO page cache IO'
test_suite    = setup_default

whitelist  = [
              kd.tcases.helper.tch_dhost.TchDhost('umount'),
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-max', 1),
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-format-xfs', '-b size=4k -s size=4k'),
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-mount-xfs'),
              kd.tcases.io.tc_fio.TcFio(desc='1 Disk 128MB', vdisk=False, xfs=True, runSpec='write', runTime=[0,0,10], txSzs=[128*1024], diskSz=128, diskSzUnit='MB', ioengine='sync'),
              kd.tcases.helper.tch_util.TchUtil('sleep', 300),
              kd.tcases.io.tc_fio.TcFio(desc='1 Disk 128MB', vdisk=False, xfs=True, runSpec='write', runTime=[0,0,10], txSzs=[1024*1024], diskSz=128, diskSzUnit='MB', ioengine='sync'),
              kd.tcases.helper.tch_util.TchUtil('sleep', 300),
              kd.tcases.io.tc_fio.TcFio(desc='1 Disk 80GB', vdisk=False, xfs=True, runSpec='write', runTime=[0,0,10], txSzs=[128*1024], diskSz=80, diskSzUnit='GB', ioengine='sync'),
              kd.tcases.helper.tch_util.TchUtil('sleep', 300),
              kd.tcases.io.tc_fio.TcFio(desc='1 Disk 80GB', vdisk=False, xfs=True, runSpec='write', runTime=[0,0,10], txSzs=[1024*1024], diskSz=80, diskSzUnit='GB', ioengine='sync'),
              kd.tcases.helper.tch_util.TchUtil('sleep', 300),
              kd.tcases.io.tc_fio.TcFio(desc='1 Disk 600GB', vdisk=False, xfs=True, runSpec='write', runTime=[0,10,0], txSzs=[128*1024], diskSz=600, diskSzUnit='GB', ioengine='sync'),
              kd.tcases.helper.tch_util.TchUtil('sleep', 600),
              kd.tcases.io.tc_fio.TcFio(desc='1 Disk 600GB', vdisk=False, xfs=True, runSpec='write', runTime=[0,10,0], txSzs=[1024*1024], diskSz=600, diskSzUnit='GB', ioengine='sync'),
              kd.tcases.helper.tch_util.TchUtil('sleep', 600),
              kd.tcases.helper.tch_dhost.TchDhost('umount'),
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-rescan'),
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-format-xfs', '-b size=4k -s size=4k'),
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-mount-xfs'),
              kd.tcases.io.tc_fio.TcFio(desc='8 Disk 128MB', vdisk=False, xfs=True, runSpec='write', runTime=[0,0,10], txSzs=[128*1024], diskSz=128, diskSzUnit='MB', ioengine='sync'),
              kd.tcases.helper.tch_util.TchUtil('sleep', 300),
              kd.tcases.io.tc_fio.TcFio(desc='8 Disk 128MB', vdisk=False, xfs=True, runSpec='write', runTime=[0,0,10], txSzs=[1024*1024], diskSz=128, diskSzUnit='MB', ioengine='sync'),
              kd.tcases.helper.tch_util.TchUtil('sleep', 300),
              kd.tcases.io.tc_fio.TcFio(desc='8 Disk 600GB', vdisk=False, xfs=True, runSpec='write', runTime=[0,10,0], txSzs=[128*1024], diskSz=600, diskSzUnit='GB', ioengine='sync'),
              kd.tcases.helper.tch_util.TchUtil('sleep', 600),
              kd.tcases.io.tc_fio.TcFio(desc='8 Disk 600GB', vdisk=False, xfs=True, runSpec='write', runTime=[0,10,0], txSzs=[1024*1024], diskSz=600, diskSzUnit='GB', ioengine='sync'),
              kd.tcases.helper.tch_util.TchUtil('sleep', 600),
              #kd.tcases.io.tc_fio.TcFio(vdisk=False, xfs=True, runSpec='read', runTime=[0,0,10], txSzs=[128*1024, 1024*1024], diskSz=80, diskSzUnit='GB', ioengine='sync'),
              #kd.tcases.io.tc_fio.TcFio(vdisk=False, xfs=True, runSpec='randwrite', runTime=[0,0,10], txSzs=[128*1024, 1024*1024], diskSz=80, diskSzUnit='GB', ioengine='sync'),
              #kd.tcases.io.tc_fio.TcFio(vdisk=False, xfs=True, runSpec='randread', runTime=[0,0,10], txSzs=[128*1024, 1024*1024], diskSz=80, diskSzUnit='GB', ioengine='sync'),
             ]

[test_suite_perf_brief]
desc          = 'Briefly VDisk Performance'
test_suite    = setup_default
whitelist     = [
              kd.tcases.tc_set.tcs_simple.TcsSimple('buildAndInstall'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('restartAndReset'),
              kd.tcases.tc_set.tcs_simple.TcsSimple('perf_brief'),
             ]

[test_suite_perf_raw]
desc          = 'Raw Disk Performance'
test_suite    = setup_default
whitelist     = [
              kd.tcases.helper.tch_dhost.TchDhost('stop'),
              kd.tcases.helper.tch_dhost.TchDhost('umount'),
              kd.tcases.io.tc_io_ltnc.TcIoLtnc.allTestCases(False),
              kd.tcases.io.tc_io_iometer.TcIoIometer.allTestCases(False),
             ]

[test_suite_perf_hdd_raw_scheduler_noop]
test_suite    = setup_default
desc          = 'HDD raw Disk Performance with io scheduler noop'
whitelist     = [ kd.tcases.tc_set.tcs_hdd.TcsHdd( xfs=False, scheduler='noop'), ]

[test_suite_perf_hdd_raw_scheduler_cfq]
test_suite    = setup_default
desc          = 'HDD raw Disk Performance with io scheduler cfq'
whitelist     = [ kd.tcases.tc_set.tcs_hdd.TcsHdd( xfs=False, scheduler='cfq'), ]

[test_suite_perf_hdd_raw_scheduler_deadline]
test_suite    = setup_default
desc          = 'HDD raw Disk Performance with io scheduler deadline'
whitelist     = [ kd.tcases.tc_set.tcs_hdd.TcsHdd( xfs=False, scheduler='deadline'), ]

[test_suite_perf_hdd_raw_runtime]
test_suite    = setup_default
desc          = 'HDD raw Disk Performance with runtimes'
whitelist     = [
                  kd.tcases.tc_set.tcs_hdd.TcsHdd( xfs=False, runtime=[0, 0, 1]),
                  kd.tcases.tc_set.tcs_hdd.TcsHdd( xfs=False, runtime=[0, 0, 5]),
                  kd.tcases.tc_set.tcs_hdd.TcsHdd( xfs=False, runtime=[0, 0,10]),
                  kd.tcases.tc_set.tcs_hdd.TcsHdd( xfs=False, runtime=[0, 0,30]),
                  kd.tcases.tc_set.tcs_hdd.TcsHdd( xfs=False, runtime=[0, 1, 0]),
                  kd.tcases.tc_set.tcs_hdd.TcsHdd( xfs=False, runtime=[0, 2, 0]),
                  kd.tcases.tc_set.tcs_hdd.TcsHdd( xfs=False, runtime=[0,10, 0]),
                ]

[test_suite_perf_hdd_raw_iops]
test_suite    = setup_default
desc          = 'HDD raw Disk Performance with OSIOs'
whitelist     = [
                  kd.tcases.tc_set.tcs_hdd.TcsHdd( xfs=False, osio= 8),
                  kd.tcases.tc_set.tcs_hdd.TcsHdd( xfs=False, osio=16),
                  kd.tcases.tc_set.tcs_hdd.TcsHdd( xfs=False, osio=24),
                ]


[test_suite_perf_hdd_raw_diskSz_80]
test_suite    = setup_default
desc          = 'HDD raw Disk Performance with disk sizes'
whitelist     = [ kd.tcases.tc_set.tcs_hdd.TcsHdd( xfs=False, diskSz= 80), ]

[test_suite_perf_hdd_raw_diskSz_320]
test_suite    = setup_default
desc          = 'HDD raw Disk Performance with disk sizes'
whitelist     = [ kd.tcases.tc_set.tcs_hdd.TcsHdd( xfs=False, diskSz=320), ]

[test_suite_perf_hdd_raw_diskSz_640]
test_suite    = setup_default
desc          = 'HDD raw Disk Performance with disk sizes'
whitelist     = [ kd.tcases.tc_set.tcs_hdd.TcsHdd( xfs=False, diskSz=640), ]

[test_suite_perf_hdd_xfs]
desc          = 'HDD XFS Disk Performance'
test_suite    = setup_default
whitelist     = [
              kd.tcases.helper.tch_dhost.TchDhost('umount'),
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-max', 2),
              kd.tcases.helper.tch_dhost.TchDhost('format-xfs'),
              kd.tcases.helper.tch_dhost.TchDhost('mount'),
              kd.tcases.io.tc_io_iometer.TcIoIometer('Initial Sequential Write', (  0,  0), [3,  0, 0], [128 * 1024], vdisk=False, xfs=True, osio=8, workerPerTarget=1, diskSz=80),

              kd.tcases.io.tc_io_iometer.TcIoIometer('2 disk seq WR 1 disk seg', (  0,  0), [0, 10, 0], [128*1024,1024*1024], vdisk=False, xfs=True, osio=8, workerPerTarget=1, diskSz=80),
              kd.tcases.io.tc_io_iometer.TcIoIometer('2 disk seq RD 1 disk seg', (100,  0), [0, 10, 0], [128*1024,1024*1024], vdisk=False, xfs=True, osio=8, workerPerTarget=1, diskSz=80),
              kd.tcases.io.tc_io_iometer.TcIoIometer('2 disk seq WR 2 disk seg', (  0,  0), [0, 10, 0], [128*1024,1024*1024], vdisk=False, xfs=True, osio=4, workerPerTarget=2, diskSz=80),
              kd.tcases.io.tc_io_iometer.TcIoIometer('2 disk seq RD 2 disk seg', (100,  0), [0, 10, 0], [128*1024,1024*1024], vdisk=False, xfs=True, osio=4, workerPerTarget=2, diskSz=80),
              kd.tcases.io.tc_io_iometer.TcIoIometer('2 disk seq WR 4 disk seg', (  0,  0), [0, 10, 0], [128*1024,1024*1024], vdisk=False, xfs=True, osio=2, workerPerTarget=4, diskSz=80),
              kd.tcases.io.tc_io_iometer.TcIoIometer('2 disk seq RD 4 disk seg', (100,  0), [0, 10, 0], [128*1024,1024*1024], vdisk=False, xfs=True, osio=2, workerPerTarget=4, diskSz=80),
              kd.tcases.io.tc_io_iometer.TcIoIometer('2 disk seq WR 8 disk seg', (  0,  0), [0, 10, 0], [128*1024,1024*1024], vdisk=False, xfs=True, osio=1, workerPerTarget=8, diskSz=80),
              kd.tcases.io.tc_io_iometer.TcIoIometer('2 disk seq RD 8 disk seg', (100,  0), [0, 10, 0], [128*1024,1024*1024], vdisk=False, xfs=True, osio=1, workerPerTarget=8, diskSz=80),

              kd.tcases.helper.tch_dhost.TchDhost('umount'),
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-rescan'),
              kd.tcases.helper.tch_dhost.TchDhost('format-xfs'),
              kd.tcases.helper.tch_dhost.TchDhost('mount'),
              kd.tcases.io.tc_io_iometer.TcIoIometer('Initial Sequential Write', (  0,  0), [3,  0, 0], [128 * 1024], vdisk=False, xfs=True, osio=8, workerPerTarget=1, diskSz=80),

              kd.tcases.io.tc_io_iometer.TcIoIometer('8 disk seq WR 1 disk seg', (  0,  0), [0, 10, 0], [128*1024,1024*1024], vdisk=False, xfs=True, osio=8, workerPerTarget=1, diskSz=80),
              kd.tcases.io.tc_io_iometer.TcIoIometer('8 disk seq RD 1 disk seg', (100,  0), [0, 10, 0], [128*1024,1024*1024], vdisk=False, xfs=True, osio=8, workerPerTarget=1, diskSz=80),
              kd.tcases.io.tc_io_iometer.TcIoIometer('8 disk seq WR 2 disk seg', (  0,  0), [0, 10, 0], [128*1024,1024*1024], vdisk=False, xfs=True, osio=4, workerPerTarget=2, diskSz=80),
              kd.tcases.io.tc_io_iometer.TcIoIometer('8 disk seq RD 2 disk seg', (100,  0), [0, 10, 0], [128*1024,1024*1024], vdisk=False, xfs=True, osio=4, workerPerTarget=2, diskSz=80),
              kd.tcases.io.tc_io_iometer.TcIoIometer('8 disk seq WR 4 disk seg', (  0,  0), [0, 10, 0], [128*1024,1024*1024], vdisk=False, xfs=True, osio=2, workerPerTarget=4, diskSz=80),
              kd.tcases.io.tc_io_iometer.TcIoIometer('8 disk seq RD 4 disk seg', (100,  0), [0, 10, 0], [128*1024,1024*1024], vdisk=False, xfs=True, osio=2, workerPerTarget=4, diskSz=80),
              kd.tcases.io.tc_io_iometer.TcIoIometer('8 disk seq WR 8 disk seg', (  0,  0), [0, 10, 0], [128*1024,1024*1024], vdisk=False, xfs=True, osio=1, workerPerTarget=8, diskSz=80),
              kd.tcases.io.tc_io_iometer.TcIoIometer('8 disk seq RD 8 disk seg', (100,  0), [0, 10, 0], [128*1024,1024*1024], vdisk=False, xfs=True, osio=1, workerPerTarget=8, diskSz=80),
             ]

[test_suite_perf_hdd_xfs_200]
desc          = 'HDD XFS Disk Performance'
test_suite    = setup_default
whitelist     = [
              kd.tcases.helper.tch_dhost.TchDhost('umount'),
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-max', 2),
              kd.tcases.helper.tch_dhost.TchDhost('format-xfs'),
              kd.tcases.helper.tch_dhost.TchDhost('mount'),
              kd.tcases.io.tc_io_iometer.TcIoIometer('Initial Sequential Write', (  0,  0), [6, 30, 0], [128 * 1024], vdisk=False, xfs=True, osio=8, workerPerTarget=1, diskSz=200),

              kd.tcases.io.tc_io_iometer.TcIoIometer('2 disk seq WR 1 disk seg', (  0,  0), [0, 10, 0], [128*1024,1024*1024], vdisk=False, xfs=True, osio=8, workerPerTarget=1, diskSz=200),
              kd.tcases.io.tc_io_iometer.TcIoIometer('2 disk seq RD 1 disk seg', (100,  0), [0, 10, 0], [128*1024,1024*1024], vdisk=False, xfs=True, osio=8, workerPerTarget=1, diskSz=200),
              kd.tcases.io.tc_io_iometer.TcIoIometer('2 disk seq WR 2 disk seg', (  0,  0), [0, 10, 0], [128*1024,1024*1024], vdisk=False, xfs=True, osio=4, workerPerTarget=2, diskSz=200),
              kd.tcases.io.tc_io_iometer.TcIoIometer('2 disk seq RD 2 disk seg', (100,  0), [0, 10, 0], [128*1024,1024*1024], vdisk=False, xfs=True, osio=4, workerPerTarget=2, diskSz=200),
              kd.tcases.io.tc_io_iometer.TcIoIometer('2 disk seq WR 4 disk seg', (  0,  0), [0, 10, 0], [128*1024,1024*1024], vdisk=False, xfs=True, osio=2, workerPerTarget=4, diskSz=200),
              kd.tcases.io.tc_io_iometer.TcIoIometer('2 disk seq RD 4 disk seg', (100,  0), [0, 10, 0], [128*1024,1024*1024], vdisk=False, xfs=True, osio=2, workerPerTarget=4, diskSz=200),
              kd.tcases.io.tc_io_iometer.TcIoIometer('2 disk seq WR 8 disk seg', (  0,  0), [0, 10, 0], [128*1024,1024*1024], vdisk=False, xfs=True, osio=1, workerPerTarget=8, diskSz=200),
              kd.tcases.io.tc_io_iometer.TcIoIometer('2 disk seq RD 8 disk seg', (100,  0), [0, 10, 0], [128*1024,1024*1024], vdisk=False, xfs=True, osio=1, workerPerTarget=8, diskSz=200),

              kd.tcases.helper.tch_dhost.TchDhost('umount'),
              kd.tcases.helper.tch_dhost.TchDhost('rdisk-rescan'),
              kd.tcases.helper.tch_dhost.TchDhost('format-xfs'),
              kd.tcases.helper.tch_dhost.TchDhost('mount'),
              kd.tcases.io.tc_io_iometer.TcIoIometer('Initial Sequential Write', (  0,  0), [6, 30, 0], [128 * 1024], vdisk=False, xfs=True, osio=8, workerPerTarget=1, diskSz=200),

              kd.tcases.io.tc_io_iometer.TcIoIometer('8 disk seq WR 1 disk seg', (  0,  0), [0, 10, 0], [128*1024,1024*1024], vdisk=False, xfs=True, osio=8, workerPerTarget=1, diskSz=200),
              kd.tcases.io.tc_io_iometer.TcIoIometer('8 disk seq RD 1 disk seg', (100,  0), [0, 10, 0], [128*1024,1024*1024], vdisk=False, xfs=True, osio=8, workerPerTarget=1, diskSz=200),
              kd.tcases.io.tc_io_iometer.TcIoIometer('8 disk seq WR 2 disk seg', (  0,  0), [0, 10, 0], [128*1024,1024*1024], vdisk=False, xfs=True, osio=4, workerPerTarget=2, diskSz=200),
              kd.tcases.io.tc_io_iometer.TcIoIometer('8 disk seq RD 2 disk seg', (100,  0), [0, 10, 0], [128*1024,1024*1024], vdisk=False, xfs=True, osio=4, workerPerTarget=2, diskSz=200),
              kd.tcases.io.tc_io_iometer.TcIoIometer('8 disk seq WR 4 disk seg', (  0,  0), [0, 10, 0], [128*1024,1024*1024], vdisk=False, xfs=True, osio=2, workerPerTarget=4, diskSz=200),
              kd.tcases.io.tc_io_iometer.TcIoIometer('8 disk seq RD 4 disk seg', (100,  0), [0, 10, 0], [128*1024,1024*1024], vdisk=False, xfs=True, osio=2, workerPerTarget=4, diskSz=200),
              kd.tcases.io.tc_io_iometer.TcIoIometer('8 disk seq WR 8 disk seg', (  0,  0), [0, 10, 0], [128*1024,1024*1024], vdisk=False, xfs=True, osio=1, workerPerTarget=8, diskSz=200),
              kd.tcases.io.tc_io_iometer.TcIoIometer('8 disk seq RD 8 disk seg', (100,  0), [0, 10, 0], [128*1024,1024*1024], vdisk=False, xfs=True, osio=1, workerPerTarget=8, diskSz=200),
             ]

[test_suite_perf_xfs]
desc          = 'XFS Disk Performance'
test_suite    = setup_default
whitelist     = [
              #kd.tcases.tc_set.tcs_simple.TcsSimple('restartAndReset'),
              #kd.tcases.tc_set.tcs_simple.TcsSimple('dockResBindingCfg'),
              #kd.tcases.helper.tch_dhost.TchDhost('stop'),
              kd.tcases.io.tc_io_ltnc.TcIoLtnc.allTestCases(False, True),
              kd.tcases.io.tc_io_iometer.TcIoIometer.allTestCases(False, True),
             ]

[test_suite_perf_xfs_brief]
desc          = 'XFS Disk Performance'
test_suite    = setup_default
whitelist     = [
              #kd.tcases.tc_set.tcs_simple.TcsSimple('restartAndReset'),
              #kd.tcases.tc_set.tcs_simple.TcsSimple('dockResBindingCfg'),
              #kd.tcases.helper.tch_dhost.TchDhost('stop'),
              kd.tcases.io.tc_io_ltnc.TcIoLtnc.allTestCases(False, True),
      kd.tcases.io.tc_io_iometer.TcIoIometer('Iometer Sequential Write',   (  0,   0), [0,5, 0], [128 * 1024, 512*1024, 1024 * 1024], False, True),
      kd.tcases.io.tc_io_iometer.TcIoIometer('Iometer Sequential Read',    (100,   0), [0,5, 0], [128 * 1024, 512*1024, 1024 * 1024], False, True),
      kd.tcases.io.tc_io_iometer.TcIoIometer('Iometer Sequential 50r/50w', ( 50,   0), [0,5, 0], [128 * 1024, 512*1024, 1024 * 1024], False, True),
      kd.tcases.io.tc_io_iometer.TcIoIometer('Iometer Random Write',       (  0, 100), [0,5, 0], [  4 * 1024,  64*1024, 1024 * 1024], False, True),
      kd.tcases.io.tc_io_iometer.TcIoIometer('Iometer Random Read',        (100, 100), [0,5, 0], [  4 * 1024,  64*1024, 1024 * 1024], False, True),
      kd.tcases.io.tc_io_iometer.TcIoIometer('Iometer Random 80r/20w',     ( 80, 100), [0,5, 0], [  4 * 1024,  64*1024, 1024 * 1024], False, True),
      kd.tcases.io.tc_io_iometer.TcIoIometer('Iometer Random 50r/50w',     ( 50, 100), [0,5, 0], [  4 * 1024,  64*1024, 1024 * 1024], False, True),
             ]

# Begin of tkcd test suite
#  tkcd_start tkcd_stop tkcd_restart tkcd_restop
# tkcd_one_read, tkcd_one_write, tkcd_dev_error_one_write, tkcd_dev_error_one_read
# {{{
[test_suite_tkcd_start]
desc          = 'Start TKCD'
test_suite    = setup_default
whitelist     = [ kd.tcases.helper.tch_start.TchStart( [], ['kdtkcd'] ), ]

[test_suite_tkcd_stop]
desc          = 'Start TKCD'
test_suite    = setup_default
whitelist     = [ kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], [] ), ]

[test_suite_tkcd_restart]
desc          = 'Start TKCD'
test_suite    = setup_default
whitelist     = [ kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], [] ),
                  kd.tcases.helper.tch_start.TchStart( [], ['kdtkcd'] ), ]

[test_suite_tkcd_restop]
desc          = 'Start TKCD'
test_suite    = setup_default
whitelist     = [ kd.tcases.helper.tch_start.TchStart( [], ['kdtkcd'] ),
                  kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], [] ), ]

[test_suite_tkcd_one_write]
desc          = 'Test one io operation'
test_suite    = setup_default
whitelist     = [
              kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
              kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
              kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
              kd.tcases.tkcd.tct_device.TctDevice('add', [0,1,2,3,4]),
              kd.tcases.tkcd.tct_tile.TctTile([[1, 1, 'P_none']]),
              kd.tcases.tkcd.tct_io.TctIo('write a full stripe + 64K at begin and 32K at end', ['write', 1, (128 - 64) * 1024, (64 + 128 + 32) * 1024]),
                ]

[test_suite_tkcd_one_read]
desc          = 'Test one io operation'
test_suite    = setup_default
whitelist     = [
              kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
              kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
              kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
              kd.tcases.tkcd.tct_device.TctDevice('add', [0,1,2,3,4]),
              kd.tcases.tkcd.tct_tile.TctTile([[1, 1, 'P_none']]),
              kd.tcases.tkcd.tct_io.TctIo('read a full stripe + 64K at begin and 32K at end', ['read', 1, (128 - 64) * 1024, (64 + 128 + 32) * 1024]),
                ]

[test_suite_tkcd_dev_error_one_write]
desc          = 'Test one io operation'
test_suite    = setup_default
whitelist     = [
              kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
              kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
              kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
              kd.tcases.tkcd.tct_device.TctDevice('add', [0,1,2,3,4]),
              kd.tcases.tkcd.tct_tile.TctTile([[1, 1, 'P_none']]),
              kd.tcases.tkcd.tct_io.TctIo('1M write at offset 0', ['write',  1, 0, 1024* 1024]),
              kd.tcases.tkcd.tct_device.TctDevice('err', 1),
              kd.tcases.tkcd.tct_io.TctIo('write a full stripe + 64K at begin and 32K at end', ['write', 1, (128 - 64) * 1024, (64 + 128 + 32) * 1024]),
                ]

[test_suite_tkcd_dev_error_one_read]
desc          = 'Test one io operation'
test_suite    = setup_default
whitelist     = [
              kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
              kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
              kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
              kd.tcases.tkcd.tct_device.TctDevice('add', [0,1,2,3,4]),
              kd.tcases.tkcd.tct_tile.TctTile([[1, 1, 'P_none']]),
              kd.tcases.tkcd.tct_io.TctIo('1M write at offset 0', ['write',  1, 0, 1024* 1024]),
              kd.tcases.tkcd.tct_device.TctDevice('err', 1),
              kd.tcases.tkcd.tct_io.TctIo('read a full stripe + 64K at begin and 32K at end', ['read', 1, (128 - 64) * 1024, (64 + 128 + 32) * 1024]),
                ]
# }}}

[test_suite_tkcd_device]
desc          = 'Add all device'
test_suite    = setup_default
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add', 1),
                 kd.tcases.tkcd.tct_device.TctDevice('err', 1),
                 #kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
                ]

[test_suite_tkcd_device_del_one]
desc          = 'Test one io operation'
test_suite    = setup_default
whitelist     = [
              kd.tcases.tkcd.tct_device.TctDevice('del', 1),
             ]
[test_suite_tkcd_tile]
desc          = 'Test one tile operation'
test_suite    = setup_default
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 #kd.tcases.tkcd.tct_device.TctDevice('add', [x for x in range(5) ]),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
# bind 32 tileset from no-protection to 8+1
                 kd.tcases.tkcd.tct_tile.TctTile([ [1, x] for x in range(1,33)] ),
                 kd.tcases.tkcd.tct_tile.TctTile([ [2, x, 'P_4x1_32k'] for x in range(1, 33)] ),
                 kd.tcases.tkcd.tct_tile.TctTile([ [3, x, 'P_8x1_8k'] for x in range(1, 33)] ),
# bind 32 tileset from 8+1 to no-protection
                 kd.tcases.tkcd.tct_tile.TctTile([ [4, x, 'P_8x1_8k'] for x in range(1, 33)] ),
                 kd.tcases.tkcd.tct_tile.TctTile([ [5, x, 'P_4x1_32k'] for x in range(1, 33)] ),
                 kd.tcases.tkcd.tct_tile.TctTile([ [6, x] for x in range(1,33)] ),
                 #kd.tcases.helper.tch_pause.TchPause('enter_and_continue', 'stop the kdtkcd'),

                 #kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
                 #kd.tcases.helper.tch_pause.TchPause('enter_and_continue', 'start the kdtkcd'),
                 #kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 #kd.tcases.tkcd.tct_device.TctDevice('add', [x for x in range(5) ]),
                ]

[test_suite_tkcd_io]
desc          = 'Test one io operation'
test_suite    = setup_default
whitelist     = [ kd.tcases.tkcd.tct_tile.TctTile([[1, 1, 'P_none']]),
                  kd.tcases.tkcd.tct_io.TctIo( None, ['write-and-read-corner', 1] ),
                ]

[test_suite_tkcd_rd]
desc          = 'Test one io operation'
test_suite    = setup_default
whitelist     = [ kd.tcases.tkcd.tct_tile.TctTile([[1, 1, 'P_none']]),
                  kd.tcases.tkcd.tct_io.TctIo( None, ['read-corner', 1] ),
                ]


[test_suite_tkcd_del_panel]
desc          = 'Test one io with LBA and blocks'
test_suite    = setup_default
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
# bind 32 tile
                 kd.tcases.tkcd.tct_tile.TctTile([ [1, x] for x in range(1,33)] ),
                 kd.tcases.tkcd.tct_io.TctIo(None, ['write-pattern', 1, 4*4096, 0xd400 * 4096, 512*1024*1024, None, 64]),
# delete panel
                 #kd.tcases.helper.tch_pause.TchPause('enter_and_continue', 'Enter to delete panel'),
                 kd.tcases.tkcd.tct_panel.TctPanel( 1 ),
                 #kd.tcases.helper.tch_pause.TchPause('enter_and_continue', 'Keep tkcd session'),
                ]

[test_suite_tkcd_del_panel_2]
desc          = 'Test one io with LBA and blocks'
test_suite    = setup_default
whitelist     = [
                 kd.tcases.tkcd.tct_tile.TctTile([ [1, x] for x in range(1,33)] ),
                 kd.tcases.helper.tch_pause.TchPause('enter_and_continue', 'Enter to issue traffic'),
                 kd.tcases.tkcd.tct_io.TctIo(None, ['write-pattern', 1, 4*4096, 0xd400 * 4096, 512*1024*1024, None, 64]),
                 #kd.tcases.tkcd.tct_panel.TctPanel( 1 ),
                 kd.tcases.helper.tch_pause.TchPause('enter_and_continue', 'Keep tkcd session'),
                ]
[test_suite_tkcd_cmd_err]
desc          = 'Test one io with LBA and blocks'
test_suite    = setup_default
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add', [0,1,2,3,4]),
# invalid key
                 kd.tcases.tkcd.tct_tile.TctTile([[1, 1, 'P_none']], pollute=True),
                 kd.tcases.tkcd.tct_io.TctIo('invalid key (3)', ['write-and-read-invalid', 1, 0 * 4096, 4 * 4096]),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, 1, 'P_none']]),
                 kd.tcases.tkcd.tct_io.TctIo('invalid key (3)', ['write-and-read', 1, 0 * 4096, 4 * 4096]),
# invalid size
                 kd.tcases.tkcd.tct_io.TctIo('invalid write ESIZE(1)', ['write-and-read-invalid', 1, 0 * 4096, 257 * 4096]),
                ]


#
#  dock protection 
#
[test_suite_tkcd_dock_kill_1]
# {{{
desc          = 'Test P__1x2 protection'
include_test_bench = cluster
whitelist     = [ kd.tcases.helper.tch_start.TchStart( ['tkcd.myDock.2'], None ), ]
# }}}

[test_suite_tkcd_dock_kill_2]
# {{{
desc          = 'Test P__1x2 protection'
include_test_bench = cluster
whitelist     = [ kd.tcases.helper.tch_start.TchStart( ['tkcd.myDock.2', 'tkcd.myDock.3'], None ), ]
# }}}

[test_suite_tkcd_dock_restart]
# {{{
desc          = 'Test P__1x2 protection'
include_test_bench = cluster
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd', 'gdb'], None ),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 #kd.tcases.helper.tch_pause.TchPause('yes_to_continue', 'Exit now'),
                ]
# }}}

[test_suite_tkcd_dock_backup]
# {{{
desc          = 'Test P__1x2 protection backup tkcd meta-info'
include_test_bench = cluster
whitelist     = [ kd.tcases.helper.tch_dhost.TchDhost('backup_tkcd'), ]
# }}}

[test_suite_tkcd_dock_restore]
# {{{
desc          = 'Test P__1x2 protection restore tkcd meta-info'
include_test_bench = cluster
whitelist     = [ kd.tcases.helper.tch_dhost.TchDhost('restore_tkcd'), ]
# }}}

[test_suite_tkcd_dock_curr]
curr_suite = tkcd_P__1x1_rebuild__on_ep0_replacement
desc       = 'run %(curr_suite)s test case'
test_suite = %(curr_suite)s

[test_suite_tkcd_dock_curr_2]
test_suite = tkcd_P__1x1_restart_rd
desc       = 'run %(test_suite)s test case'

[test_suite_tkcd_dock_debug]
protection_type = 'P__1x1'
tile_cnt = 1
include_test_bench = cluster_5
# {{{
desc          = 'Test %(protection_type)s protection, tile cnt: %(tile_cnt)s'
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
                 kd.tcases.helper.tch_make.TchMake('kdtkcd', '-DTKC_QUEUE_LOG_enable'),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 #kd.tcases.helper.tch_test_ctx.TchTestCtx( 'set', 'raw_disks_wlist', ['/dev/sda', '/dev/sdb'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 #kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )]),
                ] + [
# }}}
# IO
                 #kd.tcases.tkcd.tct_io.TctIo(None, ['write-and-read-pattern', 1, 128*1024, x*1025*1024*1024, None, None, 8]) for x in range( %(tile_cnt)s )
                ]

[test_suite_tkcd_P__1x1]
protection_type = 'P__1x1'
tile_cnt = 6
# {{{
desc          = 'Test %(protection_type)s protection, tile cnt: %(tile_cnt)s'
include_test_bench = cluster
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )]),
                ] + [
# IO
                 kd.tcases.tkcd.tct_io.TctIo(None, ['write-and-read-pattern', 1, 128*1024, x*1025*1024*1024, None, None, 8]) for x in range( %(tile_cnt)s )
                ]
# }}}


[test_suite_tkcd_P__1x1_restart_rd]
protection_type = 'P__1x1'
tile_cnt = 6
# {{{
desc          = 'Test %(protection_type)s protection, tile cnt: %(tile_cnt)s'
include_test_bench = cluster
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd', 'gdb'], None ),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 #kd.tcases.helper.tch_pause.TchPause('yes_to_continue', 'Exit now'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )]),
                ] \
                + [ kd.tcases.tkcd.tct_io.TctIo(None, ['read-pattern', 1, 128*1024, x*1025*1024*1024, None, None, 2]) for x in range( %(tile_cnt)s )
                ]
# }}}

[test_suite_tkcd_P__1x1_restart_wr]
protection_type = 'P__1x1'
tile_cnt = 6
# {{{
desc          = 'Test %(protection_type)s protection, tile cnt: %(tile_cnt)s'
include_test_bench = cluster
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd', 'gdb'], None ),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.helper.tch_pause.TchPause('yes_to_continue', 'Exit now'),
# write
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )]),
                ] + [
                 kd.tcases.tkcd.tct_io.TctIo(None, ['write-pattern', 1, 128*1024, x*1025*1024*1024, None, None, 2]) for x in range( %(tile_cnt)s )
                ]
# }}}

[test_suite_tkcd_P__1x1_ep2_exit_write]
protection_type = 'P__1x1'
exit_ep = 'tkcd.myDock.2'
tile_cnt = 6
# {{{
desc          = 'Test %(protection_type)s protection, tile cnt: %(tile_cnt)s, exit %(exit_ep)s'
include_test_bench = cluster
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range(  %(tile_cnt)s )]),
                ] + [
# IO
                 kd.tcases.tkcd.tct_io.TctIo(None, ['write-and-read-pattern', 1, 128*1024, x*1025*1024*1024, None, None, 8]) for x in range( %(tile_cnt)s )
                ] + [
                 kd.tcases.helper.tch_util.TchUtil('sleep', 5),
                 kd.tcases.helper.tch_start.TchStart( [%(exit_ep)s], None ),
# one write
                 kd.tcases.helper.tch_util.TchUtil('sleep', 5),
                 #kd.tcases.helper.tch_pause.TchPause('yes_to_continue', "Restart %(exit_ep)s ..."),
                 #kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range(  %(tile_cnt)s )]),
                ] + [
                 kd.tcases.tkcd.tct_io.TctIo(None, ['write-pattern', 1, 128*1024, x*1025*1024*1024, None, None, 1]) for x in range( %(tile_cnt)s )
                ]
# }}}

[test_suite_tkcd_P__1x1_ep3_exit_write]
# the tileset 2, access the [1M - 2M) region to avoid the data corruption via simple dFile at python side
protection_type = 'P__1x1'
exit_ep = 'tkcd.myDock.3'
tile_cnt = 6
# {{{
desc          = 'Test %(protection_type)s protection, tile cnt: %(tile_cnt)s, exit %(exit_ep)s'
include_test_bench = cluster
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )]),
                ] + [
# IO
                 kd.tcases.tkcd.tct_io.TctIo(None, ['write-and-read-pattern', 1, 128*1024, x*1025*1024*1024, None, None, 8]) for x in range( %(tile_cnt)s )
                ] + [
# kill tkcd.2
                 kd.tcases.helper.tch_util.TchUtil('sleep', 5),
                 kd.tcases.helper.tch_start.TchStart( [%(exit_ep)s], None ),
# one write
                 kd.tcases.helper.tch_util.TchUtil('sleep', 5),
                 #kd.tcases.helper.tch_pause.TchPause('yes_to_continue', "After exit the %(exit_ep)s ..."),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )]),
                ] + [
                 kd.tcases.tkcd.tct_io.TctIo(None, ['write-pattern', 1, 128*1024, x*1025*1024*1024, None, None, 1]) for x in range( %(tile_cnt)s )
                ]
# }}}

[test_suite_tkcd_P__1x1_timeout]
protection_type = 'P__1x1'
tile_cnt = 1
# {{{
desc          = 'Test %(protection_type)s protection, tile cnt: %(tile_cnt)s'
include_test_bench = cluster
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )]),
                ] \
# IO
                + [ kd.tcases.tkcd.tct_io.TctIo(None, ['write-pattern', 1, 128*1024, x*1025*1024*1024, None, None, 1]) for x in range( %(tile_cnt)s )
                ] \
                + [ #kd.tcases.tkcd.tct_io.TctIo(None, ['read-pattern',  1, 128*1024, x*1025*1024*1024, None, None, 8]) for x in range( %(tile_cnt)s )
                ]

# }}}

[test_suite_tkcd_P__1x1_partial_mesh]
protection_type = 'P__1x1'
tile_cnt = 2
# {{{
desc          = 'Test %(protection_type)s protection, tile cnt:%(tile_cnt)s'
include_test_bench = cluster
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )]),
# IO
                ] \
                + [ kd.tcases.tkcd.tct_io.TctIo(None, ['write-and-read-pattern', 1, 128*1024, x*1025*1024*1024, None, None, 8]) for x in range( %(tile_cnt)s )
                ] \
                + [
                 kd.tcases.helper.tch_util.TchUtil('sleep', 1),
# restart
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd', 'gdb'], None ),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
# create partial mesh
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add', [(1,3), (3,1)]),
                 #kd.tcases.helper.tch_pause.TchPause('yes_to_continue', 'Exit now'),
                 kd.tcases.helper.tch_util.TchUtil('sleep', 5),
# issue a wr
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )]),
                ] \
                + [ kd.tcases.tkcd.tct_io.TctIo(None, ['write-pattern', 1, 128*1024, x*1025*1024*1024, None, None, 8]) for x in range( %(tile_cnt)s )
                ] 
# }}}



[test_suite_tkcd_P__1x1_bind]
protection_type = 'P__1x1'
tile_cnt = 64
include_test_bench = cluster_8
# {{{
desc          = 'Test %(protection_type)s protection, tile cnt: %(tile_cnt)s'
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
                 kd.tcases.helper.tch_make.TchMake('kdtkcd', '-DTKC_RES_LESS_enable'),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )]),
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'ERROR.*BIND', matchCnt=0 ),
                ]
#}}}

[test_suite_tkcd_P__1x1_wr_one_tile]
protection_type = 'P__1x1'
tile_cnt = 1
tile_io_cnt = 128
include_test_bench = cluster_3
# {{{
desc          = 'Test %(protection_type)s protection, tile cnt:%(tile_cnt)s'
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
                 kd.tcases.helper.tch_make.TchMake('kdtkcd'),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )]),
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'ERROR.*BIND', matchCnt=0 ),
                ] \
                + [ kd.tcases.tkcd.tct_io.TctIo(None, ['write-pattern',  1, 128*1024, x*1025*1024*1024, None, None, %(tile_io_cnt)s]) for x in range( %(tile_cnt)s )
                ] \
                + [
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'ERROR.*IO', matchCnt=0 ),
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'dirty', matchCnt=0 ),
                ]
# }}}

[test_suite_tkcd_P__1x1_rw_one_tile]
protection_type = 'P__1x1'
tile_cnt = 1
tile_io_cnt = 128
include_test_bench = cluster_3
# {{{
desc          = 'Test %(protection_type)s protection, tile cnt:%(tile_cnt)s'
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
                 kd.tcases.helper.tch_make.TchMake('kdtkcd'),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )]),
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'ERROR.*BIND', matchCnt=0 ),
                ] \
                + [ kd.tcases.tkcd.tct_io.TctIo(None, ['write-pattern',  1, 128*1024, x*1025*1024*1024, None, None, %(tile_io_cnt)s]) for x in range( %(tile_cnt)s )
                ] \
                + [ kd.tcases.tkcd.tct_io.TctIo(None, ['read-pattern',  1, 128*1024, x*1025*1024*1024, None, None, %(tile_io_cnt)s]) for x in range( %(tile_cnt)s )
                ] \
                + [
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'ERROR.*IO', matchCnt=0 ),
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'dirty', matchCnt=0 ),
                ]
# }}}

[test_suite_tkcd_P__1x1_wr_more_tiles]
protection_type = 'P__1x1'
tile_cnt = 8
include_test_bench = cluster_8
# {{{
desc          = 'Test %(protection_type)s protection, tile cnt:%(tile_cnt)s'
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
                 kd.tcases.helper.tch_make.TchMake('kdtkcd', '-DTKC_RES_LESS_enable'),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )]),
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'ERROR.*BIND', matchCnt=0 ),
                ] \
                + [ kd.tcases.tkcd.tct_io.TctIo(None, ['write-pattern',  1, 128*1024, x*1025*1024*1024, None, None, 8]) for x in range( %(tile_cnt)s )
                ] \
                + [
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'ERROR.*IO', matchCnt=0 ),
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'dirty', matchCnt=0 ),
                ]
# }}}

[test_suite_tkcd_P__1x1_rw_more_tiles]
protection_type = 'P__1x1'
tile_cnt = 8
include_test_bench = cluster_8
# {{{
desc          = 'Test %(protection_type)s protection, tile cnt:%(tile_cnt)s'
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
                 kd.tcases.helper.tch_make.TchMake('kdtkcd', '-DTKC_RES_LESS_enable'),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )]),
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'ERROR.*BIND', matchCnt=0 ),
                ] \
                + [ kd.tcases.tkcd.tct_io.TctIo(None, ['write-pattern', 1, 128*1024, x*1025*1024*1024, None, None, 8]) for x in range( %(tile_cnt)s )
                ] \
                + [ kd.tcases.tkcd.tct_io.TctIo(None, ['read-pattern',  1, 128*1024, x*1025*1024*1024, None, None, 8]) for x in range( %(tile_cnt)s )
                ] \
                + [
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'ERROR.*IO', matchCnt=0 ),
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'dirty', matchCnt=0 ),
                ]
# }}}

[test_suite_tkcd_P__1x1_rd]
protection_type = 'P__1x1'
tile_cnt = 8
include_test_bench = cluster_8
# {{{
desc          = 'Test %(protection_type)s protection, tile cnt:%(tile_cnt)s'
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
                 kd.tcases.helper.tch_make.TchMake('kdtkcd', '-DTKC_RES_LESS_enable'),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )]),
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'ERROR.*BIND', matchCnt=0 ),
                ] \
                + [ kd.tcases.tkcd.tct_io.TctIo(None, ['read-pattern',  1, 128*1024, x*1025*1024*1024, None, None, 8]) for x in range( %(tile_cnt)s )
                ] 
# }}}

[test_suite_tkcd_P__1x1_restart]
protection_type = 'P__1x1'
tile_cnt = 1
tile_io_cnt = 8
include_test_bench = cluster_3
desc          = 'Restart to verify the meta-data and data'
# {{{
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
# force hostId/nodeId 2/33, 4 = (1 << 2)
                 kd.tcases.helper.tch_make.TchMake('kdtkcd', '-DTKC_SKIP_RECONN_debug -DTKC_PERSIST_LOG_enable -DTKC_SYNC_LOG_enable'),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )]),
                ] \
# IO
                + [ kd.tcases.tkcd.tct_io.TctIo(None, ['write-and-read-pattern', \
                                1, 128*1024, x*1025*1024*1024, None, None, %(tile_io_cnt)s]) for x in range( %(tile_cnt)s )
                ] \
                + [ \
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.helper.tch_util.TchUtil('sleep', 3),
                ] \
# IO
                + [ \
                # kd.tcases.tkcd.tct_io.TctIo(None, ['read-pattern', 1, 128*1024, x*1025*1024*1024, None, None, %(tile_io_cnt)s]) for x in range( %(tile_cnt)s )
                ]
# }}}

[test_suite_tkcd_P__1x1_tileset_1_dirty__forward_read]
protection_type = 'P__1x1'
tile_cnt = 1
include_test_bench = cluster_3
desc          = 'dock-read, ep0 dirty, forward node-read to ep1 => READ OK'
# {{{
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
                 kd.tcases.helper.tch_make.TchMake('kdtkcd', '-DTKC_SKIP_REBUILD'),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )]),
                 kd.tcases.helper.tch_start.TchStart( ['tkcd.myDock.33'], None ),
                 kd.tcases.helper.tch_util.TchUtil('sleep', 3),
                ] \
# IO
                + [ kd.tcases.tkcd.tct_io.TctIo(None, ['write-pattern', 1, 128*1024, x*1025*1024*1024, None, None, 2]) for x in range( %(tile_cnt)s )
                ] \
                + [ \
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd.33'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.helper.tch_util.TchUtil('sleep', 3),
                ] \
                + [ kd.tcases.tkcd.tct_io.TctIo(None, ['read-pattern', 1, 128*1024, x*1025*1024*1024, None, None, 2]) for x in range( %(tile_cnt)s )
                ]
# }}}

[test_suite_tkcd_P__1x1_tileset_1_dirty__forward_read__ep1_tout]
protection_type = 'P__1x1'
tile_cnt = 1
include_test_bench = cluster_3
desc          = 'dock-read, ep0 dirty, forward node-read to ep1, ep1-node-read timeout => READ ERROR'
# {{{
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
                 kd.tcases.helper.tch_make.TchMake('kdtkcd', '-DTKC_SKIP_REBUILD -DKC_SKIP_RECONN_debug'),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )]),
                 kd.tcases.helper.tch_start.TchStart( ['tkcd.myDock.1$'], None ),
                 kd.tcases.helper.tch_util.TchUtil('sleep', 3),
                ] \
# IO
                + [ kd.tcases.tkcd.tct_io.TctIo(None, ['write-pattern', 1, 128*1024, x*1025*1024*1024, None, None, 1]) for x in range( %(tile_cnt)s )
                ] \
                + [ \
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
# force hostId/nodeId 2/33, 4 = (1 << 2)
                 kd.tcases.helper.tch_make.TchMake('kdtkcd', '-DTKC_SKIP_REBUILD -DTKC_PERSIST_LOG_enable -DTKC_NODE_NIO_TX_DELAY_test=4'),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.helper.tch_util.TchUtil('sleep', 3),
                ] \
                + [ kd.tcases.tkcd.tct_io.TctIo(None, ['read-invalid', 1, 128*1024, x*1025*1024*1024]) for x in range( %(tile_cnt)s )
                ]
# }}}

[test_suite_tkcd_P__1x1_write_ep0_error]
protection_type = 'P__1x1'
tile_cnt = 1
include_test_bench = cluster_3
desc          = 'dockWrite, ep0 error => write OK and dirty_ep0'
# {{{
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
# force hostId/nodeId 1/0, 1 = (1 << 0)
                 kd.tcases.helper.tch_make.TchMake('kdtkcd', '-DTKC_SKIP_REBUILD -DTKC_NODE_NIO_TX_ERROR_test=1'),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )]),
                ] \
# IO
                + [ kd.tcases.tkcd.tct_io.TctIo(None, ['write-pattern', 1, 128*1024, x*1025*1024*1024, None, None, 1]) for x in range( %(tile_cnt)s )
                ] \
                + [
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'recvs .* TILE_GRP_ADD rc 1\(.* ep0_dirty', matchCnt=2 ),
                ]
# }}}

[test_suite_tkcd_P__1x1_write_ep1_error]
protection_type = 'P__1x1'
tile_cnt = 1
include_test_bench = cluster_3
desc          = 'dockWrite, ep1 error => write OK and dirty_ep1'
# {{{
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
# force hostId/nodeId 2/33, 4 = (1 << 2)
                 kd.tcases.helper.tch_make.TchMake('kdtkcd', '-DTKC_SKIP_REBUILD -DTKC_NODE_NIO_TX_ERROR_test=4'),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )]),
                ] \
# IO
                + [ kd.tcases.tkcd.tct_io.TctIo(None, ['write-pattern', 1, 128*1024, x*1025*1024*1024, None, None, 1]) for x in range( %(tile_cnt)s )
                ] \
                + [
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'recvs .* TILE_GRP_ADD rc 1\(.* ep1_dirty', matchCnt=2 ),
                ]
# }}}

[test_suite_tkcd_P__1x1_write_no_ep0]
protection_type = 'P__1x1'
tile_cnt = 1
include_test_bench = cluster_3
desc          = 'dockWrite, no ep0 => write OK and dirty_ep0'
# {{{
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
# force hostId/nodeId 2/33, 4 = (1 << 2)
                 kd.tcases.helper.tch_make.TchMake('kdtkcd', '-DTKC_SKIP_RECONN_debug'),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )]),
                 kd.tcases.helper.tch_start.TchStart( ['tkcd.myDock.1$'], None ),
                 kd.tcases.helper.tch_util.TchUtil('sleep', 3),
                ] \
# IO
                + [ kd.tcases.tkcd.tct_io.TctIo(None, ['write-pattern', 1, 128*1024, x*1025*1024*1024, None, None, 1]) for x in range( %(tile_cnt)s )
                ] \
                + [
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'recvs .* TILE_GRP_ADD rc 1\(.* ep0_dirty', matchCnt=1 ),
                ]
# }}}

[test_suite_tkcd_P__1x1_write_no_ep1]
protection_type = 'P__1x1'
tile_cnt = 1
include_test_bench = cluster_3
desc          = 'dockWrite, no ep0 => write OK and dirty_ep1'
# {{{
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
# force hostId/nodeId 2/33, 4 = (1 << 2)
                 kd.tcases.helper.tch_make.TchMake('kdtkcd', '-DTKC_SKIP_RECONN_debug'),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )]),
                 kd.tcases.helper.tch_start.TchStart( ['tkcd.myDock.33'], None ),
                 kd.tcases.helper.tch_util.TchUtil('sleep', 3),
                ] \
# IO
                + [ kd.tcases.tkcd.tct_io.TctIo(None, ['write-pattern', 1, 128*1024, x*1025*1024*1024, None, None, 1]) for x in range( %(tile_cnt)s )
                ] \
                + [
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'recvs .* TILE_GRP_ADD rc 1\(.* ep1_dirty', matchCnt=1 ),
                ]
# }}}

[test_suite_tkcd_P__1x1_write_no_ep2]
protection_type = 'P__1x1'
tile_cnt = 1
include_test_bench = cluster_3
desc          = 'dockWrite, no ep2 => write OK and no dirty'
# {{{
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
# force hostId/nodeId 2/33, 4 = (1 << 2)
                 kd.tcases.helper.tch_make.TchMake('kdtkcd', '-DTKC_SKIP_RECONN_debug'),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )]),
                 kd.tcases.helper.tch_start.TchStart( ['tkcd.myDock.17'], None ),
                 kd.tcases.helper.tch_util.TchUtil('sleep', 3),
                ] \
# IO
                + [ kd.tcases.tkcd.tct_io.TctIo(None, ['write-pattern', 1, 128*1024, x*1025*1024*1024, None, None, 1]) for x in range( %(tile_cnt)s )
                ] \
                + [
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'dirty', matchCnt=0 ),
                ]
# }}}

[test_suite_tkcd_P__1x1_write_no_ep0_ep2]
protection_type = 'P__1x1'
tile_cnt = 1
include_test_bench = cluster_3
desc          = 'dockWrite, no ep0 ep2 => write Error and no dirty'
# {{{
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
# force hostId/nodeId 2/33, 4 = (1 << 2)
                 kd.tcases.helper.tch_make.TchMake('kdtkcd', '-DTKC_SKIP_RECONN_debug'),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )]),
                 kd.tcases.helper.tch_start.TchStart( ['tkcd.myDock.1$', 'tkcd.myDock.17$'], None ),
                 kd.tcases.helper.tch_util.TchUtil('sleep', 3),
                ] \
# IO
                + [ kd.tcases.tkcd.tct_io.TctIo(None, ['write-invalid', 1, 128*1024, x*1025*1024*1024]) for x in range( %(tile_cnt)s )
                ] \
                + [
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'dirty', matchCnt=0 ),
                ]
# }}}

[test_suite_tkcd_P__1x1_write_no_ep1_ep2]
protection_type = 'P__1x1'
tile_cnt = 1
include_test_bench = cluster_3
desc          = 'dockWrite, no ep1 ep2 => write Error and no dirty'
# {{{
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
# force hostId/nodeId 2/33, 4 = (1 << 2)
                 kd.tcases.helper.tch_make.TchMake('kdtkcd', '-DTKC_SKIP_RECONN_debug'),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )]),
                 kd.tcases.helper.tch_start.TchStart( ['tkcd.myDock.33$', 'tkcd.myDock.17$'], None ),
                 kd.tcases.helper.tch_util.TchUtil('sleep', 3),
                ] \
# IO
                + [ kd.tcases.tkcd.tct_io.TctIo(None, ['write-invalid', 1, 128*1024, x*1025*1024*1024]) for x in range( %(tile_cnt)s )
                ] \
                + [
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'dirty', matchCnt=0 ),
                ]
# }}}

[test_suite_tkcd_P__1x1_write_ep0_ep1_error]
protection_type = 'P__1x1'
tile_cnt = 1
include_test_bench = cluster_3
desc          = 'dockWrite, EP0 node-write error, EP1 node-write error => write ERROR and noone dirty'
# {{{
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
# force hostId/nodeId 1/0 2/33, 5 = (1 << 0) | (1 << 2)
                 kd.tcases.helper.tch_make.TchMake('kdtkcd', '-DTKC_SKIP_REBUILD -DTKC_NODE_NIO_TX_ERROR_test=5'),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )]),
                ] \
# IO
                + [ kd.tcases.tkcd.tct_io.TctIo('write-error', ['write-invalid', 1, 128*1024, x*1025*1024*1024]) for x in range( %(tile_cnt)s ) \
                ] \
                + [
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'dirty', matchCnt=0 ),
                ]
# }}}

[test_suite_tkcd_P__1x1_write_ep1_error__no_ep2]
protection_type = 'P__1x1'
tile_cnt = 1
include_test_bench = cluster_3
desc          = 'dockWrite, EP1 node-write error, EP2 exited => write OK and dirty_ep1'
# {{{
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
# force hostId/nodeId 2/33, 4 = (1 << 2)
                 kd.tcases.helper.tch_make.TchMake('kdtkcd', '-DTKC_SKIP_REBUILD -DTKC_SKIP_RECONN_debug -DTKC_NODE_NIO_TX_ERROR_test=4'),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )]),
                 kd.tcases.helper.tch_start.TchStart( ['tkcd.myDock.17'], None ),
                 kd.tcases.helper.tch_util.TchUtil('sleep', 3),
                ] \
# IO
                + [ kd.tcases.tkcd.tct_io.TctIo(None, ['write-pattern', 1, 128*1024, x*1025*1024*1024, None, None, 1]) for x in range( %(tile_cnt)s )
                ] \
                + [
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'recvs .* TILE_GRP_ADD rc 1\(.* ep1_dirty,inused', matchCnt=1 ),
                ]
# }}}

[test_suite_tkcd_P__1x1_rebuild__on_start]
protection_type = 'P__1x1'
tile_cnt = 1
tile_io_cnt = 1
include_test_bench = cluster_3
desc          = 'dirty tile on ep1'
# {{{
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
# force hostId/nodeId 2/33, 4 = (1 << 2)
                 kd.tcases.helper.tch_make.TchMake('kdtkcd', '-DTKC_SKIP_RECONN_debug -DTKC_PERSIST_LOG_enable -DTKC_RBD_LOG_enable'),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )]),
                ] \
# IO
                + [ kd.tcases.tkcd.tct_io.TctIo(None, ['write-and-read-pattern', \
                                1, 128*1024, x*1025*1024*1024, None, None, %(tile_io_cnt)s]) for x in range( %(tile_cnt)s )
                ] \
                + [ \
# kill ep1
                 kd.tcases.helper.tch_start.TchStart( ['tkcd.myDock.33'], None ),
                 kd.tcases.helper.tch_util.TchUtil('sleep', 3),
                ] \
# IO
                + [ kd.tcases.tkcd.tct_io.TctIo(None, ['write-pattern', \
                                1, 128*1024, x*1025*1024*1024, None, None, %(tile_io_cnt)s]) for x in range( %(tile_cnt)s )
                ] \
                + [ \
# restart
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.helper.tch_util.TchUtil('sleep', 6),
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'ep1_dirty', matchCnt=2 ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.helper.tch_util.TchUtil('sleep', 10),
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'Rebuild data for dirty remote tileSet is done', matchCnt=1 ),
# restart
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'dirty', matchCnt=0 ),
                ]
# }}}

[test_suite_tkcd_P__1x1_rebuild__on_disk_deletion]
protection_type = 'P__1x1'
tile_cnt = 1
tile_io_cnt = 1
include_test_bench = cluster_3
desc          = 'remove disk on ep1'
# {{{
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
# force hostId/nodeId 2/33, 4 = (1 << 2)
                 kd.tcases.helper.tch_make.TchMake('kdtkcd', '-DTKC_SKIP_RECONN_debug -DTKC_PERSIST_LOG_enable -DTKC_RBD_LOG_enable'),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )]),
                ] \
# IO
                + [ kd.tcases.tkcd.tct_io.TctIo(None, ['write-and-read-pattern', \
                                1, 128*1024, x*1025*1024*1024, None, None, %(tile_io_cnt)s]) for x in range( %(tile_cnt)s )
                ] \
                + [ \
# delete mIdx1 at node 33
                 kd.tcases.tkcd.tct_device.TctDevice('del', 5),
                 kd.tcases.helper.tch_util.TchUtil('sleep', 10),
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'Start Rebuild transaction for deleted disk'),
                 kd.tcases.helper.tch_util.TchUtil('sleep', 10),
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'Start Dock Rebuild transaction for deleted disk'),
                 kd.tcases.helper.tch_util.TchUtil('sleep', 10),
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'Node Rebuild data for dirty remote tileSet is done'),
                ]
# }}}

[test_suite_tkcd_P__1x1_rebuild__on_ep0_replacement]
protection_type = 'P__1x1'
tile_cnt = 1
tile_io_cnt = 8
include_test_bench = cluster_3
target_nodeId = 1
desc          = 'replace ep0 node'
# {{{
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
# force hostId/nodeId 2/33, 4 = (1 << 2)
                 kd.tcases.helper.tch_make.TchMake('kdtkcd', '-DTKC_SKIP_RECONN_debug -DTKC_PERSIST_LOG_enable -DTKC_RBD_LOG_enable -DTKC_SYNC_LOG_enable'),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )]),
                ] \
# IO
                + [ kd.tcases.tkcd.tct_io.TctIo(None, ['write-and-read-pattern', \
                                1, 128*1024, x*1025*1024*1024, None, None, %(tile_io_cnt)s]) for x in range( %(tile_cnt)s )
                ] \
                + [ \
# kill ep1
                 kd.tcases.helper.tch_start.TchStart( ['tkcd.myDock.%(target_nodeId)s$'], None ),
                 kd.tcases.helper.tch_util.TchUtil('sleep', 3),
# reset_tkcd for target dockNode only
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd', %(target_nodeId)s),
# start ep1
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd.%(target_nodeId)s'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.helper.tch_util.TchUtil('sleep', 3),
                 kd.tcases.helper.tch_util.TchUtil('sleep', 10),
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'Rebuild data for dirty remote tileSet is done', matchCnt=1 ),
                ] \
# IO
                + [ \
                 kd.tcases.tkcd.tct_io.TctIo(None, ['read-pattern', 1, 128*1024, x*1025*1024*1024, None, None, %(tile_io_cnt)s]) for x in range( %(tile_cnt)s )
                ]
# }}}

[test_suite_tkcd_P__1x1_rebuild__on_ep1_replacement]
protection_type = 'P__1x1'
tile_cnt = 1
tile_io_cnt = 8
include_test_bench = cluster_3
target_nodeId = 33
desc          = 'replace ep1 node'
# {{{
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
# force hostId/nodeId 2/33, 4 = (1 << 2)
                 kd.tcases.helper.tch_make.TchMake('kdtkcd', '-DTKC_SKIP_RECONN_debug -DTKC_PERSIST_LOG_enable -DTKC_RBD_LOG_enable -DTKC_SYNC_LOG_enable'),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )]),
                ] \
# IO
                + [ kd.tcases.tkcd.tct_io.TctIo(None, ['write-and-read-pattern', \
                                1, 128*1024, x*1025*1024*1024, None, None, %(tile_io_cnt)s]) for x in range( %(tile_cnt)s )
                ] \
                + [ \
# kill ep1
                 kd.tcases.helper.tch_start.TchStart( ['tkcd.myDock.%(target_nodeId)s$'], None ),
                 kd.tcases.helper.tch_util.TchUtil('sleep', 3),
# reset_tkcd for target dockNode only
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd', %(target_nodeId)s),
# start ep1
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd.%(target_nodeId)s'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.helper.tch_util.TchUtil('sleep', 3),
                 kd.tcases.helper.tch_util.TchUtil('sleep', 10),
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'Rebuild data for dirty remote tileSet is done', matchCnt=1 ),
                ] \
# IO
                + [ \
                 kd.tcases.tkcd.tct_io.TctIo(None, ['read-pattern', 1, 128*1024, x*1025*1024*1024, None, None, %(tile_io_cnt)s]) for x in range( %(tile_cnt)s )
                ]
# }}}

[test_suite_tkcd_P__1x1_rebuild__on_ep2_replacement]
protection_type = 'P__1x1'
tile_cnt = 1
tile_io_cnt = 8
include_test_bench = cluster_3
target_nodeId = 17
desc          = 'replace ep2 node'
# {{{
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
                 kd.tcases.helper.tch_make.TchMake('kdtkcd', '-DTKC_SKIP_RECONN_debug -DTKC_PERSIST_LOG_enable -DTKC_RBD_LOG_enable -DTKC_SYNC_LOG_enable'),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )]),
                ] \
# IO
                + [ kd.tcases.tkcd.tct_io.TctIo(None, ['write-and-read-pattern', \
                                1, 128*1024, x*1025*1024*1024, None, None, %(tile_io_cnt)s]) for x in range( %(tile_cnt)s )
                ] \
                + [ \
# kill ep2
                 kd.tcases.helper.tch_start.TchStart( ['tkcd.myDock.%(target_nodeId)s'$], None ),
                 kd.tcases.helper.tch_util.TchUtil('sleep', 3),
# reset_tkcd for target dockNode only
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd', %(target_nodeId)s),
# start ep1
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd.%(target_nodeId)s'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.helper.tch_util.TchUtil('sleep', 3),
                 kd.tcases.helper.tch_util.TchUtil('sleep', 10),
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'Rebuild data for dirty remote tileSet is done', matchCnt=0 ),
                ] \
# IO
                + [ \
                 kd.tcases.tkcd.tct_io.TctIo(None, ['read-pattern', 1, 128*1024, x*1025*1024*1024, None, None, %(tile_io_cnt)s]) for x in range( %(tile_cnt)s )
                ] \
                + [ \
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                ]
# }}}

[test_suite_tkcd_P__1x1_write_ep1_all_error]
protection_type = 'P__1x1'
tile_cnt = 1
include_test_bench = cluster_3
desc          = 'dockWrite, EP1 node-write error, EP1 upd-tile-grp error => write OK and dirty_ep1'
# {{{
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
# force hostId/nodeId 2/33, 4 = (1 << 2)
                 kd.tcases.helper.tch_make.TchMake('kdtkcd', '-DTKC_SKIP_REBUILD -DTKC_SKIP_RECONN_debug -DTKC_NODE_NIO_TX_ERROR_test=4 -DTKC_NODE_TG_UPD_TX_ERROR_test=4 -DTKC_SYNC_LOG_enable'),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )]),
                 #kd.tcases.helper.tch_start.TchStart( ['tkcd.myDock.17'], None ),
                 #kd.tcases.helper.tch_util.TchUtil('sleep', 3),
                ] \
# IO
                + [ kd.tcases.tkcd.tct_io.TctIo(None, ['write-pattern', 1, 128*1024, x*1025*1024*1024, None, None, 1]) for x in range( %(tile_cnt)s )
                ] \
                + [
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'recvs .* TILE_GRP_ADD rc 1\(.* ep1_dirty,inused', matchCnt=1 ),
                ]
# }}}

[test_suite_tkcd_P__1x1_dock_bind__host2_host3_bind_error]
protection_type = 'P__1x1'
tile_cnt = 1
include_test_bench = cluster_5
desc          = 'DockBind Error test: NodeBind Error, re-NodeBind Error, re-NodeBind OK '
# {{{
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
# force hostId/nodeId 2/33 and 3/49, 12 = (1 << 2) | (1 << 3)
                 kd.tcases.helper.tch_make.TchMake('kdtkcd', '-DTKC_NODE_NB_TX_ERROR_test=12'),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )]),
                 kd.tcases.helper.tch_util.TchUtil('sleep', 6),
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'ERROR: .* sends .* NODE_BIND rc 2\(e-force\)', matchCnt=2 ),
                ]
# }}}

[test_suite_tkcd_P__1x1_dock_bind__host2_host3_bind_tout]
protection_type = 'P__1x1'
tile_cnt = 1
include_test_bench = cluster_5
desc          = 'DockBind Error test: NodeBind Timeout, re-NodeBind Timeout, re-NodeBind OK '
# {{{
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
# force hostId/nodeId 2/33 and 3/49, 12 = (1 << 2) | (1 << 3)
                 kd.tcases.helper.tch_make.TchMake('kdtkcd', '-DTKC_NODE_NB_TX_DELAY_test=12'),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )]),
                 kd.tcases.helper.tch_util.TchUtil('sleep', 10),
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'recvs DROP-cmd NODE_BIND ', matchCnt=2 ),
                ]
# }}}

[test_suite_tkcd_P__1x1_dock_bind__host2_host3_host4_bind_error]
protection_type = 'P__1x1'
tile_cnt = 1
include_test_bench = cluster_5
# {{{
desc          = 'DockBind Error test: NodeBind Error, re-NodeBind Error, re-NodeBind Error'
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
# force hostId/nodeId 2/33, 3/49 and 4/65, 28 = (1 << 2) | (1 << 3) | ( 1 << 4 )
                 kd.tcases.helper.tch_make.TchMake('kdtkcd', '-DTKC_NODE_NB_TX_ERROR_test=28'),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )], error=True),
                 kd.tcases.helper.tch_util.TchUtil('sleep', 3),
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'ERROR:.*--_01s.* sends .* DOCK_BIND rc 2\(e-space\)' ),
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'PK-cmd NODE_UNBIND' )
                ]
# }}}

[test_suite_tkcd_P__1x1_dock_bind__host2_host3_host4_bind_tout]
protection_type = 'P__1x1'
tile_cnt = 1
include_test_bench = cluster_5
# {{{
desc          = 'DockBind Error test: NodeBind Error, re-NodeBind Error, re-NodeBind Error'
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
# force hostId/nodeId 2/33, 3/49 and 4/65, 28 = (1 << 2) | (1 << 3) | ( 1 << 4 )
                 kd.tcases.helper.tch_make.TchMake('kdtkcd', '-DTKC_NODE_NB_TX_DELAY_test=28'),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )], error=True),
                 kd.tcases.helper.tch_util.TchUtil('sleep', 10),
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'recvs DROP-cmd NODE_BIND ', matchCnt=3 ),
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'PK-cmd NODE_UNBIND' )
                ]
# }}}

[test_suite_tkcd_P__1x1_dock_bind__ep0_tg_tout]
protection_type = 'P__1x1'
tile_cnt = 1
include_test_bench = cluster_3
desc          = 'DockBind test, ep-new-tile-group Timeout: DockBind OK, ep0 has no timeout sheme'
# {{{
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
# force hostId/nodeId 0/1, 1 = (1 << 0)
                 kd.tcases.helper.tch_make.TchMake('kdtkcd', '-DTKC_NODE_TG_NEW_TX_DELAY_test=1'),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )]),
                 kd.tcases.helper.tch_util.TchUtil('sleep', 10),
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'timeout .*cmd', matchCnt=0 ),
                ]
# }}}

[test_suite_tkcd_P__1x1_dock_bind__ep1_tg_tout]
protection_type = 'P__1x1'
tile_cnt = 1
include_test_bench = cluster_3
desc          = 'DockBind test, ep1-new-tile-group Timeout: DockBind OK, ep1 tile-group may out-of-sync'
# {{{
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
# force hostId/nodeId 2/33, 4 = (1 << 2)
                 kd.tcases.helper.tch_make.TchMake('kdtkcd', '-DTKC_NODE_TG_NEW_TX_DELAY_test=4'),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )]),
                 kd.tcases.helper.tch_util.TchUtil('sleep', 10),
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'recvs DROP-cmd TILE_GRP_ADD ', matchCnt=1 ),
                ]
# }}}

[test_suite_tkcd_P__1x1_dock_bind__ep2_tg_tout]
protection_type = 'P__1x1'
tile_cnt = 1
include_test_bench = cluster_3
desc          = 'DockBind test, ep2-new-tile-group Timeout: DockBind OK, ep2 tile-group may out-of-sync'
# {{{
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
# force hostId/nodeId 1/17, 2 = (1 << 1)
                 kd.tcases.helper.tch_make.TchMake('kdtkcd', '-DTKC_NODE_TG_NEW_TX_DELAY_test=2'),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )]),
                 kd.tcases.helper.tch_util.TchUtil('sleep', 10),
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'recvs DROP-cmd TILE_GRP_ADD ', matchCnt=1 ),
                ]
# }}}

[test_suite_tkcd_P__1x1_dock_bind__ep1_ep2_tg_tout]
protection_type = 'P__1x1'
tile_cnt = 1
include_test_bench = cluster_3
desc          = 'DockBind test, ep1/ep2-new-tile-group Timeout: DockBind OK, ep1/ep2 tile-group may out-of-sync'
# {{{
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
# force hostId/nodeId 2/33 1/17, 6 = (1 << 2) | (1 << 1)
                 kd.tcases.helper.tch_make.TchMake('kdtkcd', '-DTKC_NODE_TG_NEW_TX_DELAY_test=6'),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )]),
                 kd.tcases.helper.tch_util.TchUtil('sleep', 10),
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'recvs DROP-cmd TILE_GRP_ADD ', matchCnt=2 ),
                ]
# }}}

[test_suite_tkcd_P__1x1_dock_bind__ep0_ep1_ep2_tg_tout]
protection_type = 'P__1x1'
tile_cnt = 1
include_test_bench = cluster_3
desc          = 'DockBind test, ep0/ep1/ep2-new-tile-group Timeout: DockBind error'
# {{{
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
# force hostId/nodeId 0/1 2/33 1/17, 7 = (1 << 0) | (1 << 2) | (1 << 1)
                 kd.tcases.helper.tch_make.TchMake('kdtkcd', '-DTKC_NODE_TG_NEW_TX_DELAY_test=7'),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )]),
                 kd.tcases.helper.tch_util.TchUtil('sleep', 10),
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'recvs DROP-cmd TILE_GRP_ADD ', matchCnt=2 ),
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'timeout .*cmd', matchCnt=2 ),
                ]
# }}}

[test_suite_tkcd_P__1x1_dock_bind__host1_bind_error]
protection_type = 'P__1x1'
tile_cnt = 1
include_test_bench = cluster_5
# {{{
desc          = 'DockBind Error test: DockBind error if local NodeBind error'
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
# force hostId/nodeId 0/1, 1 = (1 << 0)
                 kd.tcases.helper.tch_make.TchMake('kdtkcd', '-DTKC_NODE_NB_TX_ERROR_test=1'),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )], error=True),
                 kd.tcases.helper.tch_util.TchUtil('sleep', 3),
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'ERROR: .* sends .* DOCK_BIND rc 2\(e-space\)' ),
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'PK-cmd NODE_UNBIND' )
                ]
# }}}

[test_suite_tkcd_P__1x1_dock_bind__ep1_tg_error]
protection_type = 'P__1x1'
tile_cnt = 1
include_test_bench = cluster_3
desc          = 'DockBind, ep1-tile-group-add error ==> DockBind-OK ep1-tile-group is out-of-sync'
# {{{
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
# force hostId/nodeId 2/33, 4 = (1 << 2)
                 kd.tcases.helper.tch_make.TchMake('kdtkcd', '-DTKC_NODE_TG_NEW_TX_ERROR_test=4'),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )]),
                 kd.tcases.helper.tch_util.TchUtil('sleep', 3),
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'ERROR: .* recvs .* TILE_GRP_ADD rc 2\(e-force\)', matchCnt=1 ),
                ]
# }}}

[test_suite_tkcd_P__1x1_dock_bind__ep2_tg_error]
protection_type = 'P__1x1'
tile_cnt = 1
include_test_bench = cluster_3
desc          = 'DockBind, ep2-tile-group-add error ==> DockBind-OK ep2-tile-group is out-of-sync'
# {{{
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
# force hostId/nodeId 1/17, 2 = (1 << 1)
                 kd.tcases.helper.tch_make.TchMake('kdtkcd', '-DTKC_NODE_TG_NEW_TX_ERROR_test=2'),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )]),
                 kd.tcases.helper.tch_util.TchUtil('sleep', 3),
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'ERROR: .* recvs .* TILE_GRP_ADD rc 2\(e-force\)', matchCnt=1 ),
                ]
# }}}

[test_suite_tkcd_P__1x1_dock_bind__ep1_ep2_tg_error]
protection_type = 'P__1x1'
tile_cnt = 1
include_test_bench = cluster_3
desc          = 'DockBind, ep1/ep2-tile-group-add error ==> DockBind-OK ep1/ep2-tile-group is out-of-sync'
# {{{
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
# force hostId/nodeId 2/33 1/17, 6 = (1 << 2) | (1 << 1)
                 kd.tcases.helper.tch_make.TchMake('kdtkcd', '-DTKC_NODE_TG_NEW_TX_ERROR_test=6'),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )]),
                 kd.tcases.helper.tch_util.TchUtil('sleep', 3),
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'ERROR: .* recvs .* TILE_GRP_ADD rc 2\(e-force\)', matchCnt=2 ),
                ]
# }}}

[test_suite_tkcd_P__1x1_dock_bind__ep0_ep1_ep2_tg_error]
protection_type = 'P__1x1'
tile_cnt = 1
include_test_bench = cluster_3
desc          = 'DockBind, ep1/ep2-tile-group-add error ==> DockBind-ERROR'
# {{{
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
# force hostId/nodeId 0/1 2/33 1/17, 7 = (1 << 0) | (1 << 2) | (1 << 1)
                 kd.tcases.helper.tch_make.TchMake('kdtkcd', '-DTKC_NODE_TG_NEW_TX_ERROR_test=7'),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )], error=True),
                 kd.tcases.helper.tch_util.TchUtil('sleep', 3),
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'ERROR: .* recvs .* TILE_GRP_ADD rc 2\(e-force\)', matchCnt=2 ),
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'ERROR:.*--_01s.* sends .* DOCK_BIND rc 2\(e-persist\)' ),
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'PK-cmd NODE_UNBIND' )
                ]
# }}}

[test_suite_tkcd_P__1x1_write_ep1_tout]
protection_type = 'P__1x1'
tile_cnt = 1
include_test_bench = cluster_3
desc          = 'dockWrite, ep1-node-write timeout => write OK and dirty_ep1'
# {{{
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
# force hostId/nodeId 2/33, 4 = (1 << 2)
                 kd.tcases.helper.tch_make.TchMake('kdtkcd', '-DTKC_SKIP_REBUILD -DTKC_NODE_NIO_TX_DELAY_test=4'),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )]),
                ] \
# IO
                + [ kd.tcases.tkcd.tct_io.TctIo(None, ['write-pattern', 1, 128*1024, x*1025*1024*1024, None, None, 1]) for x in range( %(tile_cnt)s )
                ] \
                + [
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'recvs .* TILE_GRP_ADD rc 1\(.* ep1_dirty', matchCnt=2 ),
                ]
# }}}

[test_suite_tkcd_P__1x1_write_ep1_tout__ep1_tg_tout]
protection_type = 'P__1x1'
tile_cnt = 1
include_test_bench = cluster_3
desc          = 'dockWrite, ep1-node-write timeout, ep1-tile-grp-update timeout => write OK and dirty_ep1'
# {{{
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
# force hostId/nodeId 2/33, 4 = (1 << 2)
                 kd.tcases.helper.tch_make.TchMake('kdtkcd', '-DTKC_SKIP_REBUILD -DTKC_NODE_NIO_TX_DELAY_test=4 -DTKC_NODE_TG_UPD_TX_DELAY_test=4'),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )]),
                ] \
# IO
                + [ kd.tcases.tkcd.tct_io.TctIo(None, ['write-pattern', 1, 128*1024, x*1025*1024*1024, None, None, 1]) for x in range( %(tile_cnt)s )
                ] \
                + [
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'recvs .* TILE_GRP_ADD rc 1\(.* ep1_dirty', matchCnt=1 ),
                ]
# }}}

[test_suite_tkcd_P__1x1_write_ep1_tout__ep2_tg_tout]
protection_type = 'P__1x1'
tile_cnt = 1
include_test_bench = cluster_3
desc          = 'dockWrite, ep1-node-write timeout, ep2-tile-grp-update timeout => write OK and dirty_ep1'
# {{{
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
# force hostId/nodeId 1/17, 2 = (1 << 1)
                 kd.tcases.helper.tch_make.TchMake('kdtkcd', '-DTKC_SKIP_REBUILD -DTKC_NODE_NIO_TX_DELAY_test=4 -DTKC_NODE_TG_UPD_TX_DELAY_test=2'),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )]),
                ] \
# IO
                + [ kd.tcases.tkcd.tct_io.TctIo(None, ['write-pattern', 1, 128*1024, x*1025*1024*1024, None, None, 1]) for x in range( %(tile_cnt)s )
                ] \
                + [
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'recvs .* TILE_GRP_ADD rc 1\(.* ep1_dirty', matchCnt=1 ),
                ]
# }}}

[test_suite_tkcd_P__1x1_write_ep1_tout__ep1_ep2_tg_tout]
protection_type = 'P__1x1'
tile_cnt = 1
include_test_bench = cluster_3
desc          = 'dockWrite, ep1-node-write timeout, ep1-/ep2-tile-grp-update timeout => write ERROR and dirty_ep1'
# {{{
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
# force hostId/nodeId 1/17, 2/33, 6 = (1 << 1) | (1 << 2 )
                 kd.tcases.helper.tch_make.TchMake('kdtkcd', '-DTKC_SKIP_REBUILD -DTKC_NODE_NIO_TX_DELAY_test=4 -DTKC_NODE_TG_UPD_TX_DELAY_test=6'),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt)s )]),
                ] \
# IO
                + [ kd.tcases.tkcd.tct_io.TctIo(None, ['write-invalid', 1, 128*1024, x*1025*1024*1024]) for x in range( %(tile_cnt)s )
                ] \
                + [
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'recvs .* TILE_GRP_ADD rc 1\(.* ep1_dirty', matchCnt=0 ),
                 kd.tcases.helper.tch_util.TchUtil('sleep', 6),
                 kd.tcases.helper.tch_egrep.TchEgrep( '~/nohup.out', 'recvs DROP-cmd TILE_GRP_ADD rc 1\(.* ep1_dirty', matchCnt=2 ),
                ]
# }}}


[test_suite_tkcd_P__1x2]
protection_type = 'P__1x2'
# {{{
desc          = 'Test P__1x2 protection'
include_test_bench = cluster
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range(2)]),
# IO
                 kd.tcases.tkcd.tct_io.TctIo(None, ['write-pattern', 1, 128*1024, 0, None, None, 8]),
                 kd.tcases.tkcd.tct_io.TctIo(None, ['read-pattern', 1, 128*1024, 0, None, None, 8]),
                 #kd.tcases.tkcd.tct_io.TctIo(None, ['write-and-read-pattern', 1, 128*1024, 0, None, None, 8]),
                 #kd.tcases.tkcd.tct_io.TctIo(None, ['write-random',  1, 0, 4 * 1024 * 1024, 4096, 1024 * 1024, 10]),
                 #kd.tcases.tkcd.tct_io.TctIo(None, ['write', 1, 0xd4a0 * 4096, 1 * 4096]),
                 #kd.tcases.tkcd.tct_io.TctIo(None, ['write', 1, 0xd4a1 * 4096, 1 * 4096]),

                 # kill 1
                 # wr
                 # close all tkcd sess
                 # restart all
                 # rd
                ]
# }}}

[test_suite_tkcd_P__1x2_bind]
protection_type = 'P__1x2'
tile_cnt = 2
# {{{
desc          = 'Test P__1x2 protection'
include_test_bench = cluster
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range( %(tile_cnt))]),
                ]
#}}}

[test_suite_tkcd_P__1x2_restart_rd]
protection_type = 'P__1x2'
# {{{
desc          = 'Test P__1x2 protection'
include_test_bench = cluster
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd', 'gdb'], None ),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 #kd.tcases.helper.tch_pause.TchPause('yes_to_continue', 'Exit now'),
# rd
                 kd.tcases.tkcd.tct_tile.TctTile([[1, 1, %(protection_type)s]]),
                 kd.tcases.tkcd.tct_io.TctIo(None, ['read-pattern', 1, 128*1024, 0, None, None, 3]),
                ]
# }}}

[test_suite_tkcd_P__1x2_restart_wr]
protection_type = 'P__1x2'
# {{{
desc          = 'Test P__1x2 protection'
include_test_bench = cluster
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd', 'gdb'], None ),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 #kd.tcases.helper.tch_pause.TchPause('yes_to_continue', 'Exit now'),
# write
                 kd.tcases.tkcd.tct_tile.TctTile([[1, 1, %(protection_type)s]]),
                 kd.tcases.tkcd.tct_io.TctIo(None, ['write-pattern', 1, 128*1024, 0, None, None, 1]),
                ]
# }}}

[test_suite_tkcd_P__1x2_ep2_exit_write]
protection_type = 'P__1x2'
# {{{
desc          = 'Test P__1x2 protection'
include_test_bench = cluster
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
                 kd.tcases.helper.tch_dhost.TchDhost('umount'),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range(2)]),
# IO
                 kd.tcases.tkcd.tct_io.TctIo(None, ['write-pattern', 1, 128*1024, 0, None, None, 8]),
                 kd.tcases.tkcd.tct_io.TctIo(None, ['read-pattern',  1, 128*1024, 0, None, None, 8]),
# kill tkcd.2
                 kd.tcases.helper.tch_util.TchUtil('sleep', 5),
                 kd.tcases.helper.tch_start.TchStart( ['tkcd.myDock.2'], None ),
# one write
                 kd.tcases.helper.tch_util.TchUtil('sleep', 5),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range(1)]),
                 kd.tcases.tkcd.tct_io.TctIo(None, ['write-pattern', 1, 128*1024, 0, None, None, 1]),
                 kd.tcases.tkcd.tct_io.TctIo(None, ['write-pattern', 1, 128*1024, 1024*1024*1024, None, None, 1]),
                ]
# }}}

[test_suite_tkcd_P__1x2_timeout]
protection_type = 'P__1x2'
# {{{
desc          = 'Test P__1x2 protection'
include_test_bench = cluster
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range(2)]),
# IO
                 kd.tcases.tkcd.tct_io.TctIo(None, ['write-pattern', 1, 128*1024, 0, None, None, 1]),
                 #kd.tcases.tkcd.tct_io.TctIo(None, ['read-pattern', 1, 128*1024, 0, None, None, 8]),
                ]
# }}}

[test_suite_tkcd_P__1x2_partial_mesh]
protection_type = 'P__1x2'
# {{{
desc          = 'Test P__1x2 protection'
include_test_bench = cluster
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, x + 1, %(protection_type)s] for x in range(2)]),
# IO
                 kd.tcases.tkcd.tct_io.TctIo(None, ['write-pattern', 1, 128*1024, 0, None, None, 8]),
                 kd.tcases.tkcd.tct_io.TctIo(None, ['read-pattern', 1, 128*1024, 0, None, None, 8]),
                 kd.tcases.helper.tch_util.TchUtil('sleep', 1),
# restart
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd', 'gdb'], None ),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
# create partial mesh
                 kd.tcases.tkcd.tct_tkcd.TctTkcd('add', [(1,3), (3,1)]),
                 #kd.tcases.helper.tch_pause.TchPause('yes_to_continue', 'Exit now'),
                 kd.tcases.helper.tch_util.TchUtil('sleep', 5),
# issue a wr
                 kd.tcases.tkcd.tct_tile.TctTile([[1, 1, %(protection_type)s]]),
                 kd.tcases.tkcd.tct_io.TctIo(None, ['write-pattern', 1, 128*1024, 0, None, None, 1]),
                ]
# }}}

[test_suite_tkcd_P__1x2_rw]
protection_type = 'P__1x2'
# {{{
desc          = 'Test P__1x2 protection'
include_test_bench = cluster
whitelist     = [ kd.tcases.tkcd.tct_tile.TctTile([[1, 1, %(protection_type)s]]),
                  kd.tcases.tkcd.tct_io.TctIo(None, ['read-pattern',  1, 128*1024, 0, None, None, 16]),
                  kd.tcases.tkcd.tct_io.TctIo(None, ['write-pattern', 1, 128*1024, 0, None, None, 16]),
                  kd.tcases.tkcd.tct_io.TctIo(None, ['read-pattern',  1, 128*1024, 0, None, None, 16]),
                ]
# }}}

[test_suite_tkcd_P__1x2_rd]
protection_type = 'P__1x2'
# {{{
desc          = 'Test P__1x2 protection'
include_test_bench = cluster
whitelist     = [ kd.tcases.tkcd.tct_tile.TctTile([[1, 1, %(protection_type)s]]),
                  kd.tcases.tkcd.tct_io.TctIo(None, ['read-pattern', 1, 128*1024, 0, None, None, 16]),
                ]
# }}}

[test_suite_tkcd_P__1x2_wr]
protection_type = 'P__1x2'
# {{{
desc          = 'Test P__1x2 protection'
include_test_bench = cluster
whitelist     = [ kd.tcases.tkcd.tct_tile.TctTile([[1, 1, %(protection_type)s]]),
                  kd.tcases.tkcd.tct_io.TctIo(None, ['write-pattern', 1, 128*1024, 0, None, None, 1]),
                ]
# }}}

[test_suite_tkcd_P__1x2_io]
protection_type = 'P__1x2'
# {{{
desc          = 'Test P__1x2 protection'
include_test_bench = cluster
whitelist     = [
                 kd.tcases.tkcd.tct_tile.TctTile([[1, 1, %(protection_type)s]]),
# IO
                 kd.tcases.tkcd.tct_io.TctIo(None, ['write-and-read-pattern', 1, 128*1024, 0, None, None, 16]),
                 #kd.tcases.tkcd.tct_io.TctIo(None, ['write-and-read-pattern', 1, 128*1024, 0, None, None, 256]),
                 #kd.tcases.tkcd.tct_io.TctIo(None, ['write-and-read-pattern', 1, 128*1024, 0, None, None, 64]),
                 #kd.tcases.tkcd.tct_io.TctIo(None, ['write-random',  1, 0, 4 * 1024 * 1024, 4096, 1024 * 1024, 10]),
                 #kd.tcases.tkcd.tct_io.TctIo(None, ['write', 1, 0xd4a0 * 4096, 1 * 4096]),
                 #kd.tcases.tkcd.tct_io.TctIo(None, ['write', 1, 0xd4a1 * 4096, 1 * 4096]),
                ]
# }}}

[test_suite_tkcd_debug]
desc          = 'Test one io with LBA and blocks'
test_suite    = setup_default
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add'),
                 #kd.tcases.tkcd.tct_tkcd.TctTkcd('add'),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, 1, 'P_none']]),
                 #kd.tcases.tkcd.tct_tile.TctTile([[1, 1, 'P_4x1_32k']]),
                 #kd.tcases.tkcd.tct_tile.TctTile([[1, 1, 'P_4x1_32k__1x2']]),
# IO
                 #kd.tcases.helper.tch_pause.TchPause('enter_and_continue', 'Enter to Continue, next step issue one write'),
                 kd.tcases.tkcd.tct_io.TctIo(None, ['write-random',  1, 0, 4 * 1024 * 1024, 4096, 1024 * 1024, 1]),
                 #kd.tcases.tkcd.tct_io.TctIo(None, ['write-random',  1, 0, 4 * 1024 * 1024, 4096, 1024 * 1024, 10]),
                 #kd.tcases.tkcd.tct_io.TctIo(None, ['write', 1, 0xd4a0 * 4096, 1 * 4096]),
                 #kd.tcases.tkcd.tct_io.TctIo(None, ['write', 1, 0xd4a1 * 4096, 1 * 4096]),
                 #kd.tcases.tkcd.tct_io.TctIo(None, ['write', 1, 0xd4a2 * 4096, 1 * 4096]),
                 #kd.tcases.tkcd.tct_io.TctIo(None, ['write', 1, 0xd4a3 * 4096, 1 * 4096]),
                 #kd.tcases.tkcd.tct_io.TctIo(None, ['write-pattern', 1, 4*4096, 0xd400 * 4096, None, None, 64]),
                 #kd.tcases.tkcd.tct_io.TctIo(None, ['read',  1, 0 * 4096, 16 * 4096]),
                 #kd.tcases.tc_set.tcs_simple.TcsSimple('tkcd_16M_writes'),
                 #kd.tcases.tkcd.tct_io.TctIo(None, ['read-random',   1, 0, 4 * 1024 * 1024, 4096, 1024 * 1024, 10]),

                 #kd.tcases.tkcd.tct_device.TctDevice('err', 2),
                 #kd.tcases.tkcd.tct_tile.TctTile([[1, 1, 'P_none']]),
                 #kd.tcases.tkcd.tct_io.TctIo('invalid key (3)', ['write-and-read', 1, 0 * 4096, 4 * 4096]),
                 #kd.tcases.tkcd.tct_io.TctIo(None, ['write-and-read', 1, 0 * 4096, 256 * 4096]),
                 #kd.tcases.tkcd.tct_io.TctIo( None, ['write-and-read-corner', 1] ),
                 #kd.tcases.tkcd.tct_tile.TctTile([[1, 1]]),
                 #kd.tcases.tkcd.tct_io.TctIo( None, ['wread',  1, 0 * 4096, 2 * 4096] ),
                 #kd.tcases.tkcd.tct_io.TctIo('read a full stripe',                         ['wread',  1,        1024 * 1024, (          128) * 1024]),
                 #kd.tcases.tkcd.tct_device.TctDevice('del', 0),
                 #kd.tcases.tkcd.tct_io.TctIo(None, ['write',  1, 8 * 4096, 16 * 4096]),
                 #kd.tcases.tkcd.tct_gdb.TctGdb(),
                ]

[test_suite_tkcd_rebuild]
desc          = 'Test one io operation'
test_suite    = setup_default
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add', [0,1,2,3,4,5]),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, 1, 'P_4x1_32k']]),
                 kd.tcases.tc_set.tcs_simple.TcsSimple('tkcd_4M_writes'),
                 #kd.tcases.helper.tch_pause.TchPause('enter_and_continue', 'Enter to Continue, error io and start corner IO'),
                 kd.tcases.tkcd.tct_device.TctDevice('err', 1),
                 #kd.tcases.tkcd.tct_io.TctIo( None, ['write-and-read-corner', 1] ),
                 #kd.tcases.helper.tch_pause.TchPause('enter_and_continue', 'Enter to Continue, error disk and delete panel'),
                 kd.tcases.tkcd.tct_device.TctDevice('del', 1),
                 kd.tcases.helper.tch_util.TchUtil('sleep', 5),
                 kd.tcases.tkcd.tct_panel.TctPanel(1),
                 kd.tcases.helper.tch_pause.TchPause('enter_and_continue', 'Enter to Continue'),
                ]

[test_suite_tkcd_checkin]
desc          = 'basic test before checkin code'
test_suite    = setup_default
whitelist     = [
                 kd.tcases.helper.tch_dhost.TchDhost('rdisk-rescan'),
# no protection
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add', [x for x in range(5)]),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, 1]]),
                 kd.tcases.tc_set.tcs_simple.TcsSimple('tkcd_16M_writes'),
                 kd.tcases.tkcd.tct_io.TctIo( None, ['write-and-read-corner', 1] ),
# 4+1 protection
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add', [x for x in range(5)]),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, 1, 'P_4x1_32k']]),
                 kd.tcases.tc_set.tcs_simple.TcsSimple('tkcd_16M_writes'),
                 kd.tcases.tkcd.tct_io.TctIo( None, ['write-and-read-corner', 1] ),
# 8+1 protection
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add', [x for x in range(9)]),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, 1, 'P_8x1_8k']]),
                 kd.tcases.tc_set.tcs_simple.TcsSimple('tkcd_16M_writes'),
                 kd.tcases.tkcd.tct_io.TctIo( None, ['write-and-read-corner', 1] ),
# err-io
                 kd.tcases.tkcd.tct_device.TctDevice('err-io', 1, [None, None, None, None]),
                 kd.tcases.tkcd.tct_io.TctIo( None, ['write-and-read-corner', 1] ),
# err disk
                 kd.tcases.tkcd.tct_device.TctDevice('err', 1),
                 kd.tcases.tkcd.tct_io.TctIo( None, ['write-and-read-corner', 1] ),
# stop kdtkcd
                 #kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
                ]

[test_suite_tkcd_err_io]
desc          = 'Test one io operation'
test_suite    = setup_default
whitelist     = [
                 #kd.tcases.helper.tch_pause.TchPause('enter_and_continue', 'Ctrl-C to stop test suite'),
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add', [0,1,2,3,4]),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, 1, 'P_4x1_32k']]),
                 kd.tcases.tc_set.tcs_simple.TcsSimple('tkcd_16M_writes'),
# For device IO Error and change the error policy
                 kd.tcases.tkcd.tct_device.TctDevice('err-io', 2, [1, 1, None, None]),
                #kd.tcases.tkcd.tct_device.TctDevice('err', 1),
                #kd.tcases.tkcd.tct_io.TctIo( None, ['write-and-read-corner', 1] ),
                 kd.tcases.tkcd.tct_io.TctIo(None, ['write',   1, (1024 - 48) * 1024, ( 128) * 1024]),
                 kd.tcases.tkcd.tct_io.TctIo(None, ['read',    1, (1024 - 48) * 1024, ( 128) * 1024]),
                 kd.tcases.tkcd.tct_gdb.TctGdb(),
                ]

[test_suite_tkcd_current]
test_suite    = tkcd_P__1x1_write_ep0_ep1_error
desc          = 'run %(test_suite)s test suite'

[test_suite_tkcd_gdb]
desc          = 'Check tkcd state via GDB'
test_suite    = setup_default
whitelist     = [
                  kd.tcases.tkcd.tct_gdb.TctGdb('call TkcTx::dump("/tmp/tx.txt")'),
                  kd.tcases.tkcd.tct_gdb.TctGdb('call TkcTile::dump("/tmp/tile.txt")'),
                  kd.tcases.tkcd.tct_gdb.TctGdb(),
                ]

[test_suite_tkcd]
desc          = 'Verify TKCD functionality'
test_suite    = setup_default
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add', [0,1,2,3,4,5]),
                 kd.tcases.tkcd.tct_tile.TctTile([[1, 1]]),
                 kd.tcases.tkcd.tct_io.TctIo( None, ['write-and-read-corner', 1] ),
                 kd.tcases.tc_set.tcs_simple.TcsSimple('tkcd_16M_writes'),
                 kd.tcases.tkcd.tct_device.TctDevice('err', 1),
                 kd.tcases.tkcd.tct_io.TctIo( None, ['write-and-read-corner', 1] ),
                 kd.tcases.tc_set.tcs_simple.TcsSimple('tkcd_16M_writes'),
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
                ]

[test_suite_tkcd_full]
desc          = 'Verify TKCD functionality'
test_suite    = setup_default
whitelist     = [
                 kd.tcases.tc_set.tcs_simple.TcsSimple('buildAndInstall'),
# {{{
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add', [0,1,2,3,4]),
                 kd.tcases.tkcd.tct_tile.TctTile('Bind one tile', [[1, 1, 'P_4x1_32k']]),
                 kd.tcases.tc_set.tcs_tkcd_io.TcsTkcdIo(),
                 kd.tcases.tkcd.tct_device.TctDevice('err-io', 0),
                 kd.tcases.tc_set.tcs_tkcd_io.TcsTkcdIo(),

                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add', [0,1,2,3,4]),
                 kd.tcases.tkcd.tct_tile.TctTile('Bind one tile', [[1, 1, 'P_4x1_32k']]),
                 kd.tcases.tc_set.tcs_simple.TcsSimple('tkcd_16M_writes'),
                 kd.tcases.tkcd.tct_device.TctDevice('err-io', 1),
                 kd.tcases.tc_set.tcs_tkcd_io.TcsTkcdIo(),

                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add', [0,1,2,3,4]),
                 kd.tcases.tkcd.tct_tile.TctTile('Bind one tile', [[1, 1, 'P_4x1_32k']]),
                 kd.tcases.tc_set.tcs_simple.TcsSimple('tkcd_16M_writes'),
                 kd.tcases.tkcd.tct_device.TctDevice('err-io', 2),
                 kd.tcases.tc_set.tcs_tkcd_io.TcsTkcdIo(),

                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add', [0,1,2,3,4]),
                 kd.tcases.tkcd.tct_tile.TctTile('Bind one tile', [[1, 1, 'P_4x1_32k']]),
                 kd.tcases.tc_set.tcs_simple.TcsSimple('tkcd_16M_writes'),
                 kd.tcases.tkcd.tct_device.TctDevice('err-io', 3),
                 kd.tcases.tc_set.tcs_tkcd_io.TcsTkcdIo(),


                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice('add', [0,1,2,3,4]),
                 kd.tcases.tkcd.tct_tile.TctTile('Bind one tile', [[1, 1, 'P_4x1_32k']]),
                 kd.tcases.tc_set.tcs_simple.TcsSimple('tkcd_16M_writes'),
                 kd.tcases.tkcd.tct_device.TctDevice('err-io', 4),
                 kd.tcases.tc_set.tcs_tkcd_io.TcsTkcdIo(),

                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
# }}}
                ]

[test_suite_tkcd_boundary_write]
desc          = 'Verify TKCD functionality'
test_suite    = setup_default
whitelist     = [
                 kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
                 kd.tcases.helper.tch_dhost.TchDhost('reset_tkcd'),
                 kd.tcases.helper.tch_start.TchStart( None, ['kdtkcd'] ),
                 kd.tcases.tkcd.tct_device.TctDevice,
                 kd.tcases.tkcd.tct_tile.TctTile([[1, 1, 'P_4x1_32k']]),
                 kd.tcases.tkcd.tct_io.TctIo('small write at the boundary of 2 stripes', ['write',  1, (128 +32-8) * 1024, (       8 +  8) * 1024]),
                 #kd.tcases.helper.tch_start.TchStart( ['kdtkcd'], None ),
                ]

[test_suite_tkcd_io_pattern]
desc       = 'Test io operation'
whitelist  = [
              kd.tcases.io.tc_io_pattern.TcIoPattern,
             ]

[test_suite_sandbox]
desc       = "Sandbox Test Suite"
test_suite = setup_default
whitelist  = [
              kd.tcases.tc_set.tcs_simple.TcsSimple('sandbox'),
              kd.tcases.helper.tch_pause.TchPause('enter_and_continue', ' run all sandbox\n and\n other'),
              kd.tcases.helper.tch_pause.TchPause('enter_and_continue', ['One', 'two', 'three']),
              kd.tcases.helper.tch_pause.TchPause('enter_and_continue', \
                        { 'steps': ['One', 'two', 'three'],
                          'bench': ['cpu', 'hd']
                        }),
              #kd.tcases.helper.tch_util.TchUtil('set-bench', 'bench_3'),
              #kd.tcases.sandbox.All,
              #kd.tcases.helper.tch_util.TchUtil('sleep', 10),
              #[kd.tcases.sandbox.All, [0, 2]],
             ]

#
# ------------------------------------  Logger Config ------------------------------
#

# VFileHandler:
#  args: filename, access-mode, whitelist, blacklist, canEmail
#  filename can have following variable
#       <HOME> : home directory
#       <TIME_YYDD_HH> : 1503_06
#       For example: <HOME>/tmp/vtest/<TIME_YYDD_HH>/result.log
#  access-mode: 'w' or 'a+'. (Default is 'w')

[loggers]
keys=root

[handlers]
keys=consoleHandler,reportHandler,detailHandler,debugHandler,pexpectHandler

[formatters]
keys=simpleFormatter,reportFormater,detailFormater,expectFormater,consoleFormater,consoleColorFormater

[logger_root]
level=DEBUG
handlers=consoleHandler,reportHandler,detailHandler,debugHandler,pexpectHandler

[handler_consoleHandler]
#class=StreamHandler
class=kd.logging.streamhandler.StreamHandler
args=(['__main__', 'kd.tfwk.test_case'], None, sys.stdout)
#level=DEBUG
level=INFO
#formatter=consoleFormater
formatter=consoleColorFormater

[formatter_consoleFormater]
format=%(asctime)s - %(name)s - %(levelname)s - %(message)s
datefmt=%m-%d %H:%M:%S

[formatter_consoleColorFormater]
class=colorlog.ColoredFormatter
format=%(log_color)s%(asctime)s %(levelname)-8s%(reset)s %(bg_blue)s%(name)-20s%(reset)s %(message)s
datefmt=%m-%d %H:%M:%S

[handler_detailHandler]
class=kd.logging.filehandler.FileHandler
args=('%(default_work_dir)s/console.log', 'w')
level=INFO
formatter=detailFormater

[formatter_detailFormater]
format=%(asctime)s %(levelname)-8s %(name)-20s %(message)s
datefmt=%m-%d %H:%M:%S

[handler_reportHandler]
class=kd.logging.filehandler.FileHandler
args=('%(default_work_dir)s/result.log', 'w', ['__main__', 'kd.tfwk.runnable', 'kd.tfwk.test_case'], None, True)
level=INFO
formatter=reportFormater

[formatter_reportFormater]
#class=vlogging.vformatter.VHtmlFormatter
#format=<event name="%(name)s" level="%(levelno)d" filename="%(filename)s" lineno="%(lineno)d">
#         <message>%(message)s</message>
#       </event>
format=%(message)s
datefmt=

[handler_debugHandler]
class=kd.logging.filehandler.FileHandler
args=('%(default_work_dir)s/debug.log', 'w')
level=DEBUG
formatter=simpleFormatter

[formatter_simpleFormatter]
format=%(asctime)s - %(name)s - %(levelname)s - %(message)s
datefmt=

[handler_pexpectHandler]
class=kd.logging.filehandler.FileHandler
args=('%(default_work_dir)s/pexpect.log', 'w', ['util.kspawn'])
level=DEBUG
formatter=expectFormater

[formatter_expectFormater]
format=%(asctime)s: %(message)s
datefmt=

